-------------------------------------------------------------
-- CREATE NEW USER - STEP 1
-------------------------------------------------------------
CONN SYS/PASSWORD@LOCALHOST AS SYSDBA;

CREATE USER LOMS_MSTR IDENTIFIED BY LOMS_MSTR;
-------------------------------------------------------------
-- GRANT PRIVILEGES - STEP 2
-------------------------------------------------------------
GRANT CREATE SESSION, GRANT ANY PRIVILEGE TO LOMS_MSTR;

GRANT CREATE USER TO LOMS_MSTR;

GRANT ALTER USER TO LOMS_MSTR;

GRANT DROP USER TO LOMS_MSTR;

GRANT EXECUTE ON UTL_SMTP TO LOMS_MSTR;

GRANT EXECUTE ON UTL_TCP TO LOMS_MSTR;

GRANT EXECUTE ON UTL_FILE TO LOMS_MSTR;

GRANT CONNECT TO LOMS_MSTR;

GRANT RESOURCE TO LOMS_MSTR;

GRANT DBA TO LOMS_MSTR;

GRANT CREATE DATABASE LINK TO LOMS_MSTR;

GRANT CREATE PUBLIC SYNONYM TO LOMS_MSTR;

GRANT CREATE SYNONYM TO LOMS_MSTR;

GRANT CREATE TYPE TO LOMS_MSTR;

GRANT CREATE MATERIALIZED VIEW TO LOMS_MSTR;

GRANT CREATE ROLE TO LOMS_MSTR;

GRANT CREATE TABLE TO LOMS_MSTR;

GRANT CREATE VIEW TO LOMS_MSTR;

GRANT CREATE PROCEDURE TO LOMS_MSTR;

GRANT CREATE SEQUENCE TO LOMS_MSTR;

GRANT CREATE TRIGGER TO LOMS_MSTR;

COMMIT;

-------------------------------------------------------------
-- CONNECT TO DB AS LOMS_MSTR - STEP 3
-------------------------------------------------------------
CONN LOMS_MSTR/LOMS_MSTR@LOCALHOST;

-------------------------------------------------------------
-- CREATE DB OBJECTS - STEP 4
-------------------------------------------------------------

-- DDL for Sequence LOMS_AI_AUDIT_ID_SEQ
CREATE SEQUENCE  LOMS_AI_AUDIT_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;

-- DDL for Sequence LOMS_BOOK_ID_SEQ
CREATE SEQUENCE  LOMS_BOOK_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_CA_APP_ID_SEQ
CREATE SEQUENCE  LOMS_CA_APP_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100050 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_CCT_CASE_ID_SEQ
CREATE SEQUENCE  LOMS_CCT_CASE_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_CD_DOC_ID_SEQ
CREATE SEQUENCE  LOMS_CD_DOC_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_CE_EXEC_ID_SEQ
CREATE SEQUENCE  LOMS_CE_EXEC_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100050 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_CHI_CH_ID_SEQ
CREATE SEQUENCE  LOMS_CHI_CH_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_CI_CASE_ID_SEQ
CREATE SEQUENCE  LOMS_CI_CASE_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_CLI_CLIENT_ID_SEQ
CREATE SEQUENCE  LOMS_CLI_CLIENT_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_COURT_ID_SEQ
CREATE SEQUENCE  LOMS_COURT_ID_SEQ  
MINVALUE         1000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       1000 
CACHE            20 
NOORDER  
NOCYCLE ;
 
-- DDL for Sequence LOMS_CP_PET_ID_SEQ
CREATE SEQUENCE  LOMS_CP_PET_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100050 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_CS_SUITE_ID_SEQ
CREATE SEQUENCE  LOMS_CS_SUITE_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100050 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_EI_EMPID_SEQ
CREATE SEQUENCE  LOMS_EI_EMPID_SEQ  
MINVALUE         1000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100050 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_EXP_JI_JOB_ID_SEQ
CREATE SEQUENCE  LOMS_EXP_JI_JOB_ID_SEQ  
MINVALUE         1 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_IMP_JI_JOB_ID_SEQ
CREATE SEQUENCE  LOMS_IMP_JI_JOB_ID_SEQ  
MINVALUE         1 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       1 
CACHE            20
NOORDER  
NOCYCLE;

-- DDL for Sequence LOMS_JI_JDGMNT_ID_SEQ
CREATE SEQUENCE  LOMS_JI_JDGMNT_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;


-- DDL for Sequence LOMS_OI_OPP_ID_SEQ
CREATE SEQUENCE  LOMS_OI_OPP_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;

-- DDL for Sequence LOMS_REM_ID_SEQ
CREATE SEQUENCE  LOMS_REM_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_RI_REQST_ID_SEQ
CREATE SEQUENCE  LOMS_RI_REQST_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;
 
-- DDL for Sequence LOMS_TRANS_ID_SEQ
CREATE SEQUENCE  LOMS_TRANS_ID_SEQ  
MINVALUE         100000 
MAXVALUE         999999999999999999999999999 
INCREMENT BY     1 
START WITH       100000 
CACHE            20 
NOORDER  
NOCYCLE;

--  DDL for Table LOMS_APP_MASTER
CREATE TABLE LOMS_APP_MASTER
(
  EMAIL_ID            VARCHAR2(200),
  EMAIL_PWD           RAW(1000),
  EMAIL_ENABLED_FLG   VARCHAR2(5)     NOT NULL,
  SMS_ENABLED_FLG     VARCHAR2(5)     NOT NULL,
  PRODUCT_ID          VARCHAR2(50)    NOT NULL,
  ACTIVATION_ID       RAW(1000),
  GEN_IST	            DATE,
  GEN_USER_CD 	      VARCHAR2(20),
  UPD_IST	            DATE,
  UPD_USER_CD	        VARCHAR2(20)
);

-- DDL for Table LOMS_AUDIT_INFO
CREATE TABLE LOMS_AUDIT_INFO 
(	
    AUDIT_ID          NUMBER, 
    MSG_CODE          VARCHAR2(50), 
    MSG_TEXT          VARCHAR2(512), 
    SQL_ERROR_CODE    VARCHAR2(100), 
    SQL_ERROR_TEXT    VARCHAR2(512), 
    PROCESS_NAME      VARCHAR2(100), 
    KEY_VALUE         VARCHAR2(2500), 
    GEN_IST           DATE, 
    GEN_USER_CD       VARCHAR2(50), 
    UPD_IST           DATE, 
    UPD_USER_CD       VARCHAR2(50)
);

--  DDL for Table LOMS_BOOK_SHELF
CREATE TABLE LOMS_BOOK_SHELF
(
    BOOK_ID           NUMBER          NOT NULL,
    BOOK_NO           VARCHAR2(50),
    BOOK_TITLE        VARCHAR2(1000)  NOT NULL,
    BOOK_AUTHOR       VARCHAR2(200),
    BOOK_CO_AUTHOR    VARCHAR2(200),
    BOOK_SUBJECT      VARCHAR2(500),
    BOOK_TYPE         VARCHAR2(500),
    BOOK_YEAR         VARCHAR2(50),
    BOOK_PUBLISHER    VARCHAR2(500),
    BOOK_RACK_NO      VARCHAR2(100)   NOT NULL,
    BOOK_ROW_NO       VARCHAR2(100)   NOT NULL,
    BOOK_STATUS       VARCHAR2(100)   NOT NULL,
    GEN_IST     	    DATE            NOT NULL,
    GEN_USER_CD	      VARCHAR2(50)    NOT NULL,
    UPD_IST	          DATE            NOT NULL,
    UPD_USER_CD	      VARCHAR2(50)    NOT NULL
);

--  DDL for Table LOMS_CASE_DOC_INFO
CREATE TABLE LOMS_CASE_DOC_INFO 
(	
    DOC_ID        NUMBER, 
    CASE_ID       VARCHAR2(15), 
    CLIENT_ID     VARCHAR2(10), 
    DOC_NAME      VARCHAR2(50), 
    COMMENTS      VARCHAR2(1000), 
    ACTUAL_DOC    BLOB, 
    GEN_IST       DATE, 
    GEN_USER_CD   VARCHAR2(50), 
    UPD_IST       DATE, 
    UPD_USER_CD   VARCHAR2(50)
);
 
--  DDL for Table LOMS_CASE_HEARING_INFO
CREATE TABLE LOMS_CASE_HEARING_INFO 
(	
    CASE_HEARING_ID         NUMBER, 
    CASE_ID                 VARCHAR2(15), 
    CLIENT_ID               VARCHAR2(10), 
    CASE_HEARING_DATE       DATE, 
    CASE_HEARING_COMMENTS   VARCHAR2(1000), 
    GEN_IST                 DATE, 
    GEN_USER_CD             VARCHAR2(50), 
    UPD_IST                 DATE, 
    UPD_USER_CD             VARCHAR2(50)
);
 
--  DDL for Table LOMS_CASE_INFO
CREATE TABLE LOMS_CASE_INFO 
(	
    CASE_ID             VARCHAR2(15), 
    CLIENT_ID           VARCHAR2(10), 
    CASE_TYPE           VARCHAR2(25), 
    CASE_SUB_TYPE_1     VARCHAR2(100), 
    CASE_SUB_TYPE_2     VARCHAR2(100), 
    CASE_NO_1           VARCHAR2(100), 
    CASE_NO_2           VARCHAR2(100), 
    CASE_NO_3           VARCHAR2(100), 
    CASE_NO_4           VARCHAR2(100), 
    CASE_NO_5           VARCHAR2(100), 
    CASE_NO_6           VARCHAR2(100), 
    COURT_DETAILS       VARCHAR2(100), 
    CASE_PRIORITY       VARCHAR2(10), 
    CASE_STATUS         VARCHAR2(50), 
    JUDGMNT_DT          DATE, 
    CASE_COMMENTS       VARCHAR2(4000), 
    GEN_IST             DATE, 
    GEN_USER_CD         VARCHAR2(50), 
    UPD_IST             DATE, 
    UPD_USER_CD         VARCHAR2(50)
);
 
--  DDL for Table LOMS_CIVIL_APPEAL_TYPE
CREATE TABLE LOMS_CIVIL_APPEAL_TYPE 
(
    APPEAL_ID           NUMBER, 
    APPEAL_TYPE         VARCHAR2(100), 
    GEN_IST             DATE, 
    GEN_USER_CD         VARCHAR2(50), 
    UPD_IST             DATE, 
    UPD_USER_CD         VARCHAR2(50)
);
 
--  DDL for Table LOMS_CIVIL_EXEC_TYPE
CREATE TABLE LOMS_CIVIL_EXEC_TYPE 
(	
    EXECUTION_ID        NUMBER, 
    EXECUTION_TYPE      VARCHAR2(100), 
    GEN_IST             DATE, 
    GEN_USER_CD         VARCHAR2(50), 
    UPD_IST             DATE, 
    UPD_USER_CD         VARCHAR2(50)
);
 
--  DDL for Table LOMS_CIVIL_PET_TYPE
CREATE TABLE LOMS_CIVIL_PET_TYPE 
(	
    PETITION_ID     NUMBER, 
    PETITION_TYPE   VARCHAR2(100), 
    GEN_IST         DATE, 
    GEN_USER_CD     VARCHAR2(50), 
    UPD_IST         DATE, 
    UPD_USER_CD     VARCHAR2(50)
);

--  DDL for Table LOMS_CIVIL_SUIT_TYPE
CREATE TABLE LOMS_CIVIL_SUIT_TYPE 
(	
    SUITE_ID      NUMBER, 
    SUITE_TYPE    VARCHAR2(100), 
    GEN_IST       DATE, 
    GEN_USER_CD   VARCHAR2(50), 
    UPD_IST       DATE, 
    UPD_USER_CD   VARCHAR2(50)
);

--  DDL for Table LOMS_CLIENT_FAMILY_INFO
CREATE TABLE LOMS_CLIENT_FAMILY_INFO 
(	
    CLIENT_ID             VARCHAR2(10), 
    RELN_NAME             VARCHAR2(50), 
    RELN_TYPE             VARCHAR2(25), 
    RELN_DOB              DATE, 
    RELN_MOB_NO           VARCHAR2(20), 
    RELN_TEL_NO           VARCHAR2(20), 
    RELN_ADDRESS          VARCHAR2(500), 
    RELN_GENDER           VARCHAR2(15), 
    RELN_MARITAL_STATUS   VARCHAR2(15), 
    RELN_DOM              DATE, 
    COMMENTS              VARCHAR2(1000), 
    GEN_IST               DATE, 
    GEN_USER_CD           VARCHAR2(50), 
    UPD_IST               DATE, 
    UPD_USER_CD           VARCHAR2(50)
);

--  DDL for Table LOMS_CLIENT_INFO
CREATE TABLE LOMS_CLIENT_INFO 
(	
    CLIENT_ID       VARCHAR2(10), 
    FIRST_NAME      VARCHAR2(50), 
    LAST_NAME       VARCHAR2(50), 
    GENDER          VARCHAR2(15), 
    TEL_NO          VARCHAR2(20), 
    MOBILE_NO       VARCHAR2(20), 
    EMAIL_ID        VARCHAR2(100), 
    PERM_ADDRESS    VARCHAR2(500), 
    TEMP_ADDRESS    VARCHAR2(500), 
    ORG_NAME        VARCHAR2(100), 
    ORG_ADDRESS     VARCHAR2(500), 
    ORG_TEL_NO      VARCHAR2(20), 
    ORG_MOBILE      VARCHAR2(20), 
    PAN_NO          VARCHAR2(25), 
    TIN_NO          VARCHAR2(25), 
    USER_ID         VARCHAR2(50), 
    PROFESSION      VARCHAR2(50), 
    DOB             DATE, 
    COMMENTS        VARCHAR2(1000), 
    GEN_IST         DATE, 
    GEN_USER_CD     VARCHAR2(50), 
    UPD_IST         DATE, 
    UPD_USER_CD     VARCHAR2(50)
);

--  DDL for Table LOMS_COURT_INFO
CREATE TABLE LOMS_COURT_INFO 
(	
    COURT_ID          VARCHAR2(20), 
    COURT_NAME        VARCHAR2(100), 
    COURT_TYPE        VARCHAR2(100), 
    COURT_ADDRESS     VARCHAR2(500), 
    COURT_CITY        VARCHAR2(50), 
    COURT_DISTRICT    VARCHAR2(50), 
    COURT_STATE       VARCHAR2(50), 
    COURT_COUNTRY     VARCHAR2(50), 
    COMMENTS          VARCHAR2(1000), 
    GEN_IST           DATE, 
    GEN_USER_CD       VARCHAR2(50), 
    UPD_IST           DATE, 
    UPD_USER_CD       VARCHAR2(50)
);

--  DDL for Table LOMS_CRIMINAL_CASE_TYPE
CREATE TABLE LOMS_CRIMINAL_CASE_TYPE 
(	
    CRIMINAL_CASE_TYPE_ID   NUMBER, 
    CRIMINAL_CASE_TYPE      VARCHAR2(100), 
    GEN_IST                 DATE, 
    GEN_USER_CD             VARCHAR2(50), 
    UPD_IST                 DATE, 
    UPD_USER_CD             VARCHAR2(50)
);

--  DDL for Table LOMS_CRYPT_TBL
CREATE TABLE LOMS_CRYPT_TBL 
(	
    CRYPT_TYPE    VARCHAR2(20), 
    CRYPT_CD      VARCHAR2(100)
);

--  DDL for Table LOMS_EMP_INFO
CREATE TABLE LOMS_EMP_INFO 
(	
    EMP_ID            NUMBER, 
    FIRST_NAME        VARCHAR2(50), 
    LAST_NAME         VARCHAR2(50), 
    GENDER            VARCHAR2(15), 
    ADDRESS           VARCHAR2(500), 
    NATIONALITY       VARCHAR2(25), 
    DOB               DATE, 
    TEL_NO            VARCHAR2(20), 
    MOB_NO            VARCHAR2(20), 
    COMMENTS          VARCHAR2(500), 
    DOJ               DATE, 
    PAN_NO            VARCHAR2(20), 
    LICENSE_NO        VARCHAR2(20), 
    USER_TYPE         VARCHAR2(20), 
    USER_NAME         VARCHAR2(20), 
    EMAIL_ID          VARCHAR2(200), 
    EMP_PWD           RAW(2000), 
    SECURITY_QSN_1    VARCHAR2(250), 
    SECURITY_QSN_2    VARCHAR2(250), 
    ANSWER_1          RAW(1000), 
    ANSWER_2          RAW(1000), 
    OBSLT_IST         DATE, 
    OBSLT_USER_CD     VARCHAR2(50), 
    GEN_IST           DATE, 
    GEN_USER_CD       VARCHAR2(50), 
    UPD_IST           DATE, 
    UPD_USER_CD       VARCHAR2(50)
);

--  DDL for Table LOMS_INC_EXP_INFO
CREATE TABLE LOMS_INC_EXP_INFO 
(
    TRANSACTION_ID    NUMBER, 
    CLIENT_ID         VARCHAR2(10), 
    CASE_ID           VARCHAR2(15), 
    PAID_AMT          NUMBER, 
    PAID_IST          DATE, 
    PAYMNT_TYPE       VARCHAR2(50), 
    COMMENTS          VARCHAR2(1000), 
    GEN_IST           DATE, 
    GEN_USER_CD       VARCHAR2(50), 
    UPD_IST           DATE, 
    UPD_USER_CD       VARCHAR2(50)
);

--  DDL for Table LOMS_JDGMNT_INFO
CREATE TABLE LOMS_JDGMNT_INFO
(
    JDGMNT_ID	        NUMBER,
    JDGMNT_MONTH	    VARCHAR2(50),
    JDGMNT_YEAR	      VARCHAR2(10),
    JDGMNT_DATE	      DATE,
    JDGMNT_COURT	    VARCHAR2(100),
    JDGMNT_TITLE	    VARCHAR2(4000),
    JDGMNT_BENCH	    VARCHAR2(4000),
    JDGMNT_CITATION	  VARCHAR2(4000),
    JDGMNT_CIT_INFO	  VARCHAR2(4000),
    JDGMNT_ACT	      VARCHAR2(4000),
    JDGMNT_DOC_NAME	  VARCHAR2(100),
    JDGMNT_DOC	      BLOB,
    GEN_IST	          DATE,
    GEN_USER_CD	      VARCHAR2(50),
    UPD_IST	          DATE,
    UPD_USER_CD	      VARCHAR2(50)
);

--  DDL for Table LOMS_OPPONENT_INFO
CREATE TABLE LOMS_OPPONENT_INFO 
(	
    OPPONENT_NO             NUMBER,
    CASE_ID                 VARCHAR2(15), 
    CLIENT_ID               VARCHAR2(10), 
    OPP_PARTY_NAME          VARCHAR2(100), 
    OPP_PARTY_ADDRESS       VARCHAR2(400), 
    OPP_PARTY_TEL_NO        VARCHAR2(20), 
    OPP_PARTY_MOB_NO        VARCHAR2(20), 
    OPP_PARTY_EMAIL_ID      VARCHAR2(100), 
    OPP_PARTY_ORG_NAME      VARCHAR2(100), 
    OPP_PARTY_ORG_REP       VARCHAR2(100), 
    OPP_PARTY_ORG_ADDRESS   VARCHAR2(400), 
    OPP_PARTY_ORG_TEL_NO    VARCHAR2(20), 
    OPP_PARTY_ORG_MOB_NO    VARCHAR2(20), 
    OPP_PARTY_ORG_EMAIL_ID  VARCHAR2(100), 
    OPP_LAWYER_NAME         VARCHAR2(100), 
    OPP_LAWYER_ADDRESS      VARCHAR2(400), 
    OPP_LAWYER_TEL_NO       VARCHAR2(20), 
    OPP_LAWYER_MOB_NO       VARCHAR2(20), 
    OPP_LAWYER_EMAIL_ID     VARCHAR2(100), 
    GEN_IST                 DATE, 
    GEN_USER_CD             VARCHAR2(50), 
    UPD_IST                 DATE, 
    UPD_USER_CD             VARCHAR2(50)
);

--  DDL for Table LOMS_REMINDER_ALERT
CREATE TABLE LOMS_REMINDER_ALERT 
(	
    REMINDER_ID       NUMBER, 
    REMINDER_TYPE     VARCHAR2(50), 
    REMINDER_SUBJECT  VARCHAR2(50), 
    REMINDER_LOCN     VARCHAR2(100), 
    REMINDER_TIME     VARCHAR2(100), 
    REMINDER_MSG      VARCHAR2(500), 
    REMINDER_DATE     DATE,
    GEN_IST           DATE, 
    GEN_USER_CD       VARCHAR2(50), 
    UPD_IST           DATE, 
    UPD_USER_CD       VARCHAR2(50)      
);

--  DDL for Table LOMS_STATE_INFO
CREATE TABLE LOMS_STATE_INFO 
(	
    STATE_NAME        VARCHAR2(100), 
    DISTRICT_NAME     VARCHAR2(100)
);

--  DDL for Index LOMS_CHI_CH_ID_PK
CREATE UNIQUE INDEX LOMS_CHI_CH_ID_PK ON LOMS_CASE_HEARING_INFO (CASE_HEARING_ID);

--  DDL for Index LOMS_CI_CASE_ID_PK
CREATE UNIQUE INDEX LOMS_CI_CASE_ID_PK ON LOMS_CASE_INFO (CASE_ID);

--  DDL for Index LOMS_AI_AUDIT_ID_PK
CREATE UNIQUE INDEX LOMS_AI_AUDIT_ID_PK ON LOMS_AUDIT_INFO (AUDIT_ID);

--  DDL for Index LOMS_EI_EMPID_PK
CREATE UNIQUE INDEX LOMS_EI_EMPID_PK ON LOMS_EMP_INFO (EMP_ID);

--  DDL for Index LOMS_CE_EXEC_ID_PK
CREATE UNIQUE INDEX LOMS_CE_EXEC_ID_PK ON LOMS_CIVIL_EXEC_TYPE (EXECUTION_ID);

--  DDL for Index LOMS_COURT_INFO_ID_PK
CREATE UNIQUE INDEX LOMS_COURT_INFO_ID_PK ON LOMS_COURT_INFO (COURT_ID);

--  DDL for Index LOMS_IEI_TRANS_ID_PK
CREATE UNIQUE INDEX LOMS_IEI_TRANS_ID_PK ON LOMS_INC_EXP_INFO (TRANSACTION_ID);

--  DDL for Index LOMS_CCT_CASE_ID_PK
CREATE UNIQUE INDEX LOMS_CCT_CASE_ID_PK ON LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID);

--  DDL for Index LOMS_CP_PET_ID_PK
CREATE UNIQUE INDEX LOMS_CP_PET_ID_PK ON LOMS_CIVIL_PET_TYPE (PETITION_ID);

--  DDL for Index LOMS_CLI_CLIENT_ID_PK
CREATE UNIQUE INDEX LOMS_CLI_CLIENT_ID_PK ON LOMS_CLIENT_INFO (CLIENT_ID);

--  DDL for Index LOMS_CA_APP_ID_PK
CREATE UNIQUE INDEX LOMS_CA_APP_ID_PK ON LOMS_CIVIL_APPEAL_TYPE (APPEAL_ID);

--  DDL for Index LOMS_RA_REM_ID_PK
CREATE UNIQUE INDEX LOMS_RA_REM_ID_PK ON LOMS_REMINDER_ALERT (REMINDER_ID);

--  DDL for Index LOMS_CD_DOC_ID_PK
CREATE UNIQUE INDEX LOMS_CD_DOC_ID_PK ON LOMS_CASE_DOC_INFO (DOC_ID);

--  DDL for Index LOMS_CS_SUITE_ID_PK
CREATE UNIQUE INDEX LOMS_CS_SUITE_ID_PK ON LOMS_CIVIL_SUIT_TYPE (SUITE_ID);

--  DDL for Index LOMS_CLI_UK
CREATE UNIQUE INDEX LOMS_CLI_UK ON LOMS_CLIENT_INFO (FIRST_NAME, LAST_NAME, MOBILE_NO);

--  DDL for Index LOMS_BS_BOOK_ID_PK
CREATE UNIQUE INDEX LOMS_BS_BOOK_ID_PK ON LOMS_BOOK_SHELF (BOOK_ID);

--  DDL for Index LOMS_JI_JDGMNT_ID_PK
CREATE UNIQUE INDEX LOMS_JI_JDGMNT_ID_PK ON LOMS_JDGMNT_INFO (JDGMNT_ID);

--  Constraints for Table LOMS_CRYPT_TBL
ALTER TABLE LOMS_CRYPT_TBL MODIFY (CRYPT_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_CRYPT_TBL MODIFY (CRYPT_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_INC_EXP_INFO
ALTER TABLE LOMS_INC_EXP_INFO ADD CONSTRAINT LOMS_IEI_TRANS_ID_PK PRIMARY KEY (TRANSACTION_ID) ENABLE;

ALTER TABLE LOMS_INC_EXP_INFO MODIFY (TRANSACTION_ID NOT NULL ENABLE);

ALTER TABLE LOMS_INC_EXP_INFO MODIFY (PAID_AMT NOT NULL ENABLE);

ALTER TABLE LOMS_INC_EXP_INFO MODIFY (PAID_IST NOT NULL ENABLE);

ALTER TABLE LOMS_INC_EXP_INFO MODIFY (PAYMNT_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_INC_EXP_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_INC_EXP_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_INC_EXP_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_INC_EXP_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_CASE_DOC_INFO
ALTER TABLE LOMS_CASE_DOC_INFO ADD CONSTRAINT LOMS_CD_DOC_ID_PK PRIMARY KEY (DOC_ID) ENABLE;

ALTER TABLE LOMS_CASE_DOC_INFO MODIFY (DOC_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_DOC_INFO MODIFY (CASE_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_DOC_INFO MODIFY (CLIENT_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_DOC_INFO MODIFY (DOC_NAME NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_DOC_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_DOC_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_DOC_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_DOC_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_CLIENT_FAMILY_INFO
ALTER TABLE LOMS_CLIENT_FAMILY_INFO MODIFY (CLIENT_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_FAMILY_INFO MODIFY (RELN_NAME NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_FAMILY_INFO MODIFY (RELN_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_FAMILY_INFO MODIFY (RELN_GENDER NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_FAMILY_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_FAMILY_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_FAMILY_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_FAMILY_INFO MODIFY (GEN_IST NOT NULL ENABLE);

--  Constraints for Table LOMS_REMINDER_ALERT
ALTER TABLE LOMS_REMINDER_ALERT ADD CONSTRAINT LOMS_RA_REM_ID_PK PRIMARY KEY (REMINDER_ID) ENABLE;

ALTER TABLE LOMS_REMINDER_ALERT MODIFY (REMINDER_ID NOT NULL ENABLE);

ALTER TABLE LOMS_REMINDER_ALERT MODIFY (REMINDER_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_REMINDER_ALERT MODIFY (REMINDER_SUBJECT NOT NULL ENABLE);

ALTER TABLE LOMS_REMINDER_ALERT MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_REMINDER_ALERT MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_REMINDER_ALERT MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_REMINDER_ALERT MODIFY (UPD_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_REMINDER_ALERT MODIFY (REMINDER_DATE NOT NULL ENABLE);

--  Constraints for Table LOMS_CIVIL_APPEAL_TYPE
ALTER TABLE LOMS_CIVIL_APPEAL_TYPE ADD CONSTRAINT LOMS_CA_APP_ID_PK PRIMARY KEY (APPEAL_ID) ENABLE;

ALTER TABLE LOMS_CIVIL_APPEAL_TYPE MODIFY (APPEAL_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_APPEAL_TYPE MODIFY (APPEAL_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_APPEAL_TYPE MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_APPEAL_TYPE MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_APPEAL_TYPE MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_APPEAL_TYPE MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_CIVIL_SUIT_TYPE
ALTER TABLE LOMS_CIVIL_SUIT_TYPE ADD CONSTRAINT LOMS_CS_SUITE_ID_PK PRIMARY KEY (SUITE_ID) ENABLE;

ALTER TABLE LOMS_CIVIL_SUIT_TYPE MODIFY (SUITE_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_SUIT_TYPE MODIFY (SUITE_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_SUIT_TYPE MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_SUIT_TYPE MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_SUIT_TYPE MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_SUIT_TYPE MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_CRIMINAL_CASE_TYPE
ALTER TABLE LOMS_CRIMINAL_CASE_TYPE ADD CONSTRAINT LOMS_CCT_CASE_ID_PK PRIMARY KEY (CRIMINAL_CASE_TYPE_ID) ENABLE;

ALTER TABLE LOMS_CRIMINAL_CASE_TYPE MODIFY (CRIMINAL_CASE_TYPE_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CRIMINAL_CASE_TYPE MODIFY (CRIMINAL_CASE_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_CRIMINAL_CASE_TYPE MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CRIMINAL_CASE_TYPE MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CRIMINAL_CASE_TYPE MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CRIMINAL_CASE_TYPE MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_CIVIL_PET_TYPE
ALTER TABLE LOMS_CIVIL_PET_TYPE ADD CONSTRAINT LOMS_CP_PET_ID_PK PRIMARY KEY (PETITION_ID) ENABLE;

ALTER TABLE LOMS_CIVIL_PET_TYPE MODIFY (PETITION_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_PET_TYPE MODIFY (PETITION_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_PET_TYPE MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_PET_TYPE MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_PET_TYPE MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_PET_TYPE MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_COURT_INFO
ALTER TABLE LOMS_COURT_INFO ADD CONSTRAINT LOMS_COURT_INFO_ID_PK PRIMARY KEY (COURT_ID) ENABLE;

ALTER TABLE LOMS_COURT_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_COURT_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_COURT_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_COURT_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_OPPONENT_INFO

ALTER TABLE LOMS_OPPONENT_INFO ADD CONSTRAINT LOMS_OI_OPP_NO_PK PRIMARY KEY (OPPONENT_NO) ENABLE;

ALTER TABLE LOMS_OPPONENT_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_OPPONENT_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_OPPONENT_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_OPPONENT_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_OPPONENT_INFO MODIFY (CASE_ID NOT NULL ENABLE);

ALTER TABLE LOMS_OPPONENT_INFO MODIFY (CLIENT_ID NOT NULL ENABLE);

--  Constraints for Table LOMS_CASE_INFO

ALTER TABLE LOMS_CASE_INFO ADD CONSTRAINT LOMS_CI_CASE_ID_PK PRIMARY KEY (CASE_ID) ENABLE;

ALTER TABLE LOMS_CASE_INFO MODIFY (CASE_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_INFO MODIFY (CLIENT_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_INFO MODIFY (CASE_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_INFO MODIFY (CASE_NO_1 NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_CIVIL_EXEC_TYPE

ALTER TABLE LOMS_CIVIL_EXEC_TYPE ADD CONSTRAINT LOMS_CE_EXEC_ID_PK PRIMARY KEY (EXECUTION_ID) ENABLE;

ALTER TABLE LOMS_CIVIL_EXEC_TYPE MODIFY (EXECUTION_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_EXEC_TYPE MODIFY (EXECUTION_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_EXEC_TYPE MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_EXEC_TYPE MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_EXEC_TYPE MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CIVIL_EXEC_TYPE MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_EMP_INFO

ALTER TABLE LOMS_EMP_INFO ADD CONSTRAINT LOMS_EI_EMPID_PK PRIMARY KEY (EMP_ID) ENABLE;

ALTER TABLE LOMS_EMP_INFO MODIFY (EMP_ID NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (FIRST_NAME NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (LAST_NAME NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (MOB_NO NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (USER_TYPE NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (USER_NAME NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (EMAIL_ID NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (EMP_PWD NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (SECURITY_QSN_1 NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (SECURITY_QSN_2 NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (ANSWER_1 NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (ANSWER_2 NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_EMP_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_AUDIT_INFO

ALTER TABLE LOMS_AUDIT_INFO ADD CONSTRAINT LOMS_AI_AUDIT_ID_PK PRIMARY KEY (AUDIT_ID) ENABLE;

ALTER TABLE LOMS_AUDIT_INFO MODIFY (AUDIT_ID NOT NULL ENABLE);

ALTER TABLE LOMS_AUDIT_INFO MODIFY (MSG_CODE NOT NULL ENABLE);

ALTER TABLE LOMS_AUDIT_INFO MODIFY (MSG_TEXT NOT NULL ENABLE);

ALTER TABLE LOMS_AUDIT_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_AUDIT_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_AUDIT_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_AUDIT_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_AUDIT_INFO MODIFY (PROCESS_NAME NOT NULL ENABLE);

--  Constraints for Table LOMS_CASE_HEARING_INFO

ALTER TABLE LOMS_CASE_HEARING_INFO ADD CONSTRAINT LOMS_CHI_CH_ID_PK PRIMARY KEY (CASE_HEARING_ID) ENABLE;

ALTER TABLE LOMS_CASE_HEARING_INFO MODIFY (CASE_HEARING_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_HEARING_INFO MODIFY (CASE_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_HEARING_INFO MODIFY (CLIENT_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_HEARING_INFO MODIFY (CASE_HEARING_DATE NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_HEARING_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_HEARING_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_HEARING_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CASE_HEARING_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Constraints for Table LOMS_CLIENT_INFO

ALTER TABLE LOMS_CLIENT_INFO ADD CONSTRAINT LOMS_CLI_CLIENT_ID_PK PRIMARY KEY (CLIENT_ID) ENABLE;

ALTER TABLE LOMS_CLIENT_INFO ADD CONSTRAINT LOMS_CLI_UK UNIQUE (FIRST_NAME, LAST_NAME, MOBILE_NO) ENABLE;

ALTER TABLE LOMS_CLIENT_INFO MODIFY (CLIENT_ID NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_INFO MODIFY (FIRST_NAME NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_INFO MODIFY (LAST_NAME NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_INFO MODIFY (MOBILE_NO NOT NULL ENABLE);

ALTER TABLE LOMS_CLIENT_INFO MODIFY (GENDER NOT NULL ENABLE);

--  Constraints for Table LOMS_CLIENT_INFO

ALTER TABLE LOMS_BOOK_SHELF ADD CONSTRAINT LOMS_BS_BOOK_ID_PK PRIMARY KEY (BOOK_ID) ENABLE;

--  Constraints for Table LOMS_JDGMNT_INFO

ALTER TABLE LOMS_JDGMNT_INFO ADD CONSTRAINT LOMS_JI_JDGMNT_ID_PK PRIMARY KEY (JDGMNT_ID) ENABLE;

ALTER TABLE LOMS_JDGMNT_INFO MODIFY (JDGMNT_ID NOT NULL ENABLE);

ALTER TABLE LOMS_JDGMNT_INFO MODIFY (JDGMNT_DATE NOT NULL ENABLE);

ALTER TABLE LOMS_JDGMNT_INFO MODIFY (JDGMNT_COURT NOT NULL ENABLE);

ALTER TABLE LOMS_JDGMNT_INFO MODIFY (GEN_IST NOT NULL ENABLE);

ALTER TABLE LOMS_JDGMNT_INFO MODIFY (GEN_USER_CD NOT NULL ENABLE);

ALTER TABLE LOMS_JDGMNT_INFO MODIFY (UPD_IST NOT NULL ENABLE);

ALTER TABLE LOMS_JDGMNT_INFO MODIFY (UPD_USER_CD NOT NULL ENABLE);

--  Ref Constraints for Table LOMS_CASE_DOC_INFO

ALTER TABLE LOMS_CASE_DOC_INFO ADD CONSTRAINT LOMS_CD_CLIENT_ID_FK FOREIGN KEY (CLIENT_ID)
REFERENCES LOMS_CLIENT_INFO (CLIENT_ID) ENABLE;

--  Ref Constraints for Table LOMS_CASE_HEARING_INFO

ALTER TABLE LOMS_CASE_HEARING_INFO ADD CONSTRAINT LOMS_CHI_CLIENT_ID_FK FOREIGN KEY (CLIENT_ID)
REFERENCES LOMS_CLIENT_INFO (CLIENT_ID) ENABLE;

--  Ref Constraints for Table LOMS_CASE_INFO

ALTER TABLE LOMS_CASE_INFO ADD CONSTRAINT LOMS_CI_CLIENT_ID_FK FOREIGN KEY (CLIENT_ID)
REFERENCES LOMS_CLIENT_INFO (CLIENT_ID) ENABLE;

--  Ref Constraints for Table LOMS_CLIENT_FAMILY_INFO

ALTER TABLE LOMS_CLIENT_FAMILY_INFO ADD CONSTRAINT LOMS_CFI_CLIENT_ID_FK FOREIGN KEY (CLIENT_ID)
REFERENCES LOMS_CLIENT_INFO (CLIENT_ID) ENABLE;

--  Ref Constraints for Table LOMS_OPPONENT_INFO

ALTER TABLE LOMS_OPPONENT_INFO ADD CONSTRAINT LOMS_OI_CLIENT_ID_FK FOREIGN KEY (CLIENT_ID)
REFERENCES LOMS_CLIENT_INFO (CLIENT_ID) ENABLE;

ALTER TABLE LOMS_OPPONENT_INFO ADD CONSTRAINT LOMS_OI_CASE_ID_FK FOREIGN KEY (CASE_ID)
REFERENCES LOMS_CASE_INFO (CASE_ID) ENABLE;

--  DDL for Package LOMS_AUDIT_PKG

CREATE OR REPLACE PACKAGE LOMS_AUDIT_PKG AS

    PROCEDURE LogAuditMsg(ProcessNameIN     IN      LOMS_AUDIT_INFO.PROCESS_NAME%TYPE,
                          KeyValueIN        IN      LOMS_AUDIT_INFO.KEY_VALUE%TYPE,
                          MsgCdIN           IN      LOMS_AUDIT_INFO.MSG_CODE%TYPE,
                          MsgTextIN         IN      LOMS_AUDIT_INFO.MSG_TEXT%TYPE,
                          SqlErrorCdIN      IN      LOMS_AUDIT_INFO.SQL_ERROR_CODE%TYPE,
                          SqlErrorTextIN    IN      LOMS_AUDIT_INFO.SQL_ERROR_TEXT%TYPE);

END LOMS_AUDIT_PKG;  
/

--  DDL for Package LOMS_CRYPT_PKG

CREATE OR REPLACE PACKAGE LOMS_CRYPT_PKG AS

    FUNCTION EncryptData(EncryptString   IN    VARCHAR2)
    RETURN RAW;

    FUNCTION DecryptData(DecryptString   IN    VARCHAR2 )
    RETURN VARCHAR2;

END LOMS_CRYPT_PKG;  
/

--  DDL for Package LOMS_DATA_BKP_PKG

CREATE OR REPLACE PACKAGE LOMS_DATA_BKP_PKG AS 

    PROCEDURE LomsDataExport;
    
    PROCEDURE LomsDataImport;

END LOMS_DATA_BKP_PKG;  
/

--  DDL for Package LOMS_EMP_PKG

CREATE OR REPLACE
PACKAGE LOMS_EMP_PKG AS

    TYPE EMP_INFO_REC_TYPE IS RECORD
    (
        EmpID           NUMBER,
        FirstName	      VARCHAR2(50),
        LastName	      VARCHAR2(50),
        Gender          VARCHAR2(15),
        Address	        VARCHAR2(500),
        Nationality	    VARCHAR2(25),
        Dob	            DATE,
        TelNo	          NUMBER,
        MobNo	          NUMBER,
        Comments	      VARCHAR2(500),
        Doj	            DATE,
        PanNo	          VARCHAR2(20),
        LicenseNo	      VARCHAR2(20),
        UserName        VARCHAR2(20),
        UserType        VARCHAR2(20)
    );

    TYPE EMP_INFO_REF_CUR_TYPE IS REF CURSOR
    RETURN EMP_INFO_REC_TYPE;

    PROCEDURE AddEmpInfo
    (
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
        GenderIN            IN      LOMS_EMP_INFO.GENDER%TYPE,
        AddressIN	          IN      LOMS_EMP_INFO.ADDRESS%TYPE,
        NationalityIN	      IN      LOMS_EMP_INFO.NATIONALITY%TYPE,
        DobIN	              IN      VARCHAR2,
        TelNoIN	            IN      LOMS_EMP_INFO.TEL_NO%TYPE,
        MobNoIN	            IN      LOMS_EMP_INFO.MOB_NO%TYPE,
        CommentsIN	        IN      LOMS_EMP_INFO.COMMENTS%TYPE,
        DojIN	              IN      VARCHAR2,
        PanNoIN	            IN      LOMS_EMP_INFO.PAN_NO%TYPE,
        LicenseNoIN	        IN      LOMS_EMP_INFO.LICENSE_NO%TYPE,
        EmailIDIN           IN      LOMS_EMP_INFO.EMAIL_ID%TYPE,
        UserTypeIN          IN      LOMS_EMP_INFO.USER_TYPE%TYPE,
        SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        Answer1IN           IN      VARCHAR2,
        SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        Answer2IN           IN      VARCHAR2,
        EmpIDOUT            OUT     LOMS_EMP_INFO.EMP_ID%TYPE,
        UserNameOUT         OUT     VARCHAR2,
        PasswordOUT         OUT     VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );
    
    PROCEDURE AddLawyerInfo
    (
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
        GenderIN            IN      LOMS_EMP_INFO.GENDER%TYPE,
        AddressIN	          IN      LOMS_EMP_INFO.ADDRESS%TYPE,
        NationalityIN	      IN      LOMS_EMP_INFO.NATIONALITY%TYPE,
        DobIN	              IN      VARCHAR2,
        TelNoIN	            IN      LOMS_EMP_INFO.TEL_NO%TYPE,
        MobNoIN	            IN      LOMS_EMP_INFO.MOB_NO%TYPE,
        CommentsIN	        IN      LOMS_EMP_INFO.COMMENTS%TYPE,
        EmailIDIN           IN      LOMS_EMP_INFO.EMAIL_ID%TYPE,
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        UserPwdIN           IN      VARCHAR2,
        SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        Answer1IN           IN      VARCHAR2,
        SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        Answer2IN           IN      VARCHAR2,
        EmpIDOUT            OUT     LOMS_EMP_INFO.EMP_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE SearchEmpInfo
    (
        EmpIDIN             IN      LOMS_EMP_INFO.EMP_ID%TYPE,
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
        DobIN	              IN      VARCHAR2,
        MobNoIN	            IN      LOMS_EMP_INFO.MOB_NO%TYPE,
        DojIN	              IN      VARCHAR2,
        PanNoIN	            IN      LOMS_EMP_INFO.PAN_NO%TYPE,
        LicenseNoIN	        IN      LOMS_EMP_INFO.LICENSE_NO%TYPE,
        EmpInfoCurOUT       OUT     LOMS_EMP_PKG.EMP_INFO_REF_CUR_TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE UpdateEmpInfo
    (
        EmpIDIN             IN      LOMS_EMP_INFO.EMP_ID%TYPE,
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
        GenderIN            IN      LOMS_EMP_INFO.GENDER%TYPE,
        AddressIN	          IN      LOMS_EMP_INFO.ADDRESS%TYPE,
        NationalityIN	      IN      LOMS_EMP_INFO.NATIONALITY%TYPE,
        DobIN	              IN      VARCHAR2,
        TelNoIN	            IN      LOMS_EMP_INFO.TEL_NO%TYPE,
        MobNoIN	            IN      LOMS_EMP_INFO.MOB_NO%TYPE,
        CommentsIN	        IN      LOMS_EMP_INFO.COMMENTS%TYPE,
        DojIN	              IN      VARCHAR2,
        PanNoIN	            IN      LOMS_EMP_INFO.PAN_NO%TYPE,
        LicenseNoIN	        IN      LOMS_EMP_INFO.LICENSE_NO%TYPE,
        UserTypeIN          IN      LOMS_EMP_INFO.USER_TYPE%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE DeactivateEmployee
    (
        EmpIDIN             IN      LOMS_EMP_INFO.EMP_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE SetUserEnvironment
    (
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
        UserNameIN          IN      VARCHAR2,
        PasswordIN          IN      VARCHAR2,
        UserTypeIN          IN      LOMS_EMP_INFO.USER_TYPE%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    FUNCTION CreateUserName
    (
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE
    )
    RETURN LOMS_EMP_INFO.USER_NAME%TYPE;

    FUNCTION GetUserType
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE
    )
    RETURN LOMS_EMP_INFO.USER_TYPE%TYPE;

    PROCEDURE ForgotPassword
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        Answer1IN           IN      VARCHAR2,
        SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        Answer2IN           IN      VARCHAR2,
        EmpPwdOUT           OUT     VARCHAR2,
        FromEmailIDOUT      OUT     VARCHAR2,
        FromEmailPwdOUT     OUT     VARCHAR2,
        ToEmailIdOUT        OUT     VARCHAR2,
        EmailSubjectOUT     OUT     VARCHAR2,
        EmailMsgOUT         OUT     VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE GetSecurityQuestions
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        SecQsn1OUT          OUT     LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        SecQsn2OUT          OUT     LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE GetEmailId
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        EmailIDOUT          OUT     LOMS_EMP_INFO.EMAIL_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE ChangePassword
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        EmpPwdOldIN         IN      VARCHAR2,
        EmpPwdNewIN         IN      VARCHAR2,
        SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        Answer1IN           IN      VARCHAR2,
        SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        Answer2IN           IN      VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE ComposeEmailToEmployee
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        EmailMsgTypeIN      IN      VARCHAR2,
        FromEmailIDOUT      OUT     LOMS_APP_MASTER.EMAIL_ID%TYPE,
        FromEmailPwdOUT     OUT     VARCHAR2,
        ToEmailIdOUT        OUT     LOMS_EMP_INFO.EMAIL_ID%TYPE,
        EmailSubjectOUT     OUT     VARCHAR2,
        EmailMsgOUT         OUT     VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE UpdateSecurityInfo
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        Answer1IN           IN      VARCHAR2,
        SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        Answer2IN           IN      VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE UpdateEmailID
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        EmailIDIN           IN      LOMS_EMP_INFO.EMAIL_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

END LOMS_EMP_PKG;

/

--  DDL for Package LOMS_FINANCE_PKG

CREATE OR REPLACE PACKAGE LOMS_FINANCE_PKG AS 

    TYPE INC_EXP_INFO_REC_TYPE IS RECORD
    (
        TransactionID	  NUMBER,
        ClientID	      VARCHAR2(10),
        CaseID	        VARCHAR2(15),
        PaidAmt	        NUMBER,
        PaidIST	        DATE,
        PaymntType	    VARCHAR2(50),
        Comments	      VARCHAR2(1000)
    );

    TYPE INC_EXP_INFO_REF_CUR_TYPE IS REF CURSOR
    RETURN INC_EXP_INFO_REC_TYPE;

    PROCEDURE AddIncExpDetails
    (
        ClientIDIN	        IN      LOMS_INC_EXP_INFO.CLIENT_ID%TYPE,
        CaseIDIN	          IN      LOMS_INC_EXP_INFO.CASE_ID%TYPE,
        PaidAmtIN	          IN      LOMS_INC_EXP_INFO.PAID_AMT%TYPE,
        PaidISTIN	          IN      VARCHAR2,
        PaymntTypeIN	      IN      LOMS_INC_EXP_INFO.PAYMNT_TYPE%TYPE,
        CommentsIN	        IN      LOMS_INC_EXP_INFO.COMMENTS%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE SearchIncExpDetails
    (
        TransactionIdIN     IN      LOMS_INC_EXP_INFO.TRANSACTION_ID%TYPE,
        ClientIdIN          IN      LOMS_INC_EXP_INFO.CLIENT_ID%TYPE,
        CaseIdIN            IN      LOMS_INC_EXP_INFO.CASE_ID%TYPE,
        PaymntTypeIN        IN      LOMS_INC_EXP_INFO.PAYMNT_TYPE%TYPE,
        FromDateIN          IN      VARCHAR2,
        ToDateIN            IN      VARCHAR2,
        IncExpInfoCurOUT    OUT     LOMS_FINANCE_PKG.INC_EXP_INFO_REF_CUR_TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

    PROCEDURE DeleteIncExpDetails
    (
        TransactionIdIN     IN      LOMS_INC_EXP_INFO.TRANSACTION_ID%TYPE,
        ClientIdIN          IN      LOMS_INC_EXP_INFO.CLIENT_ID%TYPE,
        CaseIdIN            IN      LOMS_INC_EXP_INFO.CASE_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    );

END LOMS_FINANCE_PKG;  
/

--  DDL for Package LOMS_OFFICE_PKG

CREATE OR REPLACE
PACKAGE LOMS_OFFICE_PKG AS

      --------------------------------------------------------------------------
      -- Client Info Procedures - START
      --------------------------------------------------------------------------
      PROCEDURE AddClientInfo
      (
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          TelNoIN               IN        LOMS_CLIENT_INFO.TEL_NO%TYPE,
          MobNoIN               IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          EmailIDIN             IN        LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          PermAddressIN         IN        LOMS_CLIENT_INFO.PERM_ADDRESS%TYPE,
          TempAddressIN         IN        LOMS_CLIENT_INFO.TEMP_ADDRESS%TYPE,
          OrgNameIN             IN        LOMS_CLIENT_INFO.ORG_NAME%TYPE,
          OrgAddressIN          IN        LOMS_CLIENT_INFO.ORG_ADDRESS%TYPE,
          OrgTelNoIN            IN        LOMS_CLIENT_INFO.ORG_TEL_NO%TYPE,
          OrgMobIN              IN        LOMS_CLIENT_INFO.ORG_MOBILE%TYPE,
          PanNoIN               IN        LOMS_CLIENT_INFO.PAN_NO%TYPE,
          TinNoIN               IN        LOMS_CLIENT_INFO.TIN_NO%TYPE,
          ProfessionIN          IN        LOMS_CLIENT_INFO.PROFESSION%TYPE,
          DobIN                 IN        VARCHAR2,
          GenderIN              IN        LOMS_CLIENT_INFO.GENDER%TYPE,
          CommentsIN            IN        LOMS_CLIENT_INFO.COMMENTS%TYPE,
          ClientIDOUT           OUT       LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE ModifyClientInfo
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          TelNoIN               IN        LOMS_CLIENT_INFO.TEL_NO%TYPE,
          MobNoIN               IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          EmailIDIN             IN        LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          PermAddressIN         IN        LOMS_CLIENT_INFO.PERM_ADDRESS%TYPE,
          TempAddressIN         IN        LOMS_CLIENT_INFO.TEMP_ADDRESS%TYPE,
          OrgNameIN             IN        LOMS_CLIENT_INFO.ORG_NAME%TYPE,
          OrgAddressIN          IN        LOMS_CLIENT_INFO.ORG_ADDRESS%TYPE,
          OrgTelNoIN            IN        LOMS_CLIENT_INFO.ORG_TEL_NO%TYPE,
          OrgMobIN              IN        LOMS_CLIENT_INFO.ORG_MOBILE%TYPE,
          PanNoIN               IN        LOMS_CLIENT_INFO.PAN_NO%TYPE,
          TinNoIN               IN        LOMS_CLIENT_INFO.TIN_NO%TYPE,
          ProfessionIN          IN        LOMS_CLIENT_INFO.PROFESSION%TYPE,
          DobIN                 IN        VARCHAR2,
          GenderIN              IN        LOMS_CLIENT_INFO.GENDER%TYPE,
          CommentsIN            IN        LOMS_CLIENT_INFO.COMMENTS%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      TYPE CLIENT_INFO_REC_TYPE IS RECORD
      (
          ClientID              VARCHAR2(10),
          FirstName             VARCHAR2(50),
          LastName              VARCHAR2(50),
          Gender                VARCHAR2(15),
          TelNo                 VARCHAR2(50),
          MobileNo              VARCHAR2(50),
          EmailId               VARCHAR2(100),
          PermAddress           VARCHAR2(500),
          TempAddress           VARCHAR2(500),
          OrgName               VARCHAR2(100),
          OrgAddress            VARCHAR2(500),
          OrgTelNo              VARCHAR2(50),
          OrgMobile             VARCHAR2(50),
          PanNo                 VARCHAR2(25),
          TinNo                 VARCHAR2(25),
          Profession            VARCHAR2(50),
          Dob                   VARCHAR2(50),
          Comments              VARCHAR2(1000)
      );

      TYPE CLIENT_INFO_REF_CUR_TYPE IS REF CURSOR
      RETURN CLIENT_INFO_REC_TYPE;

      PROCEDURE SearchClientInfo
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          MobileNoIN            IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          PanNoIN               IN        LOMS_CLIENT_INFO.PAN_NO%TYPE,
          TinNoIN               IN        LOMS_CLIENT_INFO.TIN_NO%TYPE,
          ClientInfoCurOUT      OUT       LOMS_OFFICE_PKG.CLIENT_INFO_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE DeleteClientInfo
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      --------------------------------------------------------------------------
      -- Client Info Procedures - END
      --------------------------------------------------------------------------

      --------------------------------------------------------------------------
      -- Case Information Procedures - START
      --------------------------------------------------------------------------
      PROCEDURE AddCaseInfo
      (
          ClientIdIN	          IN	      LOMS_CASE_INFO.CLIENT_ID%TYPE,
          CaseTypeIN	          IN	      LOMS_CASE_INFO.CASE_TYPE%TYPE,
          CaseSubType1IN	      IN	      LOMS_CASE_INFO.CASE_SUB_TYPE_1%TYPE,
          CaseSubType2IN	      IN	      LOMS_CASE_INFO.CASE_SUB_TYPE_2%TYPE,
          CaseNo1IN	            IN	      LOMS_CASE_INFO.CASE_NO_1%TYPE,
          CaseNo2IN	            IN	      LOMS_CASE_INFO.CASE_NO_2%TYPE,
          CaseNo3IN	            IN	      LOMS_CASE_INFO.CASE_NO_3%TYPE,
          CaseNo4IN	            IN	      LOMS_CASE_INFO.CASE_NO_4%TYPE,
          CaseNo5IN	            IN	      LOMS_CASE_INFO.CASE_NO_5%TYPE,
          CaseNo6IN	            IN	      LOMS_CASE_INFO.CASE_NO_6%TYPE,
          CourtDetailsIN	      IN	      LOMS_CASE_INFO.COURT_DETAILS%TYPE,
          CasePriorityIN	      IN	      LOMS_CASE_INFO.CASE_PRIORITY%TYPE,
          CaseStatusIN	        IN	      LOMS_CASE_INFO.CASE_STATUS%TYPE,
          JudgmntDtIN	          IN	      VARCHAR2,
          CaseCommentsIN	      IN	      LOMS_CASE_INFO.CASE_COMMENTS%TYPE,
          CaseIdOUT	            OUT	      LOMS_CASE_INFO.CASE_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE ModifyCaseInfo
      (
          CaseIdIN	            IN	      LOMS_CASE_INFO.CASE_ID%TYPE,
          ClientIdIN	          IN	      LOMS_CASE_INFO.CLIENT_ID%TYPE,
          CaseTypeIN	          IN	      LOMS_CASE_INFO.CASE_TYPE%TYPE,
          CaseSubType1IN	      IN	      LOMS_CASE_INFO.CASE_SUB_TYPE_1%TYPE,
          CaseSubType2IN	      IN	      LOMS_CASE_INFO.CASE_SUB_TYPE_2%TYPE,
          CaseNo1IN	            IN	      LOMS_CASE_INFO.CASE_NO_1%TYPE,
          CaseNo2IN	            IN	      LOMS_CASE_INFO.CASE_NO_2%TYPE,
          CaseNo3IN	            IN	      LOMS_CASE_INFO.CASE_NO_3%TYPE,
          CaseNo4IN	            IN	      LOMS_CASE_INFO.CASE_NO_4%TYPE,
          CaseNo5IN	            IN	      LOMS_CASE_INFO.CASE_NO_5%TYPE,
          CaseNo6IN	            IN	      LOMS_CASE_INFO.CASE_NO_6%TYPE,
          CourtDetailsIN	      IN	      LOMS_CASE_INFO.COURT_DETAILS%TYPE,
          CasePriorityIN	      IN	      LOMS_CASE_INFO.CASE_PRIORITY%TYPE,
          CaseStatusIN	        IN	      LOMS_CASE_INFO.CASE_STATUS%TYPE,
          JudgmntDtIN	          IN	      VARCHAR2,
          CaseCommentsIN	      IN	      LOMS_CASE_INFO.CASE_COMMENTS%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      TYPE CASE_INFO_REC_TYPE IS RECORD
      (
          CaseId	          VARCHAR2(15),
          ClientId	        VARCHAR2(10),
          ClientInfo        VARCHAR2(1000),
          CaseType          VARCHAR2(1000),
          PrimeCaseNo	      VARCHAR2(100),
          RefCaseNo	        VARCHAR2(1000),
          CourtDetails	    VARCHAR2(1000),
          CasePriority	    VARCHAR2(10),
          CaseStatus	      VARCHAR2(50),
          JudgmntDate	      DATE,
          CaseComments	    VARCHAR2(4000)
      );

      TYPE CASE_INFO_REF_CUR_TYPE IS REF CURSOR
      RETURN CASE_INFO_REC_TYPE;

      PROCEDURE SearchCaseInfo
      (
          CaseIdIN	            IN	      LOMS_CASE_INFO.CASE_ID%TYPE,
          ClientIdIN	          IN	      LOMS_CASE_INFO.CLIENT_ID%TYPE,
          CaseTypeIN	          IN	      LOMS_CASE_INFO.CASE_TYPE%TYPE,
          CaseNoIN              IN        LOMS_CASE_INFO.CASE_NO_1%TYPE,
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          MobileNoIN            IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          EmailIdIN             IN        LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          CourtIdIN             IN        LOMS_COURT_INFO.COURT_ID%TYPE,
          CaseInfoCurOUT        OUT       LOMS_OFFICE_PKG.CASE_INFO_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      TYPE CASE_INFO_UPD_REC_TYPE IS RECORD
      (
          CaseId	        VARCHAR2(15),
          ClientId	      VARCHAR2(10),
          CaseType	      VARCHAR2(25),
          CaseSubType1	  VARCHAR2(100),
          CaseSubType2	  VARCHAR2(100),
          CaseNo1	        VARCHAR2(100),
          CaseNo2	        VARCHAR2(100),
          CaseNo3	        VARCHAR2(100),
          CaseNo4	        VARCHAR2(100),
          CaseNo5	        VARCHAR2(100),
          CaseNo6	        VARCHAR2(100),
          CourtDetails	  VARCHAR2(100),
          CasePriority	  VARCHAR2(10),
          CaseStatus	    VARCHAR2(50),
          JudgmntDt	      DATE,
          CaseComments	  VARCHAR2(4000)
      );

      TYPE CASE_INFO_UPD_REF_CUR_TYPE IS REF CURSOR
      RETURN CASE_INFO_UPD_REC_TYPE;

      TYPE OPP_INFO_UPD_REC_TYPE IS RECORD
      (
          OpponentNo              NUMBER,
          CaseNo	                VARCHAR2(20),
          ClientId	              VARCHAR2(10),
          OppPartyName	          VARCHAR2(100),
          OppPartyAddress 	      VARCHAR2(400),
          OppPartyTelNo	          VARCHAR2(20),
          OppPartyMobNo	          VARCHAR2(20),
          OppPartEmailId	        VARCHAR2(100),
          OppPartyOrgName	        VARCHAR2(100),
          OppPartyOrgRepName	    VARCHAR2(100),
          OppPartyOrgAddress	    VARCHAR2(400),
          OppPartyOrgTelNo	      VARCHAR2(20),
          OppPartyOrgMobNo	      VARCHAR2(20),
          OppPartyOrgEmailId	    VARCHAR2(100),
          OppPartyLawyerName	    VARCHAR2(100),
          OppPartyLawyerAddress	  VARCHAR2(400),
          OppPartyLawyerTelNo	    VARCHAR2(20),
          OppPartyLawyerMobNo	    VARCHAR2(20),
          OppPartyLawyerEmailId	  VARCHAR2(100)
      );

      TYPE OPP_INFO_UPD_REF_CUR_TYPE IS REF CURSOR
      RETURN OPP_INFO_UPD_REC_TYPE;

      PROCEDURE SearchCaseInfoForUpdate
      (
          CaseIdIN	            IN	      LOMS_CASE_INFO.CASE_ID%TYPE,
          CaseInfoCurOUT        OUT       LOMS_OFFICE_PKG.CASE_INFO_UPD_REF_CUR_TYPE,
          OppInfoCurOUT         OUT       LOMS_OFFICE_PKG.OPP_INFO_UPD_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE DeleteCaseAndOpponentInfo
      (
          CaseIdIN	            IN	      LOMS_CASE_INFO.CASE_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE AddOpponentInfo
      (
          CaseIdIN	                  IN	      LOMS_OPPONENT_INFO.CASE_ID%TYPE,
          ClientIdIN	                IN	      LOMS_OPPONENT_INFO.CLIENT_ID%TYPE,
          OppPartyNameIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_NAME%TYPE,
          OppPartyAddressIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ADDRESS%TYPE,
          OppPartyTelNoIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_TEL_NO%TYPE,
          OppPartyMobNoIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_MOB_NO%TYPE,
          OppPartyEmailIdIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_EMAIL_ID%TYPE,
          OppPartyOrgNameIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_NAME%TYPE,
          OppPartyOrgRepNameIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_REP%TYPE,
          OppPartyOrgAddressIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_ADDRESS%TYPE,
          OppPartyOrgTelNoIN	        IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_TEL_NO%TYPE,
          OppPartyOrgMobNoIN	        IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_MOB_NO%TYPE,
          OppPartyOrgEmailIdIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_EMAIL_ID%TYPE,
          OppPartyLawyerNameIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_NAME%TYPE,
          OppPartyLawyerAddressIN	    IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_ADDRESS%TYPE,
          OppPartyLawyerTelNoIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_TEL_NO%TYPE,
          OppPartyLawyerMobNoIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_MOB_NO%TYPE,
          OppPartyLawyerEmailIdIN	    IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_EMAIL_ID%TYPE,
          ErrorCdOUT                  OUT       VARCHAR2,
          ErrorMsgOUT                 OUT       VARCHAR2
      );

      PROCEDURE ModifyOpponentInfo
      (
          OpponentNoIN                IN        LOMS_OPPONENT_INFO.OPPONENT_NO%TYPE,
          CaseIdIN	                  IN	      LOMS_OPPONENT_INFO.CASE_ID%TYPE,
          ClientIdIN	                IN	      LOMS_OPPONENT_INFO.CLIENT_ID%TYPE,
          OppPartyNameIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_NAME%TYPE,
          OppPartyAddressIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ADDRESS%TYPE,
          OppPartyTelNoIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_TEL_NO%TYPE,
          OppPartyMobNoIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_MOB_NO%TYPE,
          OppPartyEmailIdIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_EMAIL_ID%TYPE,
          OppPartyOrgNameIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_NAME%TYPE,
          OppPartyOrgRepNameIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_REP%TYPE,
          OppPartyOrgAddressIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_ADDRESS%TYPE,
          OppPartyOrgTelNoIN	        IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_TEL_NO%TYPE,
          OppPartyOrgMobNoIN	        IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_MOB_NO%TYPE,
          OppPartyOrgEmailIdIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_EMAIL_ID%TYPE,
          OppPartyLawyerNameIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_NAME%TYPE,
          OppPartyLawyerAddressIN	    IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_ADDRESS%TYPE,
          OppPartyLawyerTelNoIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_TEL_NO%TYPE,
          OppPartyLawyerMobNoIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_MOB_NO%TYPE,
          OppPartyLawyerEmailIdIN	    IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_EMAIL_ID%TYPE,
          ErrorCdOUT                  OUT       VARCHAR2,
          ErrorMsgOUT                 OUT       VARCHAR2
      );

      PROCEDURE DeleteOpponentInfo
      (
          OpponentNoIN          IN        LOMS_OPPONENT_INFO.OPPONENT_NO%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE SearchOpponentInfoForUpdate
      (
          OpponentNoIN          IN        LOMS_OPPONENT_INFO.OPPONENT_NO%TYPE,
          OppInfoCurOUT         OUT       LOMS_OFFICE_PKG.OPP_INFO_UPD_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );
      --------------------------------------------------------------------------
      -- Case Information Procedures - END
      --------------------------------------------------------------------------

      --------------------------------------------------------------------------
      -- Case Hearing Information Procedures - START
      --------------------------------------------------------------------------

      PROCEDURE AddCaseHearingInfo
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          CaseIDIN              IN        LOMS_CASE_HEARING_INFO.CASE_ID%TYPE,
          HearingDateIN         IN        VARCHAR2,
          HearingCommentsIN     IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_COMMENTS%TYPE,
          CaseHearingIDOUT      OUT       LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      TYPE CASE_HEARING_REC_TYPE IS RECORD
      (
            CaseHearingID	        NUMBER,
            CaseID	              VARCHAR2(15),
            ClientID	            VARCHAR2(10),
            CaseHearingDate	      DATE,
            CaseHearingComments	  VARCHAR2(1000)
      );

      TYPE CASE_HEARING_REF_CUR_TYPE IS REF CURSOR
      RETURN CASE_HEARING_REC_TYPE;

      PROCEDURE SearchCaseHearingInfo
      (
          CaseHearingIdIN       IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          CaseHearingCurOUT     OUT       LOMS_OFFICE_PKG.CASE_HEARING_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE SearchCaseHearingInfoGeneric
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          MobileNoIN            IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          EmailIdIN             IN        LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          CaseIDIN              IN        LOMS_CASE_HEARING_INFO.CASE_ID%TYPE,
          CaseHearingCurOUT     OUT       LOMS_OFFICE_PKG.CASE_HEARING_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE DeleteCaseHearingInfo
      (
          CaseHearingIDIN       IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE ModifyCaseHearingInfo
      (
          CaseHearingIDIN       IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          ClientIDIN            IN        LOMS_CASE_HEARING_INFO.CLIENT_ID%TYPE,
          CaseIDIN              IN        LOMS_CASE_HEARING_INFO.CASE_ID%TYPE,
          HearingDateIN         IN        VARCHAR2,
          HearingCommentsIN     IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_COMMENTS%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      --------------------------------------------------------------------------
      -- Case Hearing Information Procedures - END
      --------------------------------------------------------------------------

      --------------------------------------------------------------------------
      -- Client Family Information Procedures - START
      --------------------------------------------------------------------------

      PROCEDURE AddClientFamilyInfo
      (
          ClientIDIN	            IN        LOMS_CLIENT_FAMILY_INFO.CLIENT_ID%TYPE,
          RelnNameIN	            IN        LOMS_CLIENT_FAMILY_INFO.RELN_NAME%TYPE,
          RelnTypeIN	            IN        LOMS_CLIENT_FAMILY_INFO.RELN_TYPE%TYPE,
          RelnDobIN	              IN        VARCHAR2,
          RelnMobNoIN	            IN        LOMS_CLIENT_FAMILY_INFO.RELN_MOB_NO%TYPE,
          RelnTelNoIN	            IN        LOMS_CLIENT_FAMILY_INFO.RELN_TEL_NO%TYPE,
          RelnAddressIN	          IN        LOMS_CLIENT_FAMILY_INFO.RELN_ADDRESS%TYPE,
          RelnGenderIN	          IN        LOMS_CLIENT_FAMILY_INFO.RELN_GENDER%TYPE,
          RelnMaritalStatusIN	    IN        LOMS_CLIENT_FAMILY_INFO.RELN_MARITAL_STATUS%TYPE,
          RelnDomIN	              IN        VARCHAR2,
          CommentsIN	            IN        LOMS_CLIENT_FAMILY_INFO.COMMENTS%TYPE,
          ErrorCdOUT              OUT       VARCHAR2,
          ErrorMsgOUT             OUT       VARCHAR2
      );

      TYPE CLIENT_FAM_INFO_REC_TYPE IS RECORD
      (
            ClientID	          VARCHAR2(10),
            RelnName	          VARCHAR2(50),
            RelnType	          VARCHAR2(25),
            RelnDob	            DATE,
            RelnMobNo	          NUMBER,
            RelnTelNo	          NUMBER,
            RelnAddress	        VARCHAR2(500),
            RelnGender	        VARCHAR2(15),
            RelnMaritalStatus	  VARCHAR2(15),
            RelnDom	            DATE,
            Comments	          VARCHAR2(1000)
      );

      TYPE CLIENT_FAM_INFO_REF_CUR_TYPE IS REF CURSOR
      RETURN CLIENT_FAM_INFO_REC_TYPE;

      PROCEDURE SearchClientFamilyInfo
      (
          ClientIDIN                IN        LOMS_CLIENT_FAMILY_INFO.CLIENT_ID%TYPE,
          ClientFamilyInfoCurOUT    OUT       LOMS_OFFICE_PKG.CLIENT_FAM_INFO_REF_CUR_TYPE,
          ErrorCdOUT                OUT       VARCHAR2,
          ErrorMsgOUT               OUT       VARCHAR2
      );

      PROCEDURE DeleteClientFamilyInfo
      (
          ClientIDIN        IN        LOMS_CLIENT_FAMILY_INFO.CLIENT_ID%TYPE,
          RelnNameIN        IN        LOMS_CLIENT_FAMILY_INFO.RELN_NAME%TYPE,
          RelnTypeIN        IN        LOMS_CLIENT_FAMILY_INFO.RELN_TYPE%TYPE,
          ErrorCdOUT        OUT       VARCHAR2,
          ErrorMsgOUT       OUT       VARCHAR2
      );

      --------------------------------------------------------------------------
      -- Client Family Information Procedures - END
      --------------------------------------------------------------------------

      --------------------------------------------------------------------------
      -- Case document UPLOAD / DOWNLOAD Procedures - START
      --------------------------------------------------------------------------

      PROCEDURE UploadCaseDocument
      (
          CaseIDIN            IN        LOMS_CASE_DOC_INFO.CASE_ID%TYPE,
          ClientIDIN          IN        LOMS_CASE_DOC_INFO.CLIENT_ID%TYPE,
          DocFolderIN         IN        VARCHAR2,
          DocNameIN           IN        LOMS_CASE_DOC_INFO.DOC_NAME%TYPE,
          CommentsIN          IN        LOMS_CASE_DOC_INFO.COMMENTS%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      PROCEDURE DownloadCaseDocument
      (
          DocIDIN             IN        LOMS_CASE_DOC_INFO.DOC_ID%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      TYPE CASE_DOC_INFO_REC_TYPE IS RECORD
      (
          DocID	      NUMBER,
          CaseID	    VARCHAR2(15),
          ClientID	  VARCHAR2(10),
          DocName	    VARCHAR2(50),
          Comments	  VARCHAR2(1000)
      );

      TYPE CASE_DOC_INFO_REF_CUR_TYPE IS REF CURSOR
      RETURN CASE_DOC_INFO_REC_TYPE;

      PROCEDURE SearchCaseDocument
      (
          DocIDIN                 IN        LOMS_CASE_DOC_INFO.DOC_ID%TYPE,
          CaseIDIN                IN        LOMS_CASE_DOC_INFO.CASE_ID%TYPE,
          ClientIDIN              IN        LOMS_CASE_DOC_INFO.CLIENT_ID%TYPE,
          DocNameIN               IN        LOMS_CASE_DOC_INFO.DOC_NAME%TYPE,
          FromDateIN              IN        VARCHAR2,
          ToDateIN                IN        VARCHAR2,
          CaseDocInfoCurOUT       OUT       LOMS_OFFICE_PKG.CASE_DOC_INFO_REF_CUR_TYPE,
          ErrorCdOUT              OUT       VARCHAR2,
          ErrorMsgOUT             OUT       VARCHAR2
      );

      PROCEDURE DeleteCaseDocument
      (
          DocIDIN             IN        LOMS_CASE_DOC_INFO.DOC_ID%TYPE,
          CaseIDIN            IN        LOMS_CASE_DOC_INFO.CASE_ID%TYPE,
          ClientIDIN          IN        LOMS_CASE_DOC_INFO.CLIENT_ID%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      --------------------------------------------------------------------------
      -- Case document UPLOAD / DOWNLOAD Procedures - END
      --------------------------------------------------------------------------

      --------------------------------------------------------------------------
      -- Appointment / Event Reminder Procedures - START
      --------------------------------------------------------------------------

      PROCEDURE AddEventReminder
      (
          ReminderTypeIN        IN        LOMS_REMINDER_ALERT.REMINDER_TYPE%TYPE,
          ReminderSubjectIN     IN        LOMS_REMINDER_ALERT.REMINDER_SUBJECT%TYPE,
          ReminderLocnIN        IN        LOMS_REMINDER_ALERT.REMINDER_LOCN%TYPE,
          ReminderDateIN        IN        LOMS_REMINDER_ALERT.REMINDER_LOCN%TYPE,
          ReminderTimeIN        IN        LOMS_REMINDER_ALERT.REMINDER_TIME%TYPE,
          ReminderMsgIN         IN        LOMS_REMINDER_ALERT.REMINDER_MSG%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      TYPE REMINDER_ALERT_REC_TYPE IS RECORD
      (
          ReminderID	        NUMBER,
          ReminderType	      VARCHAR2(50),
          ReminderSubject	    VARCHAR2(50),
          ReminderLocn	      VARCHAR2(100),
          ReminderDate	      DATE,
          ReminderTime	      VARCHAR2(100),
          ReminderMsg	        VARCHAR2(500)
      );

      TYPE REMINDER_ALERT_REF_CUR_TYPE IS REF CURSOR
      RETURN REMINDER_ALERT_REC_TYPE;

      PROCEDURE SearchEventReminderForDB -- For DashBoard
      (
          UserNameIN            IN        VARCHAR2,
          RemAlertCurOUT        OUT       LOMS_OFFICE_PKG.REMINDER_ALERT_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE SearchEventReminderByUserName -- By User Name
      (
          UserNameIN            IN        VARCHAR2,
          RemAlertCurOUT        OUT       LOMS_OFFICE_PKG.REMINDER_ALERT_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE SearchEventReminderByRemID -- By Reminder ID
      (
          ReminderIDIN          IN        LOMS_REMINDER_ALERT.REMINDER_ID%TYPE,
          RemAlertCurOUT        OUT       LOMS_OFFICE_PKG.REMINDER_ALERT_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      PROCEDURE DeleteEventReminder; -- Auto Archive

      PROCEDURE DeleteEventReminder -- By Reminder ID
      (
          ReminderIdIN          IN        LOMS_REMINDER_ALERT.REMINDER_ID%TYPE
      );

      --------------------------------------------------------------------------
      -- Appointment / Event Reminder Procedures - END
      --------------------------------------------------------------------------

      --------------------------------------------------------------------------
      -- Compose Email - START
      --------------------------------------------------------------------------

      PROCEDURE ComposeAddClientEmail
      (
          ClientIDIN          IN      LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          FromEmailIDOUT      OUT     LOMS_APP_MASTER.EMAIL_ID%TYPE,
          FromEmailPwdOUT     OUT     VARCHAR2,
          ToEmailIdOUT        OUT     LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          EmailSubjectOUT     OUT     VARCHAR2,
          EmailMsgOUT         OUT     VARCHAR2,
          ToMobileNoOUT       OUT     LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          SMSMsgOUT           OUT     VARCHAR2,
          ErrorCdOUT          OUT     VARCHAR2,
          ErrorMsgOUT         OUT     VARCHAR2
      );

      PROCEDURE ComposeAddCaseEmail
      (
          CaseIDIN              IN      LOMS_CASE_INFO.CASE_ID%TYPE,
          FromEmailIDOUT        OUT     LOMS_APP_MASTER.EMAIL_ID%TYPE,
          FromEmailPwdOUT       OUT     VARCHAR2,
          ToEmailIdOUT          OUT     LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          EmailSubjectOUT       OUT     VARCHAR2,
          EmailMsgOUT           OUT     VARCHAR2,
          ToMobileNoOUT         OUT     LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          SMSMsgOUT             OUT     VARCHAR2,
          ErrorCdOUT            OUT     VARCHAR2,
          ErrorMsgOUT           OUT     VARCHAR2
      );

      PROCEDURE ComposeAddCaseHearingEmail
      (
          CaseHearingIdIN       IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          FromEmailIDOUT        OUT       LOMS_APP_MASTER.EMAIL_ID%TYPE,
          FromEmailPwdOUT       OUT       VARCHAR2,
          ToEmailIdOUT          OUT       LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          EmailSubjectOUT       OUT       VARCHAR2,
          EmailMsgOUT           OUT       VARCHAR2,
          ToMobileNoOUT         OUT       LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          SMSMsgOUT             OUT       VARCHAR2,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      );

      --------------------------------------------------------------------------
      -- Compose Email - END
      --------------------------------------------------------------------------

      TYPE CASE_INFO_VW_REC_TYPE IS RECORD
      (
          CaseId	          VARCHAR2(15),
          ClientId	        VARCHAR2(10),
          ClientInfo        VARCHAR2(1000),
          CaseType          VARCHAR2(1000),
          PrimeCaseNo	      VARCHAR2(100),
          RefCaseNo	        VARCHAR2(1000),
          CourtDetails	    VARCHAR2(1000),
          CasePriority	    VARCHAR2(10),
          CaseStatus	      VARCHAR2(50),
          HearingDt	        DATE,
          CaseComments	    VARCHAR2(4000)
      );

      TYPE CASE_INFO_VW_REF_CUR_TYPE IS REF CURSOR
      RETURN CASE_INFO_VW_REC_TYPE;

      PROCEDURE ViewCaseHearing
      (
          ViewTypeIN          IN        VARCHAR2,
          StartDateIN         IN        VARCHAR2,
          EndDateIN           IN        VARCHAR2,
          CaseHearingCurIN    OUT       LOMS_OFFICE_PKG.CASE_INFO_VW_REF_CUR_TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      --------------------------------------------------------------------------
      -- Book Shelf Logic - START
      --------------------------------------------------------------------------

      PROCEDURE AddBookInfo
      (
          BookNoIN            IN        LOMS_BOOK_SHELF.BOOK_NO%TYPE,
          BookTitleIN         IN        LOMS_BOOK_SHELF.BOOK_TITLE%TYPE,
          BookAuthorIN        IN        LOMS_BOOK_SHELF.BOOK_AUTHOR%TYPE,
          BookCoAuthorIN      IN        LOMS_BOOK_SHELF.BOOK_CO_AUTHOR%TYPE,
          BookSubjectIN       IN        LOMS_BOOK_SHELF.BOOK_SUBJECT%TYPE,
          BookTypeIN          IN        LOMS_BOOK_SHELF.BOOK_TYPE%TYPE,
          BookYearIN          IN        LOMS_BOOK_SHELF.BOOK_YEAR%TYPE,
          BookPublisherIN     IN        LOMS_BOOK_SHELF.BOOK_PUBLISHER%TYPE,
          BookRackNoIN        IN        LOMS_BOOK_SHELF.BOOK_RACK_NO%TYPE,
          BookRowNoIN         IN        LOMS_BOOK_SHELF.BOOK_ROW_NO%TYPE,
          BookStatusIN        IN        LOMS_BOOK_SHELF.BOOK_STATUS%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      TYPE BOOK_INFO_REC_TYPE IS RECORD
      (
          BookId              NUMBER,
          BookNo              VARCHAR2(50),
          BookTitle           VARCHAR2(1000),
          BookAuthor          VARCHAR2(200),
          BookCoAuthor        VARCHAR2(200),
          BookSubject         VARCHAR2(500),
          BookType            VARCHAR2(500),
          BookYear            VARCHAR2(50),
          BookPublisher       VARCHAR2(500),
          BookRackNo          VARCHAR2(100),
          BookRowNo           VARCHAR2(100),
          BookStatus          VARCHAR2(100)
      );

      TYPE BOOK_INFO_REF_CUR_TYPE IS REF CURSOR
      RETURN BOOK_INFO_REC_TYPE;

      PROCEDURE SearchBookInfo
      (
          BookIdIN            IN        LOMS_BOOK_SHELF.BOOK_ID%TYPE,
          BookNoIN            IN        LOMS_BOOK_SHELF.BOOK_NO%TYPE,
          BookTitleIN         IN        LOMS_BOOK_SHELF.BOOK_TITLE%TYPE,
          BookAuthorIN        IN        LOMS_BOOK_SHELF.BOOK_AUTHOR%TYPE,
          BookCoAuthorIN      IN        LOMS_BOOK_SHELF.BOOK_CO_AUTHOR%TYPE,
          BookSubjectIN       IN        LOMS_BOOK_SHELF.BOOK_SUBJECT%TYPE,
          BookTypeIN          IN        LOMS_BOOK_SHELF.BOOK_TYPE%TYPE,
          BookYearIN          IN        LOMS_BOOK_SHELF.BOOK_YEAR%TYPE,
          BookPublisherIN     IN        LOMS_BOOK_SHELF.BOOK_PUBLISHER%TYPE,
          BookRackNoIN        IN        LOMS_BOOK_SHELF.BOOK_RACK_NO%TYPE,
          BookRowNoIN         IN        LOMS_BOOK_SHELF.BOOK_ROW_NO%TYPE,
          BookStatusIN        IN        LOMS_BOOK_SHELF.BOOK_STATUS%TYPE,
          BookInfoCurOUT      OUT       LOMS_OFFICE_PKG.BOOK_INFO_REF_CUR_TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      PROCEDURE UpdateBookInfo
      (
          BookIdIN            IN        LOMS_BOOK_SHELF.BOOK_ID%TYPE,
          BookNoIN            IN        LOMS_BOOK_SHELF.BOOK_NO%TYPE,
          BookTitleIN         IN        LOMS_BOOK_SHELF.BOOK_TITLE%TYPE,
          BookAuthorIN        IN        LOMS_BOOK_SHELF.BOOK_AUTHOR%TYPE,
          BookCoAuthorIN      IN        LOMS_BOOK_SHELF.BOOK_CO_AUTHOR%TYPE,
          BookSubjectIN       IN        LOMS_BOOK_SHELF.BOOK_SUBJECT%TYPE,
          BookTypeIN          IN        LOMS_BOOK_SHELF.BOOK_TYPE%TYPE,
          BookYearIN          IN        LOMS_BOOK_SHELF.BOOK_YEAR%TYPE,
          BookPublisherIN     IN        LOMS_BOOK_SHELF.BOOK_PUBLISHER%TYPE,
          BookRackNoIN        IN        LOMS_BOOK_SHELF.BOOK_RACK_NO%TYPE,
          BookRowNoIN         IN        LOMS_BOOK_SHELF.BOOK_ROW_NO%TYPE,
          BookStatusIN        IN        LOMS_BOOK_SHELF.BOOK_STATUS%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      PROCEDURE DeleteBookInfo
      (
          BookIdIN            IN        LOMS_BOOK_SHELF.BOOK_ID%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      --------------------------------------------------------------------------
      -- Book Shelf Logic - END
      --------------------------------------------------------------------------

      --------------------------------------------------------------------------
      -- Case Judgment Info - START
      --------------------------------------------------------------------------

      PROCEDURE AddJdgmntInfo
      (
          JdgmntMonthIN           IN        LOMS_JDGMNT_INFO.JDGMNT_MONTH%TYPE,
          JdgmntYearIN            IN        LOMS_JDGMNT_INFO.JDGMNT_YEAR%TYPE,
          JdgmntDateIN            IN        VARCHAR2,
          JdgmntCourtIN           IN        LOMS_JDGMNT_INFO.JDGMNT_COURT%TYPE,
          JdgmntTitleIN           IN        LOMS_JDGMNT_INFO.JDGMNT_TITLE%TYPE,
          JdgmntBenchIN           IN        LOMS_JDGMNT_INFO.JDGMNT_BENCH%TYPE,
          JdgmntCitationIN        IN        LOMS_JDGMNT_INFO.JDGMNT_CITATION%TYPE,
          JdgmntCitatorInfoIN     IN        LOMS_JDGMNT_INFO.JDGMNT_CIT_INFO%TYPE,
          JdgmntActIN             IN        LOMS_JDGMNT_INFO.JDGMNT_ACT%TYPE,
          JdgmntDocNameIN         IN        LOMS_JDGMNT_INFO.JDGMNT_DOC_NAME%TYPE,
          JdgmntDocPathIN         IN        VARCHAR2,
          ErrorCdOUT              OUT       VARCHAR2,
          ErrorMsgOUT             OUT       VARCHAR2
      );

      TYPE JDGMNT_INFO_REC_TYPE IS RECORD
      (
          JdgmntID	          NUMBER,
          JdgmntMonth	        VARCHAR2(50),
          JdgmntYear	        VARCHAR2(10),
          JdgmntDate	        DATE,
          JdgmntCourt	        VARCHAR2(100),
          JdgmntTitle	        VARCHAR2(4000),
          JdgmntBench	        VARCHAR2(4000),
          JdgmntCitation	    VARCHAR2(4000),
          JdgmntCitatorInfo	  VARCHAR2(4000),
          JdgmntAct	          VARCHAR2(4000)
      );

      TYPE JDGMNT_INFO_REF_CUR_TYPE IS REF CURSOR
      RETURN JDGMNT_INFO_REC_TYPE;

      PROCEDURE SearchJdgmntInfo
      (
          JdgmntMonthIN           IN        LOMS_JDGMNT_INFO.JDGMNT_MONTH%TYPE,
          JdgmntYearIN            IN        LOMS_JDGMNT_INFO.JDGMNT_YEAR%TYPE,
          JdgmntCourtIN           IN        LOMS_JDGMNT_INFO.JDGMNT_COURT%TYPE,
          JdgmntTitleIN           IN        LOMS_JDGMNT_INFO.JDGMNT_TITLE%TYPE,
          JdgmntBenchIN           IN        LOMS_JDGMNT_INFO.JDGMNT_BENCH%TYPE,
          JdgmntCitationIN        IN        LOMS_JDGMNT_INFO.JDGMNT_CITATION%TYPE,
          JdgmntCitatorInfoIN     IN        LOMS_JDGMNT_INFO.JDGMNT_CIT_INFO%TYPE,
          JdgmntActIN             IN        LOMS_JDGMNT_INFO.JDGMNT_ACT%TYPE,
          FromDateIN              IN        VARCHAR2,
          ToDateIN                IN        VARCHAR2,
          JdgmntInfoCurOUT        OUT       LOMS_OFFICE_PKG.JDGMNT_INFO_REF_CUR_TYPE,
          ErrorCdOUT              OUT       VARCHAR2,
          ErrorMsgOUT             OUT       VARCHAR2
      );

      PROCEDURE DownloadJdgmntInfo
      (
          JdgmntIDIN          IN        LOMS_JDGMNT_INFO.JDGMNT_ID%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      );

      --------------------------------------------------------------------------
      -- Case Judgment Info - END
      --------------------------------------------------------------------------

      FUNCTION CheckIfEmailEnabled
      RETURN VARCHAR2;

      FUNCTION CheckIfSMSEnabled
      RETURN VARCHAR2;

END LOMS_OFFICE_PKG;

/

--  DDL for Package LOMS_STD_INFO_PKG

CREATE OR REPLACE PACKAGE LOMS_STD_INFO_PKG AS

    TYPE COURT_INFO_REC_TYPE IS RECORD
    (
        CourtID	          VARCHAR2(20),
        CourtName	        VARCHAR2(100),
        CourtType	        VARCHAR2(100),
        CourtAddress	    VARCHAR2(500),
        CourtCity	        VARCHAR2(50),
        CourtDistrict	    VARCHAR2(50),
        CourtState	      VARCHAR2(50),
        CourtCountry	    VARCHAR2(50),
        Comments	        VARCHAR2(1000)
    );

    TYPE COURT_INFO_REF_CUR_TYPE IS REF CURSOR
    RETURN COURT_INFO_REC_TYPE;

    TYPE CIVIL_SUITE_REC_TYPE IS RECORD
    (
        SuiteID           NUMBER,
        SuiteType         VARCHAR2(100)
    );

    TYPE CIVIL_SUITE_REF_CUR_TYPE IS REF CURSOR
    RETURN CIVIL_SUITE_REC_TYPE;

    TYPE CIVIL_APPEAL_REC_TYPE IS RECORD
    (
        AppealID           NUMBER,
        AppealType         VARCHAR2(100)
    );

    TYPE CIVIL_APPEAL_REF_CUR_TYPE IS REF CURSOR
    RETURN CIVIL_APPEAL_REC_TYPE;

    TYPE CIVIL_PETITION_REC_TYPE IS RECORD
    (
        PetitionID         NUMBER,
        PetitionType       VARCHAR2(100)
    );

    TYPE CIVIL_PET_REF_CUR_TYPE IS REF CURSOR
    RETURN CIVIL_PETITION_REC_TYPE;

    TYPE CIVIL_EXECUTION_REC_TYPE IS RECORD
    (
        ExecutionID        NUMBER,
        ExecutionType      VARCHAR2(100)
    );

    TYPE CIVIL_EXEC_REF_CUR_TYPE IS REF CURSOR
    RETURN CIVIL_EXECUTION_REC_TYPE;

    TYPE CRIMINAL_CASE_REC_TYPE IS RECORD
    (
        CriminalCaseID        NUMBER,
        CriminalCaseType      VARCHAR2(100)
    );

    TYPE CRIMINAL_CASE_REF_CUR_TYPE IS REF CURSOR
    RETURN CRIMINAL_CASE_REC_TYPE;

    TYPE STATE_INFO_REC_TYPE IS RECORD
    (
        StateName       VARCHAR2(100)
    );

    TYPE STATE_INFO_REF_CUR_TYPE IS REF CURSOR
    RETURN STATE_INFO_REC_TYPE;

    TYPE DIST_INFO_REC_TYPE IS RECORD
    (
        DistrictName       VARCHAR2(100)
    );

    TYPE DIST_INFO_REF_CUR_TYPE IS REF CURSOR
    RETURN DIST_INFO_REC_TYPE;

    PROCEDURE AddCourtInfo
    (
        CourtNameIN	        IN      LOMS_COURT_INFO.COURT_NAME%TYPE,
        CourtTypeIN	        IN      LOMS_COURT_INFO.COURT_TYPE%TYPE,
        CourtAddressIN      IN      LOMS_COURT_INFO.COURT_ADDRESS%TYPE,
        CourtCityIN         IN	    LOMS_COURT_INFO.COURT_CITY%TYPE,
        CourtDistrictIN     IN      LOMS_COURT_INFO.COURT_DISTRICT%TYPE,
        CourtStateIN  	    IN      LOMS_COURT_INFO.COURT_STATE%TYPE,
        CourtCountryIN      IN      LOMS_COURT_INFO.COURT_COUNTRY%TYPE,
        CommentsIN          IN      LOMS_COURT_INFO.COMMENTS%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE ModifyCourtInfo
    (
        CourtIDIN           IN	    LOMS_COURT_INFO.COURT_ID%TYPE,
        CourtNameIN	        IN      LOMS_COURT_INFO.COURT_NAME%TYPE,
        CourtTypeIN	        IN      LOMS_COURT_INFO.COURT_TYPE%TYPE,
        CourtAddressIN      IN      LOMS_COURT_INFO.COURT_ADDRESS%TYPE,
        CourtCityIN         IN	    LOMS_COURT_INFO.COURT_CITY%TYPE,
        CourtDistrictIN     IN      LOMS_COURT_INFO.COURT_DISTRICT%TYPE,
        CourtStateIN  	    IN      LOMS_COURT_INFO.COURT_STATE%TYPE,
        CourtCountryIN      IN      LOMS_COURT_INFO.COURT_COUNTRY%TYPE,
        CommentsIN          IN      LOMS_COURT_INFO.COMMENTS%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE SearchCourtInfo
    (
        CourtIDIN           IN      LOMS_COURT_INFO.COURT_ID%TYPE,
        CourtNameIN         IN      LOMS_COURT_INFO.COURT_NAME%TYPE,
        CourtTypeIN         IN      LOMS_COURT_INFO.COURT_TYPE%TYPE,
        CourtCityIN         IN      LOMS_COURT_INFO.COURT_CITY%TYPE,
        CourtDistIN         IN      LOMS_COURT_INFO.COURT_DISTRICT%TYPE,
        CourtStateIN        IN      LOMS_COURT_INFO.COURT_STATE%TYPE,
        CourtCountryIN      IN      LOMS_COURT_INFO.COURT_COUNTRY%TYPE,
        CourtInfoCurOUT     OUT     LOMS_STD_INFO_PKG.COURT_INFO_REF_CUR_TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE DeleteCourtInfo
    (
        CourtIDIN           IN      LOMS_COURT_INFO.COURT_ID%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE AddCivilSuiteType
    (
        SuiteTypeIN         IN      LOMS_CIVIL_SUIT_TYPE.SUITE_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE ModifyCivilSuiteType
    (
        SuiteIDIN           IN      LOMS_CIVIL_SUIT_TYPE.SUITE_ID%TYPE,
        SuiteTypeIN         IN      LOMS_CIVIL_SUIT_TYPE.SUITE_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE DeleteSuiteType
    (
        SuiteIDIN           IN      LOMS_CIVIL_SUIT_TYPE.SUITE_ID%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE GetCivilSuiteType
    (
        CivilSuiteCurOUT    OUT     LOMS_STD_INFO_PKG.CIVIL_SUITE_REF_CUR_TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE AddCivilAppealType
    (
        AppealTypeIN        IN      LOMS_CIVIL_APPEAL_TYPE.APPEAL_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE ModifyCivilAppealType
    (
        AppealIDIN          IN      LOMS_CIVIL_APPEAL_TYPE.APPEAL_ID%TYPE,
        AppealTypeIN        IN      LOMS_CIVIL_APPEAL_TYPE.APPEAL_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE DeleteCivilAppealType
    (
        AppealIDIN          IN      LOMS_CIVIL_APPEAL_TYPE.APPEAL_ID%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE GetCivilAppealType
    (
        CivilAppealCurOUT   OUT     LOMS_STD_INFO_PKG.CIVIL_APPEAL_REF_CUR_TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE AddCivilPetitionType
    (
        PetitionTypeIN      IN      LOMS_CIVIL_PET_TYPE.PETITION_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE ModifyCivilPetitionType
    (
        PetitionIDIN        IN      LOMS_CIVIL_PET_TYPE.PETITION_ID%TYPE,
        PetitionTypeIN      IN      LOMS_CIVIL_PET_TYPE.PETITION_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE DeleteCivilPetitionType
    (
        PetitionIDIN        IN      LOMS_CIVIL_PET_TYPE.PETITION_ID%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE GetCivilPetitionType
    (
        CivilPetitionCurOUT   OUT     LOMS_STD_INFO_PKG.CIVIL_PET_REF_CUR_TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    );

    PROCEDURE AddCivilExecutionType
    (
        ExecutionTypeIN     IN      LOMS_CIVIL_EXEC_TYPE.EXECUTION_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    );

    PROCEDURE ModifyCivilExecutionType
    (
        ExecutionIDIN         IN      LOMS_CIVIL_EXEC_TYPE.EXECUTION_ID%TYPE,
        ExecutionTypeIN       IN      LOMS_CIVIL_EXEC_TYPE.EXECUTION_TYPE%TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    );

    PROCEDURE DeleteCivilExecutionType
    (
        ExecutionIDIN         IN      LOMS_CIVIL_EXEC_TYPE.EXECUTION_ID%TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    );

    PROCEDURE GetCivilExecutionType
    (
        CivilExecutionCurOUT  OUT     LOMS_STD_INFO_PKG.CIVIL_EXEC_REF_CUR_TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    );

    PROCEDURE AddCriminalCaseType
    (
        CriminalCaseTypeIN    IN      LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE%TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    );

    PROCEDURE ModifyCriminalCaseType
    (
        CriminalCaseIDIN        IN      LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE_ID%TYPE,
        CriminalCaseTypeIN      IN      LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE%TYPE,
        ErrorCdOUT		          OUT     VARCHAR2,
        ErrorMsgOUT		          OUT     VARCHAR2
    );

    PROCEDURE DeleteCriminalCaseType
    (
        CriminalCaseIDIN        IN      LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE_ID%TYPE,
        ErrorCdOUT		          OUT     VARCHAR2,
        ErrorMsgOUT		          OUT     VARCHAR2
    );

    PROCEDURE GetCriminalCaseType
    (
        CriminalCaseTypeCurOUT    OUT     LOMS_STD_INFO_PKG.CRIMINAL_CASE_REF_CUR_TYPE,
        ErrorCdOUT		            OUT     VARCHAR2,
        ErrorMsgOUT		            OUT     VARCHAR2
    );

    PROCEDURE GetStateInfo
    (
        StateInfoCurOut     OUT     LOMS_STD_INFO_PKG.STATE_INFO_REF_CUR_TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2

    );

    PROCEDURE GetDistrictInfo
    (
        StateNameIN             IN      LOMS_STATE_INFO.STATE_NAME%TYPE,
        DistrictInfoCurOut      OUT     LOMS_STD_INFO_PKG.DIST_INFO_REF_CUR_TYPE,
        ErrorCdOUT		          OUT     VARCHAR2,
        ErrorMsgOUT		          OUT     VARCHAR2
    );
    
    PROCEDURE CheckIfCourtExists
    (
        CourtExistsFlgOUT       OUT     VARCHAR2
    );

END LOMS_STD_INFO_PKG;

/

CREATE OR REPLACE
PACKAGE LOMS_SERVICE_PKG AS

   PROCEDURE AddApplicationMasterInfo
   (
        EmailIdIN             IN        LOMS_APP_MASTER.EMAIL_ID%TYPE,
        EmailPwdIN            IN        VARCHAR2,
        EmailFlgIN            IN        LOMS_APP_MASTER.EMAIL_ENABLED_FLG%TYPE,
        SmsFlgIN              IN        LOMS_APP_MASTER.SMS_ENABLED_FLG%TYPE,
        ProductIdIN           IN        LOMS_APP_MASTER.PRODUCT_ID%TYPE,
        ActivationIdIN        IN        VARCHAR2,
        ErrorCdOUT            OUT       VARCHAR2,
        ErrorMsgOUT           OUT       VARCHAR2
   );
   
   PROCEDURE GetApplicationMasterInfo
   (
        EmailIdOUT            OUT       LOMS_APP_MASTER.EMAIL_ID%TYPE,
        EmailPwdOUT           OUT       VARCHAR2,
        EmailFlgOUT           OUT       LOMS_APP_MASTER.EMAIL_ENABLED_FLG%TYPE,
        SmsFlgOUT             OUT       LOMS_APP_MASTER.SMS_ENABLED_FLG%TYPE,
        ProductIdOUT          OUT       LOMS_APP_MASTER.PRODUCT_ID%TYPE,
        ActivationIdOUT       OUT       VARCHAR2,
        ErrorCdOUT            OUT       VARCHAR2,
        ErrorMsgOUT           OUT       VARCHAR2
   );

   PROCEDURE UpdateApplicationMasterInfo
   (
        EmailIdIN             IN        LOMS_APP_MASTER.EMAIL_ID%TYPE,
        EmailPwdIN            IN        VARCHAR2,
        EmailFlgIN            IN        LOMS_APP_MASTER.EMAIL_ENABLED_FLG%TYPE,
        SmsFlgIN              IN        LOMS_APP_MASTER.SMS_ENABLED_FLG%TYPE,
        ErrorCdOUT            OUT       VARCHAR2,
        ErrorMsgOUT           OUT       VARCHAR2
   );

   FUNCTION CheckIfProductIsActive
   RETURN VARCHAR2;

   PROCEDURE GetEmailIDAndPassword
   (
        EmailIDOUT        OUT       LOMS_APP_MASTER.EMAIL_ID%TYPE,
        EmailPwdOUT       OUT       VARCHAR2,
        ErrorCdOUT        OUT       VARCHAR2,
        ErrorMsgOUT       OUT       VARCHAR2
   );

END LOMS_SERVICE_PKG;

/

--  DDL for Package Body LOMS_AUDIT_PKG

CREATE OR REPLACE
PACKAGE BODY LOMS_AUDIT_PKG AS

    PROCEDURE LogAuditMsg( ProcessNameIN      IN      LOMS_AUDIT_INFO.PROCESS_NAME%TYPE,
                           KeyValueIN         IN      LOMS_AUDIT_INFO.KEY_VALUE%TYPE,
                           MsgCdIN            IN      LOMS_AUDIT_INFO.MSG_CODE%TYPE,
                           MsgTextIN          IN      LOMS_AUDIT_INFO.MSG_TEXT%TYPE,
                           SqlErrorCdIN       IN      LOMS_AUDIT_INFO.SQL_ERROR_CODE%TYPE,
                           SqlErrorTextIN     IN      LOMS_AUDIT_INFO.SQL_ERROR_TEXT%TYPE)
    AS
        AuditID     LOMS_AUDIT_INFO.AUDIT_ID%TYPE;
        PRAGMA      AUTONOMOUS_TRANSACTION;
    BEGIN
        -- Generate Audit ID
        SELECT    LOMS_AI_AUDIT_ID_SEQ.NEXTVAL
        INTO      AuditID
        FROM      DUAL;

        /*
           Inserting data into LOMS_AUDIT_INFO table
           Used for error tracking
        */
        INSERT INTO LOMS_AUDIT_INFO(AUDIT_ID,
                                    PROCESS_NAME,
                                    KEY_VALUE,
                                    MSG_CODE,
                                    MSG_TEXT,
                                    SQL_ERROR_CODE,
                                    SQL_ERROR_TEXT,
                                    GEN_IST,
                                    GEN_USER_CD,
                                    UPD_IST,
                                    UPD_USER_CD)
        VALUES                     (AuditID,
                                    ProcessNameIN,
                                    KeyValueIN,
                                    MsgCdIN,
                                    MsgTextIN,
                                    SqlErrorCdIN,
                                    SqlErrorTextIN,
                                    SysDate,
                                    User,
                                    SysDate,
                                    User);
        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END LogAuditMsg;

END LOMS_AUDIT_PKG;

/

--  DDL for Package Body LOMS_CRYPT_PKG

CREATE OR REPLACE PACKAGE BODY LOMS_CRYPT_PKG AS

  CryptRaw      RAW(2000);
  CryptString   VARCHAR(2000);

  FUNCTION EncryptData(EncryptString   IN    VARCHAR2)
  RETURN RAW
  AS
     
     Inputlength      INTEGER := LENGTH(EncryptString);
     Position         INTEGER;
     PadBlock         RAW(2000);
     EncryptionKey    RAW(50) := UTL_RAW.CAST_TO_RAW('rakshaloms');
     ProcessName      LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'EncryptData';
     ErrorCd          VARCHAR2(10);
     ErrorMsg         VARCHAR2(2000);
  
  BEGIN

     SELECT   UTL_RAW.CAST_TO_RAW(CRYPT_CD)
     INTO     EncryptionKey
     FROM     LOMS_CRYPT_TBL
     WHERE    CRYPT_TYPE = 'ENCRYPTION';

     Position := 8 - MOD(Inputlength,8);

     PadBlock := utl_raw.cast_to_raw(EncryptString||RPAD(CHR(Position),Position,CHR(Position)));

     dbms_obfuscation_toolkit.DESEncrypt(input => PadBlock, KEY => EncryptionKey, encrypted_data => CryptRaw );

     RETURN CryptRaw ;

     EXCEPTION
        WHEN OTHERS THEN
            ErrorCd  :=  'E9999';
            ErrorMsg :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
            RETURN CryptRaw;
  END EncryptData;

  FUNCTION DecryptData(DecryptString   IN    VARCHAR2)
  RETURN VARCHAR2
  AS
     Inputlength          NUMBER;
     DecryptionKey        RAW(50)   := UTL_RAW.CAST_TO_RAW('rakshaloms');
     CryptRaw             RAW(2000) := utl_raw.cast_to_raw(utl_raw.cast_to_varchar2(DecryptString)) ;
     ProcessName          LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'EncryptData';
     ErrorCd              VARCHAR2(10);
     ErrorMsg             VARCHAR2(2000);
  BEGIN

     SELECT   UTL_RAW.CAST_TO_RAW(CRYPT_CD)
     INTO     DecryptionKey
     FROM     LOMS_CRYPT_TBL
     WHERE    CRYPT_TYPE = 'DECRYPTION';

     dbms_obfuscation_toolkit.DESDecrypt(input => DecryptString, KEY => DecryptionKey, decrypted_data => CryptRaw );

     CryptString := utl_raw.cast_to_varchar2(CryptRaw);

     Inputlength := LENGTH(CryptString);

     CryptString := RPAD(CryptString,Inputlength-ASCII(SUBSTR(CryptString,Inputlength)));

     RETURN CryptString;
     
     EXCEPTION
        WHEN OTHERS THEN
            ErrorCd  :=  'E9999';
            ErrorMsg :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
            RETURN CryptString;
  END DecryptData;

END LOMS_CRYPT_PKG;

/

--  DDL for Package Body LOMS_DATA_BKP_PKG

CREATE OR REPLACE PACKAGE BODY LOMS_DATA_BKP_PKG AS

  PROCEDURE LomsDataExport
  AS
      ind               NUMBER;                                                     -- Loop index
      h1                NUMBER;                                                     -- Data Pump job handle
      percent_done      NUMBER;                                                     -- Percentage of job complete
      job_state         VARCHAR2(30);                                               -- To keep track of job state
      LawyerID          varchar2(20) := 'C12345';                                   -- Lawyer ID
      ThisDate          VARCHAR2(10);                                               -- Current Date in DDMMYYYY format
      JobId             VARCHAR2(25);                                               -- Job ID
      JobName           VARCHAR2(25);                                               -- Job name for data pump
      FileName          VARCHAR2(50);                                               -- File Name
      le                ku$_LogEntry;                                               -- For WIP and error messages
      js                ku$_JobStatus;                                              -- The job status from get_status
      jd                ku$_JobDesc;                                                -- The job description from get_status
      sts               ku$_Status;                                                 -- The status object returned by get_status
      DUMP_VERSION      CONSTANT VARCHAR2(20)  := 'LATEST';                         -- Dump Version
      EXPORT_OBJ        CONSTANT VARCHAR2(20)  := 'SCHEMA';                         -- Export Object Type
      DATAPUMP_TYPE     CONSTANT VARCHAR2(20)  := 'EXPORT';                         -- Data Pump Type
      DATAPUMP_DIR      CONSTANT VARCHAR2(20)  := 'LOMS_DATA_DUMP';                 -- Data Pump Directory
      JS_COMPLETED      CONSTANT VARCHAR2(20)  := 'COMPLETED';                      -- Job Status (COMPLETED)
      JS_STOPPED        CONSTANT VARCHAR2(20)  := 'STOPPED';                        -- Job Status (STOPPED)
      JS_UNDEFINED      CONSTANT VARCHAR2(20)  := 'UNDEFINED';                      -- Job Status (UNDEFINED)
      ErrorCd           LOMS_AUDIT_INFO.MSG_CODE%TYPE;
      ErrorMsg          LOMS_AUDIT_INFO.MSG_TEXT%TYPE;
      ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE :=	'LomsDataExport';
      KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;

  BEGIN

      SELECT  TO_CHAR(SYSDATE,'DD')||TO_CHAR(SYSDATE,'MM')||TO_CHAR(SYSDATE,'YYYY')
      INTO    ThisDate
      FROM    dual;

      /*
      SELECT  CUST_ID
      INTO    LawyerID
      FROM    LOMS_CUST_PROFILE;
      */

      -- Dump File Name
      FileName := 'Data_Bkp_' || ThisDate || '.dmp';

      SELECT  LOMS_EXP_JI_JOB_ID_SEQ.NEXTVAL
      INTO    JobId
      FROM    DUAL;

      JobName   := 'JOB' || JobId;

      KeyValue  := 'FileName: ' || FileName || ', ' || 'JobName: ' || JobName;

      -- Create a (user-named) Data Pump job to do a schema export
      h1 := DBMS_DATAPUMP.OPEN(DATAPUMP_TYPE, EXPORT_OBJ, NULL, JobName, DUMP_VERSION);

      /*
        Specify a single dump file for the job (using the handle just returned)
        and a directory object, which must already be defined and accessible to
        the user running this procedure
      */

      DBMS_DATAPUMP.ADD_FILE(h1,FileName,DATAPUMP_DIR);

      -- A metadata filter is used to specify the schema that will be exported.

      DBMS_DATAPUMP.METADATA_FILTER(h1,'SCHEMA_EXPR','IN (''LOMS_MSTR'')');

      /*
        Start the job. An exception will be generated if something
        is not set up properly.
      */

      DBMS_DATAPUMP.START_JOB(h1);

      /*
        The export job should now be running. In the following loop, the job is
        monitored until it completes. In the meantime, progress information is
        displayed.
      */

      percent_done  := 0;
      job_state     := JS_UNDEFINED;

      WHILE (job_state != JS_COMPLETED) AND (job_state != JS_STOPPED) LOOP
          dbms_datapump.get_status(h1,
          dbms_datapump.ku$_status_job_error +
          dbms_datapump.ku$_status_job_status +
          dbms_datapump.ku$_status_wip,-1,job_state,sts);
          js := sts.job_status;

          -- If the percentage done changed, display the new value.
          IF js.percent_done != percent_done THEN
            --dbms_output.put_line('*** Job percent done = ' || to_char(js.percent_done));
            percent_done := js.percent_done;
          END IF;

          /*
            If any work-in-progress (WIP) or error messages were received for the job,
            display them.
          */

          IF (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0) THEN
              le := sts.wip;
          ELSE
              IF (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0) THEN
                le := sts.ERROR;
              ELSE
                le := NULL;
              END IF;
          END IF;

          IF le IS NOT NULL THEN
              ind := le.FIRST;
              WHILE ind IS NOT NULL LOOP
                --dbms_output.put_line(le(ind).LogText);
                ind := le.NEXT(ind);
              END LOOP;
          END IF;
      END LOOP;

      -- Indicate that the job finished and detach from it.
      dbms_datapump.detach(h1);

  EXCEPTION
      WHEN OTHERS THEN
          ErrorCd     :=  'E9999';
          ErrorMsg    :=  'Unexpected error while processing';
          LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
  END LomsDataExport;

  PROCEDURE LomsDataImport
  AS
      ind                           NUMBER;                                            -- Loop index
      h1                            NUMBER;                                            -- Data Pump job handle
      percent_done                  NUMBER;                                            -- Percentage of job complete
      job_state                     VARCHAR2(30);                                      -- To keep track of job state
      le                            ku$_LogEntry;                                      -- For WIP and error messages
      js                            ku$_JobStatus;                                     -- The job status from get_status
      jd                            ku$_JobDesc;                                       -- The job description from get_status
      sts                           ku$_Status;                                        -- The status object returned by get_status
      JobId                         VARCHAR2(25);                                      -- Job ID
      JobName                       VARCHAR2(25);                                      -- Job name for data pump
      DUMP_VERSION                  CONSTANT VARCHAR2(20)  := 'FULL';                  -- Dump Version
      EXPORT_OBJ                    CONSTANT VARCHAR2(20)  := 'SCHEMA';                -- Export Object Type
      DATAPUMP_TYPE                 CONSTANT VARCHAR2(20)  := 'IMPORT';                -- Data Pump Type
      DATAPUMP_DIR                  CONSTANT VARCHAR2(20)  := 'LOMS_DATA_DUMP';        -- Data Pump Directory
      JS_COMPLETED                  CONSTANT VARCHAR2(20)  := 'COMPLETED';             -- Job Status (COMPLETED)
      JS_STOPPED                    CONSTANT VARCHAR2(20)  := 'STOPPED';               -- Job Status (STOPPED)
      JS_UNDEFINED                  CONSTANT VARCHAR2(20)  := 'UNDEFINED';             -- Job Status (UNDEFINED)
      ErrorCd                       LOMS_AUDIT_INFO.MSG_CODE%TYPE;
      ErrorMsg                      LOMS_AUDIT_INFO.MSG_TEXT%TYPE;
      ProcessName                   LOMS_AUDIT_INFO.PROCESS_NAME%TYPE :=	'LomsDataImport';
      KeyValue                      LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
  BEGIN

      SELECT  LOMS_IMP_JI_JOB_ID_SEQ.NEXTVAL
      INTO    JobId
      FROM    DUAL;

      JobName   := 'JOB' || JobId;

      /*
        Create a (user-named) Data Pump job to do a full import (everything
        in the dump file without filtering)
      */
      h1 := DBMS_DATAPUMP.OPEN(DATAPUMP_TYPE,DUMP_VERSION,NULL,JobName);

      /*
        Specify the single dump file for the job (using the handle just returned)
        and directory object, which must already be defined and accessible
        to the user running this procedure. This is the dump file created by
        the export operation in the first example
      */

      DBMS_DATAPUMP.ADD_FILE(h1,'DATA_DUMP.DMP',DATAPUMP_DIR);

      -- A metadata remap will map all schema objects from one to another.
      DBMS_DATAPUMP.METADATA_REMAP(h1,'REMAP_SCHEMA','LOMS_MSTR','LOMS_RCV');

      /*
        If a table already exists in the destination schema, skip it (leave
        the preexisting table alone). This is the default, but it does not hurt
        to specify it explicitly
      */

      DBMS_DATAPUMP.SET_PARAMETER(h1,'TABLE_EXISTS_ACTION','SKIP');

      -- Start the job. An exception is returned if something is not set up properly.
      DBMS_DATAPUMP.START_JOB(h1);

      /*
      The import job should now be running. In the following loop, the job is
      monitored until it completes. In the meantime, progress information is
      displayed.
      */
      percent_done := 0;
      job_state := JS_UNDEFINED;

      WHILE (job_state != JS_COMPLETED) AND (job_state != JS_STOPPED) LOOP
          dbms_datapump.get_status(h1,
                                   dbms_datapump.ku$_status_job_error +
                                   dbms_datapump.ku$_status_job_status +
                                   dbms_datapump.ku$_status_wip,-1,job_state,sts);
          js := sts.job_status;

          -- If the percentage done changed, display the new value.
          IF js.percent_done != percent_done THEN
              --dbms_output.put_line('*** Job percent done = ' || to_char(js.percent_done));
              percent_done := js.percent_done;
          END IF;

          /*
            If any work-in-progress (WIP) or Error messages were received for the job,
            display them.
          */

          IF (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0) THEN
              le := sts.wip;
          ELSE
              IF (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0) THEN
                le := sts.ERROR;
              ELSE
                le := NULL;
              END IF;
          END IF;
          IF le IS NOT NULL THEN
              ind := le.FIRST;
              WHILE ind IS NOT NULL LOOP
                dbms_output.put_line(le(ind).LogText);
                ind := le.NEXT(ind);
              END LOOP;
          end if;
      END LOOP;

      -- Indicate that the job finished and gracefully detach from it.
      dbms_datapump.detach(h1);

  EXCEPTION
      WHEN OTHERS THEN
          ErrorCd     :=  'E9999';
          ErrorMsg    :=  'Unexpected error while processing';
          LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
  END LomsDataImport;

END LOMS_DATA_BKP_PKG;

/

--  DDL for Package Body LOMS_EMP_PKG

CREATE OR REPLACE
PACKAGE BODY LOMS_EMP_PKG AS

      PROCEDURE AddEmpInfo
      (
          FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
          LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
          GenderIN            IN      LOMS_EMP_INFO.GENDER%TYPE,
          AddressIN	          IN      LOMS_EMP_INFO.ADDRESS%TYPE,
          NationalityIN	      IN      LOMS_EMP_INFO.NATIONALITY%TYPE,
          DobIN	              IN      VARCHAR2,
          TelNoIN	            IN      LOMS_EMP_INFO.TEL_NO%TYPE,
          MobNoIN	            IN      LOMS_EMP_INFO.MOB_NO%TYPE,
          CommentsIN	        IN      LOMS_EMP_INFO.COMMENTS%TYPE,
          DojIN	              IN      VARCHAR2,
          PanNoIN	            IN      LOMS_EMP_INFO.PAN_NO%TYPE,
          LicenseNoIN	        IN      LOMS_EMP_INFO.LICENSE_NO%TYPE,
          EmailIDIN           IN      LOMS_EMP_INFO.EMAIL_ID%TYPE,
          UserTypeIN          IN      LOMS_EMP_INFO.USER_TYPE%TYPE,
          SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
          Answer1IN           IN      VARCHAR2,
          SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
          Answer2IN           IN      VARCHAR2,
          EmpIDOUT            OUT     LOMS_EMP_INFO.EMP_ID%TYPE,
          UserNameOUT         OUT     VARCHAR2,
          PasswordOUT         OUT     VARCHAR2,
          ErrorCdOUT          OUT     VARCHAR2,
          ErrorMsgOUT         OUT     VARCHAR2
      )
      AS
          -- Local variables
          GenIST			              LOMS_EMP_INFO.GEN_IST%TYPE;
          GenUserCd		              LOMS_EMP_INFO.GEN_USER_CD%TYPE;
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddEmpInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN
          -- Process Begins
          ErrorCdOUT  :=  'E4001';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'FirstNameIN: ' || FirstNameIN || ', ' || 'LastNameIN: ' || LastNameIN;

          -- Generate Temporary Client ID using sequence
          SELECT  LOMS_EI_EMPID_SEQ.NEXTVAL
          INTO    EmpIDOUT
          FROM    DUAL;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          -- Error Code and Msg
          ErrorCdOUT  :=  'E4002';
          ErrorMsgOUT :=  'Adding New Employee Information';

          --Create Username
          IF FirstNameIN IS NOT NULL AND LastNameIN IS NOT NULL THEN
              UserNameOUT := LOMS_EMP_PKG.CreateUserName(FirstNameIN,LastNameIN);
              PasswordOUT := 'loms123';
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          -- Attempting data insert
          INSERT INTO LOMS_EMP_INFO  (EMP_ID,
                                      FIRST_NAME,
                                      LAST_NAME,
                                      GENDER,
                                      ADDRESS,
                                      NATIONALITY,
                                      DOB,
                                      TEL_NO,
                                      MOB_NO,
                                      COMMENTS,
                                      DOJ,
                                      PAN_NO,
                                      LICENSE_NO,
                                      EMAIL_ID,
                                      USER_NAME,
                                      EMP_PWD,
                                      USER_TYPE,
                                      SECURITY_QSN_1,
                                      ANSWER_1,
                                      SECURITY_QSN_2,
                                      ANSWER_2,
                                      GEN_IST,
                                      GEN_USER_CD,
                                      UPD_IST,
                                      UPD_USER_CD)
          VALUES                     (EmpIDOUT,
                                      FirstNameIN,
                                      LastNameIN,
                                      UPPER(GenderIN),
                                      AddressIN,
                                      NationalityIN,
                                      TO_DATE(DobIN,'DD/MM/YYYY'),
                                      TelNoIN,
                                      MobNoIN,
                                      CommentsIN,
                                      TO_DATE(DojIN,'DD/MM/YYYY'),
                                      UPPER(PanNoIN),
                                      UPPER(LicenseNoIN),
                                      EmailIDIN,
                                      UserNameOUT,
                                      LOMS_CRYPT_PKG.EncryptData(PasswordOUT),
                                      UserTypeIN,
                                      SecQsn1IN,
                                      LOMS_CRYPT_PKG.EncryptData(Answer1IN),
                                      SecQsn2IN,
                                      LOMS_CRYPT_PKG.EncryptData(Answer2IN),
                                      GenIST,
                                      GenUserCd,
                                      GenIST,
                                      GenUserCd);

          LOMS_EMP_PKG.SetUserEnvironment(FirstNameIN,LastNameIN,UserNameOUT,PasswordOUT,UserTypeIN,ErrorCdOUT,ErrorMsgOUT);

          -- Error code and msg
          IF ErrorCdOUT <> 'E9999' THEN
              ErrorCdOUT  :=  'E4003';
              ErrorMsgOUT :=  'Processing Successful';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          END IF;

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN INVALID_CURSOR THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Cursor';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data Found for the Input supplied';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddEmpInfo;
    
      PROCEDURE AddLawyerInfo
      (
          FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
          LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
          GenderIN            IN      LOMS_EMP_INFO.GENDER%TYPE,
          AddressIN	          IN      LOMS_EMP_INFO.ADDRESS%TYPE,
          NationalityIN	      IN      LOMS_EMP_INFO.NATIONALITY%TYPE,
          DobIN	              IN      VARCHAR2,
          TelNoIN	            IN      LOMS_EMP_INFO.TEL_NO%TYPE,
          MobNoIN	            IN      LOMS_EMP_INFO.MOB_NO%TYPE,
          CommentsIN	        IN      LOMS_EMP_INFO.COMMENTS%TYPE,
          EmailIDIN           IN      LOMS_EMP_INFO.EMAIL_ID%TYPE,
          UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
          UserPwdIN           IN      VARCHAR2,
          SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
          Answer1IN           IN      VARCHAR2,
          SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
          Answer2IN           IN      VARCHAR2,
          EmpIDOUT            OUT     LOMS_EMP_INFO.EMP_ID%TYPE,
          ErrorCdOUT          OUT     VARCHAR2,
          ErrorMsgOUT         OUT     VARCHAR2
      )
      AS
          -- Local variables
          GenIST			              LOMS_EMP_INFO.GEN_IST%TYPE;
          GenUserCd		              LOMS_EMP_INFO.GEN_USER_CD%TYPE;
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddLawyerInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN
          -- Process Begins
          ErrorCdOUT  :=  'E4004';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'FirstNameIN: ' || FirstNameIN || ', ' || 'LastNameIN: ' || LastNameIN;

          -- Generate Temporary Client ID using sequence
          SELECT  LOMS_EI_EMPID_SEQ.NEXTVAL
          INTO    EmpIDOUT
          FROM    DUAL;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          -- Error Code and Msg
          ErrorCdOUT  :=  'E4005';
          ErrorMsgOUT :=  'Adding Lawyer Information';

          -- Attempting data insert
          INSERT INTO LOMS_EMP_INFO  (EMP_ID,
                                      FIRST_NAME,
                                      LAST_NAME,
                                      GENDER,
                                      ADDRESS,
                                      NATIONALITY,
                                      DOB,
                                      TEL_NO,
                                      MOB_NO,
                                      COMMENTS,
                                      DOJ,
                                      PAN_NO,
                                      LICENSE_NO,
                                      EMAIL_ID,
                                      USER_NAME,
                                      EMP_PWD,
                                      USER_TYPE,
                                      SECURITY_QSN_1,
                                      ANSWER_1,
                                      SECURITY_QSN_2,
                                      ANSWER_2,
                                      GEN_IST,
                                      GEN_USER_CD,
                                      UPD_IST,
                                      UPD_USER_CD)
          VALUES                     (EmpIDOUT,
                                      FirstNameIN,
                                      LastNameIN,
                                      UPPER(GenderIN),
                                      AddressIN,
                                      NationalityIN,
                                      TO_DATE(DobIN,'DD/MM/YYYY'),
                                      TelNoIN,
                                      MobNoIN,
                                      CommentsIN,
                                      NULL,
                                      NULL,
                                      NULL,
                                      EmailIDIN,
                                      UserNameIN,
                                      LOMS_CRYPT_PKG.EncryptData(UserPwdIN),
                                      'GOD',
                                      SecQsn1IN,
                                      LOMS_CRYPT_PKG.EncryptData(Answer1IN),
                                      SecQsn2IN,
                                      LOMS_CRYPT_PKG.EncryptData(Answer2IN),
                                      GenIST,
                                      GenUserCd,
                                      GenIST,
                                      GenUserCd);

          LOMS_EMP_PKG.SetUserEnvironment(FirstNameIN,LastNameIN,UserNameIN,UserPwdIN,'GOD',ErrorCdOUT,ErrorMsgOUT);

          -- Error code and msg
          IF ErrorCdOUT <> 'E9999' THEN
              ErrorCdOUT  :=  'E4006';
              ErrorMsgOUT :=  'Processing Successful';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          END IF;

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN INVALID_CURSOR THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Cursor';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data Found for the Input supplied';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END AddLawyerInfo;

    PROCEDURE SearchEmpInfo
    (
        EmpIDIN             IN      LOMS_EMP_INFO.EMP_ID%TYPE,
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
        DobIN	              IN      VARCHAR2,
        MobNoIN	            IN      LOMS_EMP_INFO.MOB_NO%TYPE,
        DojIN	              IN      VARCHAR2,
        PanNoIN	            IN      LOMS_EMP_INFO.PAN_NO%TYPE,
        LicenseNoIN	        IN      LOMS_EMP_INFO.LICENSE_NO%TYPE,
        EmpInfoCurOUT       OUT     LOMS_EMP_PKG.EMP_INFO_REF_CUR_TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchEmpInfo';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
    BEGIN

        KeyValue := 'EmpID: '     || EmpIDIN     || ', ' || 'FirstName: ' || FirstNameIN || ', ' ||
                    'LastName: '  || LastNameIN  || ', ' || 'Dob: '       || DobIN       || ', ' ||
                    'MobNo: '     || MobNoIN     || ', ' || 'Doj: '       || DojIN       || ', ' ||
                    'PanNo: '     || PanNoIN     || ', ' || 'LicenseNo: ' || LicenseNoIN;

        IF EmpIDIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E4007';
            ErrorMsgOUT :=  'Attempting data fetch using Employee ID';

            OPEN EmpInfoCurOUT FOR
                SELECT  EMP_ID,
                        FIRST_NAME,
                        LAST_NAME,
                        GENDER,
                        ADDRESS,
                        NATIONALITY,
                        DOB,
                        TEL_NO,
                        MOB_NO,
                        COMMENTS,
                        DOJ,
                        PAN_NO,
                        LICENSE_NO,
                        USER_NAME,
                        USER_TYPE
                FROM    LOMS_EMP_INFO
                WHERE   UPPER(EMP_ID) LIKE '%' || UPPER(EmpIDIN) || '%'
                AND     OBSLT_IST IS NULL;

        ELSIF FirstNameIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E4008';
            ErrorMsgOUT :=  'Attempting data fetch using First Name';

            OPEN EmpInfoCurOUT FOR
                SELECT  EMP_ID,
                        FIRST_NAME,
                        LAST_NAME,
                        GENDER,
                        ADDRESS,
                        NATIONALITY,
                        DOB,
                        TEL_NO,
                        MOB_NO,
                        COMMENTS,
                        DOJ,
                        PAN_NO,
                        LICENSE_NO,
                        USER_NAME,
                        USER_TYPE
                FROM    LOMS_EMP_INFO
                WHERE   UPPER(FIRST_NAME)  LIKE   '%' || UPPER(FirstNameIN) || '%'
                AND     OBSLT_IST IS NULL;

        ELSIF LastNameIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E4009';
            ErrorMsgOUT :=  'Attempting data fetch using Last Name';

            OPEN EmpInfoCurOUT FOR
                SELECT  EMP_ID,
                        FIRST_NAME,
                        LAST_NAME,
                        GENDER,
                        ADDRESS,
                        NATIONALITY,
                        DOB,
                        TEL_NO,
                        MOB_NO,
                        COMMENTS,
                        DOJ,
                        PAN_NO,
                        LICENSE_NO,
                        USER_NAME,
                        USER_TYPE
                FROM    LOMS_EMP_INFO
                WHERE   UPPER(LAST_NAME) LIKE '%' || UPPER(LastNameIN) || '%'
                AND     OBSLT_IST IS NULL;

        ELSIF DobIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E4010';
            ErrorMsgOUT :=  'Attempting data fetch using Date of Birth';

            OPEN EmpInfoCurOUT FOR
                SELECT  EMP_ID,
                        FIRST_NAME,
                        LAST_NAME,
                        GENDER,
                        ADDRESS,
                        NATIONALITY,
                        DOB,
                        TEL_NO,
                        MOB_NO,
                        COMMENTS,
                        DOJ,
                        PAN_NO,
                        LICENSE_NO,
                        USER_NAME,
                        USER_TYPE
                FROM    LOMS_EMP_INFO
                WHERE   DOB = TO_DATE(DobIN,'DD/MM/YYYY')
                AND     OBSLT_IST IS NULL;

        ELSIF MobNoIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E4011';
            ErrorMsgOUT :=  'Attempting data fetch using Mobile No';

            OPEN EmpInfoCurOUT FOR
                SELECT  EMP_ID,
                        FIRST_NAME,
                        LAST_NAME,
                        GENDER,
                        ADDRESS,
                        NATIONALITY,
                        DOB,
                        TEL_NO,
                        MOB_NO,
                        COMMENTS,
                        DOJ,
                        PAN_NO,
                        LICENSE_NO,
                        USER_NAME,
                        USER_TYPE
                FROM    LOMS_EMP_INFO
                WHERE   MOB_NO LIKE '%' || MobNoIN || '%'
                AND     OBSLT_IST IS NULL;

        ELSIF DojIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E4012';
            ErrorMsgOUT :=  'Attempting data fetch using Date of Joining';

            OPEN EmpInfoCurOUT FOR
                SELECT  EMP_ID,
                        FIRST_NAME,
                        LAST_NAME,
                        GENDER,
                        ADDRESS,
                        NATIONALITY,
                        DOB,
                        TEL_NO,
                        MOB_NO,
                        COMMENTS,
                        DOJ,
                        PAN_NO,
                        LICENSE_NO,
                        USER_NAME,
                        USER_TYPE
                FROM    LOMS_EMP_INFO
                WHERE   DOJ = TO_DATE(DojIN,'DD/MM/YYYY')
                AND     OBSLT_IST IS NULL;

        ELSIF PanNoIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E4013';
            ErrorMsgOUT :=  'Attempting data fetch using PAN Number';

            OPEN EmpInfoCurOUT FOR
                SELECT  EMP_ID,
                        FIRST_NAME,
                        LAST_NAME,
                        GENDER,
                        ADDRESS,
                        NATIONALITY,
                        DOB,
                        TEL_NO,
                        MOB_NO,
                        COMMENTS,
                        DOJ,
                        PAN_NO,
                        LICENSE_NO,
                        USER_NAME,
                        USER_TYPE
                FROM    LOMS_EMP_INFO
                WHERE   UPPER(PAN_NO) LIKE '%' || UPPER(PanNoIN) || '%'
                AND     OBSLT_IST IS NULL;

        ELSIF LicenseNoIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E4014';
            ErrorMsgOUT :=  'Attempting data fetch using License No';

            OPEN EmpInfoCurOUT FOR
                SELECT  EMP_ID,
                        FIRST_NAME,
                        LAST_NAME,
                        GENDER,
                        ADDRESS,
                        NATIONALITY,
                        DOB,
                        TEL_NO,
                        MOB_NO,
                        COMMENTS,
                        DOJ,
                        PAN_NO,
                        LICENSE_NO,
                        USER_NAME,
                        USER_TYPE
                FROM    LOMS_EMP_INFO
                WHERE   UPPER(LICENSE_NO) LIKE '%' || UPPER(LicenseNoIN) || '%'
                AND     OBSLT_IST IS NULL;

        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E4015';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END SearchEmpInfo;

    PROCEDURE UpdateEmpInfo
    (
        EmpIDIN             IN      LOMS_EMP_INFO.EMP_ID%TYPE,
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
        GenderIN            IN      LOMS_EMP_INFO.GENDER%TYPE,
        AddressIN	          IN      LOMS_EMP_INFO.ADDRESS%TYPE,
        NationalityIN	      IN      LOMS_EMP_INFO.NATIONALITY%TYPE,
        DobIN	              IN      VARCHAR2,
        TelNoIN	            IN      LOMS_EMP_INFO.TEL_NO%TYPE,
        MobNoIN	            IN      LOMS_EMP_INFO.MOB_NO%TYPE,
        CommentsIN	        IN      LOMS_EMP_INFO.COMMENTS%TYPE,
        DojIN	              IN      VARCHAR2,
        PanNoIN	            IN      LOMS_EMP_INFO.PAN_NO%TYPE,
        LicenseNoIN	        IN      LOMS_EMP_INFO.LICENSE_NO%TYPE,
        UserTypeIN          IN      LOMS_EMP_INFO.USER_TYPE%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        UpdIST			      LOMS_EMP_INFO.UPD_IST%TYPE;
        UpdUserCd		      LOMS_EMP_INFO.UPD_USER_CD%TYPE;
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'UpdateEmpInfo';
    BEGIN
        -- Process begins
        ErrorCdOUT  :=  'E4016';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue := 'EmpID: '     || EmpIDIN     || ', ' || 'FirstName: ' || FirstNameIN || ', ' ||
                    'LastName: '  || LastNameIN;

        -- Select the user name
        SELECT  USER
        INTO    UpdUserCd
        FROM    DUAL;

        -- Select the date and time
        SELECT  SYSDATE
        INTO    UpdIST
        FROM    DUAL;

        ErrorCdOUT  :=  'E4017';
        ErrorMsgOUT :=  'Attempting data update';

        IF EmpIDIN IS NOT NULL THEN
              UPDATE    LOMS_EMP_INFO
              SET       FIRST_NAME    =   FirstNameIN,
                        LAST_NAME     =   LastNameIN,
                        GENDER        =   UPPER(GenderIN),
                        ADDRESS       =   AddressIN,
                        NATIONALITY   =   UPPER(NationalityIN),
                        DOB           =   TO_DATE(DobIN,'DD/MM/YYYY'),
                        TEL_NO        =   TelNoIN,
                        MOB_NO        =   MobNoIN,
                        COMMENTS      =   CommentsIN,
                        DOJ           =   TO_DATE(DojIN,'DD/MM/YYYY'),
                        PAN_NO        =   UPPER(PanNoIN),
                        LICENSE_NO    =   UPPER(LicenseNoIN),
                        USER_TYPE     =   UPPER(UserTypeIN),
                        UPD_IST       =   UpdIST,
                        UPD_USER_CD   =   UpdUserCd
              WHERE     EMP_ID        =   EmpIDIN
              AND       OBSLT_IST IS NULL;
        END IF;

        ErrorCdOUT  :=  'E4018';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END UpdateEmpInfo;

    PROCEDURE DeactivateEmployee
    (
        EmpIDIN             IN      LOMS_EMP_INFO.EMP_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        UserName                LOMS_EMP_INFO.USER_NAME%TYPE;
        DynamicQueryString      VARCHAR2(1000);
        UpdIST			            LOMS_EMP_INFO.UPD_IST%TYPE;
        UpdUserCd		            LOMS_EMP_INFO.UPD_USER_CD%TYPE;
        KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeactivateEmployee';
    BEGIN
        -- Process begins
        ErrorCdOUT  :=  'E4019';
        ErrorMsgOUT :=  'Process Initiated';
        KeyValue    :=  'EmpID: ' || EmpIDIN;

        -- Select the user name
        SELECT  USER
        INTO    UpdUserCd
        FROM    DUAL;

        -- Select the date and time
        SELECT  SYSDATE
        INTO    UpdIST
        FROM    DUAL;

        ErrorCdOUT  :=  'E4020';
        ErrorMsgOUT :=  'Attempting data update';

        IF EmpIDIN IS NOT NULL THEN

            SELECT  USER_NAME
            INTO    UserName
            FROM    LOMS_EMP_INFO
            WHERE   EMP_ID = EmpIDIN;

            DynamicQueryString := 'DROP USER ' || UserName;
            EXECUTE IMMEDIATE (DynamicQueryString);

            UPDATE  LOMS_EMP_INFO
            SET     OBSLT_IST       =   UpdIST,
                    OBSLT_USER_CD   =   UpdUserCd,
                    UPD_IST         =   UpdIST,
                    UPD_USER_CD     =   UpdUserCd
            WHERE   EMP_ID          =   EmpIDIN;

        END IF;

        ErrorCdOUT  :=  'E4021';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END DeactivateEmployee;

    PROCEDURE SetUserEnvironment
    (
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE,
        UserNameIN          IN      VARCHAR2,
        PasswordIN          IN      VARCHAR2,
        UserTypeIN          IN      LOMS_EMP_INFO.USER_TYPE%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        DynamicQueryString        VARCHAR2(1000);
        LoggedUserName            VARCHAR2(20);
        UserRole                  LOMS_EMP_INFO.USER_TYPE%TYPE;
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SetUserEnvironment';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
        INVALID_USER_EXCEPTION    EXCEPTION;
    BEGIN

        ErrorCdOUT  :=  'E4022';
        ErrorMsgOUT :=  'Process Initiated';
        KeyValue    :=  'FirstName: ' || FirstNameIN  || ', ' ||  'LastName: ' || LastNameIN || ', ' ||
                        'UserName: '  || UserNameIN   || ', ' ||  'Password: ' || PasswordIN;

        IF TRIM(FirstNameIN) IS NOT NULL AND TRIM(LastNameIN) IS NOT NULL AND TRIM(UserTypeIN) IS NOT NULL THEN
            -- Get the logged user name
            SELECT  USER
            INTO    LoggedUserName
            FROM    DUAL;

            -- Get the USER Role
            IF INSTR(UPPER(LoggedUserName),'LOMS_MSTR') = 0 THEN
                SELECT  UPPER(TRIM(USER_TYPE))
                INTO    UserRole
                FROM    LOMS_EMP_INFO
                WHERE   UPPER(TRIM(USER_NAME)) = UPPER(TRIM(LoggedUserName));
            END IF;

            IF INSTR(UPPER(LoggedUserName),'LOMS_MSTR') = 0 AND (UserRole <> 'ADMIN' AND UserRole <> 'GOD') THEN
                RAISE INVALID_USER_EXCEPTION;
            END IF;

            -- Grant CREATE USER privilege to the logged user
            DynamicQueryString := 'GRANT CREATE USER TO ' || LoggedUserName;
            EXECUTE IMMEDIATE (DynamicQueryString);

            -- Create New User
            DynamicQueryString := 'CREATE USER ' || UserNameIN || ' IDENTIFIED BY ' || PasswordIN ;
            EXECUTE IMMEDIATE (DynamicQueryString);

            --Grant Create Session
            DynamicQueryString := 'GRANT CREATE SESSION TO ' || UserNameIN;
            EXECUTE IMMEDIATE (DynamicQueryString);

            -- Grant CREATE USER privilege to the new user
            IF UserTypeIN = 'ADMIN' OR UserTypeIN = 'GOD' THEN

              DynamicQueryString := 'GRANT CREATE USER TO ' || UserNameIN;
              EXECUTE IMMEDIATE (DynamicQueryString);

              DynamicQueryString := 'GRANT DROP USER TO ' || UserNameIN;
              EXECUTE IMMEDIATE (DynamicQueryString);

            END IF;

            -- Grant ALTER USER privilege to the new user
            DynamicQueryString := 'GRANT ALTER USER TO ' || UserNameIN;
            EXECUTE IMMEDIATE (DynamicQueryString);

            --Grant all object execute privileges to the created user
            FOR Rec IN (SELECT object_name, object_type FROM all_objects WHERE owner='LOMS_MSTR' AND object_type IN ('TABLE','VIEW','PROCEDURE','FUNCTION','PACKAGE')) LOOP

                IF Rec.object_type IN ('TABLE','VIEW') THEN

                    IF UserTypeIN = 'GOD' THEN
                        DynamicQueryString := 'GRANT SELECT, UPDATE, INSERT, DELETE ON LOMS_MSTR.'||Rec.object_name||' TO ' || UPPER(UserNameIN);
                    ELSIF UserTypeIN = 'ADMIN' THEN
                        DynamicQueryString := 'GRANT SELECT, UPDATE, INSERT ON LOMS_MSTR.'||Rec.object_name||' TO ' || UPPER(UserNameIN);
                    ELSE
                        DynamicQueryString := 'GRANT SELECT, UPDATE, INSERT ON LOMS_MSTR.'||Rec.object_name||' TO ' || UPPER(UserNameIN);
                    END IF;

                ELSIF Rec.object_type IN ('PROCEDURE','FUNCTION','PACKAGE') THEN

                    DynamicQueryString := 'GRANT EXECUTE ON LOMS_MSTR.'||Rec.object_name||' TO ' || UPPER(UserNameIN);

                END IF;

                EXECUTE IMMEDIATE DynamicQueryString;

            END LOOP;

        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        -- User name and password created successfully
        ErrorCdOUT  :=  'E4023';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN INVALID_USER_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Insufficient Privileges to Create New User';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END SetUserEnvironment;

    FUNCTION CreateUserName
    (
        FirstNameIN 	      IN      LOMS_EMP_INFO.FIRST_NAME%TYPE,
        LastNameIN	        IN      LOMS_EMP_INFO.LAST_NAME%TYPE
    )
    RETURN LOMS_EMP_INFO.USER_NAME%TYPE
    IS
        UserName                    LOMS_EMP_INFO.USER_NAME%TYPE;
        Incrementer                 NUMBER := 1;
        ErrorCd                     VARCHAR2(100);
        ErrorMsg                    VARCHAR2(2000);
        Counter                     NUMBER;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'CreateUserName';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN

        ErrorCd   :=  'E4024';
        ErrorMsg  :=  'Process Initiated';

        KeyValue  :=  'FirstName: ' || FirstNameIN || ', ' || 'LastName: ' || LastNameIN;

        IF FirstNameIN IS NOT NULL AND LastNameIN IS NOT NULL THEN

            UserName   := TRIM(SUBSTR(FirstNameIN,1,1)) || TRIM(SUBSTR(LastNameIN,1,7));

            SELECT  COUNT(USER_NAME)
            INTO    Counter
            FROM    LOMS_EMP_INFO
            WHERE   UPPER(USER_NAME) = UPPER(UserName);

            WHILE Counter > 0 LOOP
                  UserName := TRIM(SUBSTR(FirstNameIN,1,1)) || TRIM(SUBSTR(LastNameIN,1,7)) || Incrementer;
                  SELECT  COUNT(USER_NAME)
                  INTO    Counter
                  FROM    LOMS_EMP_INFO
                  WHERE   UPPER(USER_NAME) = UPPER(UserName);
                  Incrementer := Incrementer + 1;
            END LOOP;

            RETURN NVL(LOWER(UserName),'');

        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCd   :=  'E4025';
        ErrorMsg  :=  'Processing Successful';

    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCd   :=  'E9999';
            ErrorMsg  :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCd   :=  'E9999';
            ErrorMsg  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCd   :=  'E9999';
            ErrorMsg  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
    END CreateUserName;

    FUNCTION GetUserType
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE
    )
    RETURN LOMS_EMP_INFO.USER_TYPE%TYPE
    IS
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetUserType';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        ErrorCd                     VARCHAR2(50);
        ErrorMsg                    VARCHAR2(500);
        UserType                    LOMS_EMP_INFO.USER_TYPE%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
    BEGIN
        ErrorCd   :=  'E4026';
        ErrorMsg  :=  'Process Initiated';

        KeyValue  := 'UserName: ' || UserNameIN;

        IF UserNameIN IS NOT NULL THEN
            SELECT    UPPER(USER_TYPE)
            INTO      UserType
            FROM      LOMS_EMP_INFO
            WHERE     UPPER(USER_NAME) = UPPER(UserNameIN);
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        IF UPPER(UserNameIN) = 'LOMS_MSTR' THEN
            UserType := 'GOD';
        END IF;

        RETURN UserType;

        ErrorCd   :=  'E4027';
        ErrorMsg  :=  'Processing Successful';

    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCd   :=  'E9999';
            ErrorMsg  :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,NULL,NULL);
            RETURN NULL;
        WHEN NO_DATA_FOUND THEN
            ErrorCd   :=  'E9999';
            ErrorMsg  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,NULL,NULL);
            IF UPPER(UserNameIN) = 'LOMS_MSTR' THEN
                RETURN 'GOD';
            ELSE
                RETURN NULL;
            END IF;
        WHEN OTHERS THEN
            ErrorCd   :=  'E9999';
            ErrorMsg  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
            RETURN NULL;
            IF UPPER(UserNameIN) = 'LOMS_MSTR' THEN
                RETURN 'GOD';
            ELSE
                RETURN NULL;
            END IF;
    END GetUserType;

    PROCEDURE ForgotPassword
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        Answer1IN           IN      VARCHAR2,
        SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        Answer2IN           IN      VARCHAR2,
        EmpPwdOUT           OUT     VARCHAR2,
        FromEmailIDOUT      OUT     VARCHAR2,
        FromEmailPwdOUT     OUT     VARCHAR2,
        ToEmailIdOUT        OUT     VARCHAR2,
        EmailSubjectOUT     OUT     VARCHAR2,
        EmailMsgOUT         OUT     VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        EmpCounter                  NUMBER := 0;
        EmpPwd                      VARCHAR2(25);
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ForgotPassword';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
    BEGIN
        ErrorCdOUT   :=  'E4028';
        ErrorMsgOUT  :=  'Process Initiated';

        KeyValue := 'UserName: ' || UserNameIN;

        IF  UserNameIN  IS NOT NULL AND SecQsn1IN IS NOT NULL AND
            Answer1IN   IS NOT NULL AND SecQsn2IN IS NOT NULL AND
            Answer2IN   IS NOT NULL THEN

            SELECT  COUNT(*)
            INTO    EmpCounter
            FROM    LOMS_EMP_INFO
            WHERE   USER_NAME = UserNameIN;

            IF NVL(EmpCounter,0) > 0 THEN
                -- Get employee password
                SELECT  LOMS_CRYPT_PKG.DecryptData(EMP_PWD)
                INTO    EmpPwd
                FROM    LOMS_EMP_INFO
                WHERE   UPPER(USER_NAME)                            =   UPPER(UserNameIN)
                AND     UPPER(SECURITY_QSN_1)                       =   UPPER(SecQsn1IN)
                AND     UPPER(LOMS_CRYPT_PKG.DecryptData(ANSWER_1)) =   UPPER(Answer1IN)
                AND     UPPER(SECURITY_QSN_2)                       =   UPPER(SecQsn2IN)
                AND     UPPER(LOMS_CRYPT_PKG.DecryptData(ANSWER_2)) =   UPPER(Answer2IN)
                AND     OBSLT_IST IS NULL;

                IF EmpPwd IS NOT NULL THEN
                    -- Employee Password
                    EmpPwdOUT := EmpPwd;
                    -- Send out email id, password, mail subject and mail content
                    LOMS_EMP_PKG.ComposeEmailToEmployee(UserNameIN,'ForgotPassword',FromEmailIDOUT,FromEmailPwdOUT,ToEmailIdOUT,EmailSubjectOUT,EmailMsgOUT,ErrorCdOUT,ErrorMsgOUT);
                ELSE
                    EmpPwdOUT         :=    NULL;
                    FromEmailIDOUT    :=    NULL;
                    FromEmailPwdOUT   :=    NULL;
                    ToEmailIdOUT      :=    NULL;
                    EmailSubjectOUT   :=    NULL;
                    EmailMsgOUT       :=    NULL;
                    ErrorCdOUT        :=    'E9999';
                    ErrorMsgOUT       :=    'Security validation failed. Answer Mismatch';
                END IF;
            ELSE
                RAISE INVALID_INPUT_EXCEPTION;
            END IF;
        END IF;

        ErrorCdOUT   :=  'E4029';
        ErrorMsgOUT  :=  'Processing Successful';

    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Security validation failed. Answer Mismatch';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ForgotPassword;

    PROCEDURE GetSecurityQuestions
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        SecQsn1OUT          OUT     LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        SecQsn2OUT          OUT     LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetSecurityQuestions';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
    BEGIN

        ErrorCdOUT   :=  'E4030';
        ErrorMsgOUT  :=  'Process Initiated';

        KeyValue := 'UserName: ' || UserNameIN;

        IF UserNameIN IS NOT NULL THEN
            SELECT  SECURITY_QSN_1,
                    SECURITY_QSN_2
            INTO    SecQsn1OUT,
                    SecQsn2OUT
            FROM    LOMS_EMP_INFO
            WHERE   USER_NAME = UserNameIN
            AND     OBSLT_IST IS NULL;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT   :=  'E4031';
        ErrorMsgOUT  :=  'Processing Successful';

    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetSecurityQuestions;

    PROCEDURE GetEmailID
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        EmailIDOUT          OUT     LOMS_EMP_INFO.EMAIL_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetEmailIdAndPassword';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
    BEGIN

        ErrorCdOUT   :=  'E4032';
        ErrorMsgOUT  :=  'Process Initiated';

        KeyValue := 'UserName: ' || UserNameIN;

        IF UserNameIN IS NOT NULL THEN
            SELECT  EMAIL_ID
            INTO    EmailIDOUT
            FROM    LOMS_EMP_INFO
            WHERE   USER_NAME = UserNameIN
            AND     OBSLT_IST IS NULL;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT   :=  'E4033';
        ErrorMsgOUT  :=  'Processing Successful';

    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetEmailID;

    PROCEDURE ChangePassword
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        EmpPwdOldIN         IN      VARCHAR2,
        EmpPwdNewIN         IN      VARCHAR2,
        SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        Answer1IN           IN      VARCHAR2,
        SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        Answer2IN           IN      VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        LoggedUserName              VARCHAR2(25);
        DynamicQueryString          VARCHAR2(1000);
        EmpPwd                      VARCHAR2(100);
        SecQsn1                     LOMS_EMP_INFO.SECURITY_QSN_1%TYPE;
        SecQsn2                     LOMS_EMP_INFO.SECURITY_QSN_2%TYPE;
        Answer1                     VARCHAR2(1000);
        Answer2                     VARCHAR2(1000);
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:= 'ChangePassword';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
        INVALID_ANS1_EXCEPTION      EXCEPTION;
        INVALID_ANS2_EXCEPTION      EXCEPTION;
        INVALID_PWD_EXCEPTION       EXCEPTION;
    BEGIN
        ErrorCdOUT   :=  'E4034';
        ErrorMsgOUT  :=  'Process Initiated';

        KeyValue := 'UserName: ' || UserNameIN;

        IF  UserNameIN  IS NOT NULL AND SecQsn1IN   IS NOT NULL AND
            Answer1IN   IS NOT NULL AND SecQsn2IN   IS NOT NULL AND
            Answer2IN   IS NOT NULL AND EmpPwdOldIN IS NOT NULL AND
            EmpPwdNewIN IS NOT NULL THEN
            -- Get Employee Password and Security Questions
            SELECT  LOMS_CRYPT_PKG.DecryptData(EMP_PWD),
                    SECURITY_QSN_1,
                    SECURITY_QSN_2,
                    LOMS_CRYPT_PKG.DecryptData(ANSWER_1),
                    LOMS_CRYPT_PKG.DecryptData(ANSWER_2)
            INTO    EmpPwd,
                    SecQsn1,
                    SecQsn2,
                    Answer1,
                    Answer2
            FROM    LOMS_EMP_INFO
            WHERE   USER_NAME = UserNameIN
            AND     OBSLT_IST IS NULL;

            IF  UPPER(SecQsn1IN) = UPPER(SecQsn1) AND UPPER(SecQsn2IN) = UPPER(SecQsn2) AND
                UPPER(Answer1IN) = UPPER(Answer1) AND UPPER(Answer2IN) = UPPER(Answer2) AND
                EmpPwdOldIN = EmpPwd THEN
                -- Get the logged user name
                SELECT  USER
                INTO    LoggedUserName
                FROM    DUAL;
                -- Grant ALTER USER privilege to the logged user
                DynamicQueryString := 'GRANT ALTER USER TO ' || LoggedUserName;
                EXECUTE IMMEDIATE (DynamicQueryString);
                -- Dynamic query to update the password
                DynamicQueryString := 'ALTER USER ' || UserNameIN || ' IDENTIFIED BY ' || EmpPwdNewIN || ' REPLACE ' || EmpPwdOldIN;
                -- Execute the Dynamic query
                EXECUTE IMMEDIATE (DynamicQueryString);
                -- Update the New password
                UPDATE  LOMS_EMP_INFO
                SET     EMP_PWD   = LOMS_CRYPT_PKG.EncryptData(EmpPwdNewIN)
                WHERE   USER_NAME = UserNameIN
                AND     OBSLT_IST IS NULL;
            ELSE
                IF UPPER(Answer1IN) <> UPPER(Answer1) THEN
                    RAISE INVALID_ANS1_EXCEPTION;
                ELSIF UPPER(Answer2IN) <> UPPER(Answer2) THEN
                    RAISE INVALID_ANS2_EXCEPTION;
                ELSIF EmpPwdOldIN <> EmpPwd THEN
                    RAISE INVALID_PWD_EXCEPTION;
                END IF;
            END IF;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT   :=  'E4030';
        ErrorMsgOUT  :=  'Processing completed Successfully';

    EXCEPTION
        WHEN INVALID_ANS1_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Security Question #1 - Answer Incorrect!!!';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_ANS2_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Security Question #2 - Answer Incorrect!!!';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_PWD_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Old Password was Incorrect!!!';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ChangePassword;

    PROCEDURE ComposeEmailToEmployee
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        EmailMsgTypeIN      IN      VARCHAR2,
        FromEmailIDOUT      OUT     LOMS_APP_MASTER.EMAIL_ID%TYPE,
        FromEmailPwdOUT     OUT     VARCHAR2,
        ToEmailIdOUT        OUT     LOMS_EMP_INFO.EMAIL_ID%TYPE,
        EmailSubjectOUT     OUT     VARCHAR2,
        EmailMsgOUT         OUT     VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        EOL                 CONSTANT  STRING(2) := CHR(13) || CHR(10);
        FirstName           LOMS_EMP_INFO.FIRST_NAME%TYPE;
        EmpID               LOMS_EMP_INFO.EMP_ID%TYPE;
        EmailFlag           VARCHAR2(5);
        EmpPassword         VARCHAR2(250);
        EmailSubject        VARCHAR2(250);
        EmailMsg            VARCHAR2(2000);
        AddressLine         VARCHAR2(10)  := 'Dear ';
        WelcomeLine         VARCHAR2(100) := 'Greetings from LOMS!!!';
        UserAccMsgLine      VARCHAR2(100) := 'Your user account has been created successfully. Please find the login details below,';
        PwdMsgLine          VARCHAR2(100) := 'Your New Password is ';
        CredentialsLine1    VARCHAR2(50)  := 'Employee ID: ';
        CredentialsLine2    VARCHAR2(50)  := 'User Name: ';
        CredentialsLine3    VARCHAR2(50)  := 'Password: ';
        ThanksLine          VARCHAR2(50)  := 'Thank You!!!';
        SignatureLine       VARCHAR2(100) := 'Regards, ' || EOL || 'LOMS';
        DisclaimerLine      VARCHAR2(200) := 'A Product of Sunrays Technology Solutions';
        ProcessName         LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ComposeEmailToEmployee';
        KeyValue            LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN

        ErrorCdOUT   :=  'E4035';
        ErrorMsgOUT  :=  'Process Initiated';

        EmailFlag := LOMS_OFFICE_PKG.CheckIfEmailEnabled;

        IF EmailFlag = 'Y' THEN

            -- Get First Name and Email ID to send Email
            SELECT  FIRST_NAME,
                    EMAIL_ID,
                    EMP_ID,
                    LOMS_CRYPT_PKG.DecryptData(EMP_PWD)
            INTO    FirstName,
                    ToEmailIdOUT,
                    EmpID,
                    EmpPassword
            FROM    LOMS_EMP_INFO
            WHERE   USER_NAME = UserNameIN
            AND     EMAIL_ID IS NOT NULL;

            SELECT  EMAIL_ID,
                    LOMS_CRYPT_PKG.DecryptData(EMAIL_PWD)
            INTO    FromEmailIDOUT,
                    FromEmailPwdOUT
            FROM    LOMS_APP_MASTER;

            IF EmailMsgTypeIN = 'AddEmpInfo' THEN
                --Compose Email
                EmailSubjectOUT := 'LOMS - User Registration Successful';
                --Email Msg
                EmailMsgOUT  := AddressLine     || FirstName || ','              || EOL         || EOL  || WelcomeLine      ||
                                EOL             || EOL       || UserAccMsgLine   || EOL         || EOL  || CredentialsLine1 ||
                                EmpID           || EOL       || CredentialsLine2 || UserNameIN  || EOL  || CredentialsLine3 ||
                                EmpPassword     || EOL       || EOL              || ThanksLine  || EOL  || EOL              ||
                                SignatureLine   || EOL       || DisclaimerLine;
            ELSIF EmailMsgTypeIN = 'ForgotPassword' THEN
                --Compose Email
                EmailSubjectOUT := 'LOMS - Password has been reset successfully';
                --Email Msg
                EmailMsgOUT  := AddressLine || FirstName || ', '       || EOL           || EOL || WelcomeLine    ||
                                EOL         || EOL       || PwdMsgLine || EmpPassword   || EOL || EOL            ||
                                ThanksLine  || EOL       || EOL        || SignatureLine || EOL || DisclaimerLine;
            ELSIF EmailMsgTypeIN = 'ChangePassword' THEN
                --Compose Email
                EmailSubjectOUT := 'LOMS - Password has been changed successfully';
                --Email Msg
                EmailMsgOUT  := AddressLine || FirstName  || ', '       || EOL            || EOL || WelcomeLine     ||
                                EOL         || EOL        || PwdMsgLine || EmpPassword    || EOL || EOL             ||
                                ThanksLine  || EOL        || EOL        || SignatureLine  || EOL || DisclaimerLine;
            END IF;
            IF TRIM(FromEmailIDOUT) IS NULL OR TRIM(FromEmailPwdOUT) IS NULL OR TRIM(ToEmailIdOUT) IS NULL THEN
                FromEmailIDOUT    :=  NULL;
                FromEmailPwdOUT   :=  NULL;
                ToEmailIdOUT      :=  NULL;
                EmailSubjectOUT   :=  NULL;
                EmailMsgOUT       :=  NULL;
            END IF;
        ELSE
              FromEmailIDOUT    :=  NULL;
              FromEmailPwdOUT   :=  NULL;
              ToEmailIdOUT      :=  NULL;
              EmailSubjectOUT   :=  NULL;
              EmailMsgOUT       :=  NULL;
        END IF;

        ErrorCdOUT   :=  'E4036';
        ErrorMsgOUT  :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ComposeEmailToEmployee;

    PROCEDURE UpdateSecurityInfo
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        SecQsn1IN           IN      LOMS_EMP_INFO.SECURITY_QSN_1%TYPE,
        Answer1IN           IN      VARCHAR2,
        SecQsn2IN           IN      LOMS_EMP_INFO.SECURITY_QSN_2%TYPE,
        Answer2IN           IN      VARCHAR2,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'UpdateSecurityInfo';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
    BEGIN
        
        IF  UserNameIN  IS NOT NULL AND SecQsn1IN IS NOT NULL AND
            Answer1IN   IS NOT NULL AND SecQsn2IN IS NOT NULL AND
            Answer2IN   IS NOT NULL THEN
            
            ErrorCdOUT   :=  'E4037';
            ErrorMsgOUT  :=  'Process Initiated';

            KeyValue := 'UserName: ' || UserNameIN;

            UPDATE  LOMS_EMP_INFO
            SET     SECURITY_QSN_1    =   SecQsn1IN,
                    ANSWER_1          =   LOMS_CRYPT_PKG.EncryptData(Answer1IN),
                    SECURITY_QSN_2    =   SecQsn2IN,
                    ANSWER_2          =   LOMS_CRYPT_PKG.EncryptData(Answer2IN)
            WHERE   USER_NAME         =   UserNameIN
            AND     OBSLT_IST IS NULL;
            
            ErrorCdOUT   :=  'E4038';
            ErrorMsgOUT  :=  'Processing Successful';
            
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;
        
    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END UpdateSecurityInfo;

    PROCEDURE UpdateEmailID
    (
        UserNameIN          IN      LOMS_EMP_INFO.USER_NAME%TYPE,
        EmailIDIN           IN      LOMS_EMP_INFO.EMAIL_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'UpdateEmailID';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
    BEGIN

        IF  UserNameIN  IS NOT NULL THEN

            KeyValue := 'UserName: ' || UserNameIN;
            
            ErrorCdOUT   :=  'E4039';
            ErrorMsgOUT  :=  'Process Initiated';

            UPDATE  LOMS_EMP_INFO
            SET     EMAIL_ID            =   EmailIDIN
            WHERE   UPPER(USER_NAME)    =   UPPER(UserNameIN)
            AND     OBSLT_IST IS NULL;
            
            ErrorCdOUT   :=  'E4040';
            ErrorMsgOUT  :=  'Processing Successful';
            
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT   :=  'E9999';
            ErrorMsgOUT  :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END UpdateEmailID;

END LOMS_EMP_PKG;

/

--  DDL for Package Body LOMS_FINANCE_PKG

create or replace
PACKAGE BODY LOMS_FINANCE_PKG AS

    PROCEDURE AddIncExpDetails
    (
        ClientIDIN	        IN      LOMS_INC_EXP_INFO.CLIENT_ID%TYPE,
        CaseIDIN	          IN      LOMS_INC_EXP_INFO.CASE_ID%TYPE,
        PaidAmtIN	          IN      LOMS_INC_EXP_INFO.PAID_AMT%TYPE,
        PaidISTIN	          IN      VARCHAR2,
        PaymntTypeIN	      IN      LOMS_INC_EXP_INFO.PAYMNT_TYPE%TYPE,
        CommentsIN	        IN      LOMS_INC_EXP_INFO.COMMENTS%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    AS
        TransactionID     LOMS_INC_EXP_INFO.TRANSACTION_ID%TYPE;
        GenIST			      LOMS_INC_EXP_INFO.GEN_IST%TYPE;
        GenUserCd		      LOMS_INC_EXP_INFO.GEN_USER_CD%TYPE;
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddIncExpDetails';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        -- Process Begins
        ErrorCdOUT  :=  'E3001';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue := 'ClientID: '    || ClientIDIN  || ', ' || 'CaseID: ' || CaseIDIN || ', ' ||
                    'PaidAmt: '     || PaidAmtIN   || ', ' || 'PaidIST: '|| PaidISTIN|| ', ' ||
                    'PaymntType: '  || PaymntTypeIN;

        -- Generate Transaction ID using sequence
        SELECT  LOMS_TRANS_ID_SEQ.NEXTVAL
        INTO    TransactionID
        FROM    DUAL;

        -- Select the user name
        SELECT  USER
        INTO    GenUserCd
        FROM    DUAL;

        -- Select the sysdate
        SELECT  SYSDATE
        INTO    GenIST
        FROM    DUAL;

        ErrorCdOUT  :=  'E3002';
        ErrorMsgOUT :=  'Adding New Inc / Exp Information';

        -- Attempting data insert
        INSERT INTO LOMS_INC_EXP_INFO( TRANSACTION_ID,
                                              CLIENT_ID,
                                              CASE_ID,
                                              PAID_AMT,
                                              PAID_IST,
                                              PAYMNT_TYPE,
                                              COMMENTS,
                                              GEN_IST,
                                              GEN_USER_CD,
                                              UPD_IST,
                                              UPD_USER_CD)
        VALUES                              ( TransactionID,
                                              UPPER(ClientIDIN),
                                              UPPER(CaseIDIN),
                                              PaidAmtIN,
                                              TO_DATE(PaidISTIN,'DD/MM/YYYY'),
                                              UPPER(PaymntTypeIN),
                                              CommentsIN,
                                              GenIST,
                                              GenUserCd,
                                              GenIST,
                                              GenUserCd);
        -- Error code and msg
        ErrorCdOUT  :=  'E3003';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END AddIncExpDetails;

    PROCEDURE SearchIncExpDetails
    (
        TransactionIdIN     IN      LOMS_INC_EXP_INFO.TRANSACTION_ID%TYPE,
        ClientIdIN          IN      LOMS_INC_EXP_INFO.CLIENT_ID%TYPE,
        CaseIdIN            IN      LOMS_INC_EXP_INFO.CASE_ID%TYPE,
        PaymntTypeIN        IN      LOMS_INC_EXP_INFO.PAYMNT_TYPE%TYPE,
        FromDateIN          IN      VARCHAR2,
        ToDateIN            IN      VARCHAR2,
        IncExpInfoCurOUT    OUT     LOMS_FINANCE_PKG.INC_EXP_INFO_REF_CUR_TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        MasterUserName            VARCHAR2(25);
        ActualUserName            VARCHAR2(25);
        UserType                  LOMS_EMP_INFO.USER_TYPE%TYPE;
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchIncExpDetails';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
        PRIVILEGES_EXCEPTION      EXCEPTION;
    BEGIN

        -- Error code and msg
        ErrorCdOUT  :=  'E3004';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue := 'TransactionId: ' || TransactionIdIN || ', ' || 'ClientId: ' || ClientIdIN || ', ' ||
                    'CaseId: '        || CaseIdIN        || ', ' || 'FromDate: ' || FromDateIN || ', ' ||
                    'ToDate: '        || ToDateIN;

        SELECT  USER
        INTO    ActualUserName
        FROM    DUAL;

        /*
        SELECT  USER_NAME
        INTO    MasterUserName
        FROM    LOMS_CUST_PROFILE;
        */

        MasterUserName := ActualUserName;

        UserType := LOMS_EMP_PKG.GetUserType(ActualUserName);

        IF UPPER(UserType) = 'ADMIN' OR UPPER(UserType) = 'GOD' THEN

            IF TRIM(TransactionIdIN) IS NOT NULL THEN

                ErrorCdOUT  :=  'E3005';
                ErrorMsgOUT :=  'Attempting data fetch using Transaction ID';

                OPEN IncExpInfoCurOUT FOR
                    SELECT  TRANSACTION_ID,
                            CLIENT_ID,
                            CASE_ID,
                            PAID_AMT,
                            PAID_IST,
                            PAYMNT_TYPE,
                            COMMENTS
                    FROM    LOMS_INC_EXP_INFO
                    WHERE   TRANSACTION_ID LIKE '%' || TransactionIdIN || '%';

            ELSIF TRIM(ClientIdIN) IS NOT NULL THEN

                ErrorCdOUT  :=  'E3006';
                ErrorMsgOUT :=  'Attempting data fetch using Client ID';

                OPEN IncExpInfoCurOUT FOR
                    SELECT  TRANSACTION_ID,
                            CLIENT_ID,
                            CASE_ID,
                            PAID_AMT,
                            PAID_IST,
                            PAYMNT_TYPE,
                            COMMENTS
                    FROM    LOMS_INC_EXP_INFO
                    WHERE   UPPER(CLIENT_ID) LIKE '%' || UPPER(ClientIdIN) || '%';

            ELSIF TRIM(CaseIdIN) IS NOT NULL THEN

                ErrorCdOUT  :=  'E3007';
                ErrorMsgOUT :=  'Attempting data fetch using Case ID';

                OPEN IncExpInfoCurOUT FOR
                    SELECT  TRANSACTION_ID,
                            CLIENT_ID,
                            CASE_ID,
                            PAID_AMT,
                            PAID_IST,
                            PAYMNT_TYPE,
                            COMMENTS
                    FROM    LOMS_INC_EXP_INFO
                    WHERE   UPPER(CASE_ID) LIKE '%' || UPPER(CaseIdIN) || '%';

            ELSIF TRIM(PaymntTypeIN) IS NOT NULL THEN

                ErrorCdOUT  :=  'E3008';
                ErrorMsgOUT :=  'Attempting data fetch using Payment Type';

                OPEN IncExpInfoCurOUT FOR
                    SELECT  TRANSACTION_ID,
                            CLIENT_ID,
                            CASE_ID,
                            PAID_AMT,
                            PAID_IST,
                            PAYMNT_TYPE,
                            COMMENTS
                    FROM    LOMS_INC_EXP_INFO
                    WHERE   UPPER(PAYMNT_TYPE) LIKE '%' || UPPER(PaymntTypeIN) || '%';
            
            ELSIF TRIM(FromDateIN) IS NOT NULL AND TRIM(ToDateIN) IS NOT NULL THEN

                ErrorCdOUT  :=  'E3009';
                ErrorMsgOUT :=  'Attempting data fetch using date range';

                OPEN IncExpInfoCurOUT FOR
                    SELECT  TRANSACTION_ID,
                            CLIENT_ID,
                            CASE_ID,
                            PAID_AMT,
                            PAID_IST,
                            PAYMNT_TYPE,
                            COMMENTS
                    FROM    LOMS_INC_EXP_INFO
                    WHERE   TRUNC(GEN_IST) >= TO_DATE(FromDateIN,'DD/MM/YYYY')
                    AND     TRUNC(GEN_IST) <= TO_DATE(ToDateIN,'DD/MM/YYYY');

            ELSE
                RAISE INVALID_INPUT_EXCEPTION;
            END IF;

        ELSE
            RAISE PRIVILEGES_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E3010';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN PRIVILEGES_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'User - ' || ActualUserName || ' does not has sufficient privileges to view this information';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_CURSOR THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Cursor Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Input Data Not Found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END SearchIncExpDetails;

    PROCEDURE DeleteIncExpDetails
    (
        TransactionIdIN     IN      LOMS_INC_EXP_INFO.TRANSACTION_ID%TYPE,
        ClientIdIN          IN      LOMS_INC_EXP_INFO.CLIENT_ID%TYPE,
        CaseIdIN            IN      LOMS_INC_EXP_INFO.CASE_ID%TYPE,
        ErrorCdOUT          OUT     VARCHAR2,
        ErrorMsgOUT         OUT     VARCHAR2
    )
    IS
        MasterUserName            VARCHAR2(20);
        ActualUserName            VARCHAR2(20);
        UserType                  LOMS_EMP_INFO.USER_TYPE%TYPE;
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteIncExpDetails';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
        PRIVILEGES_EXCEPTION      EXCEPTION;
    BEGIN

        ErrorCdOUT  :=  'E3011';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue := 'TransactionId: ' || TransactionIdIN || ', ' ||  'ClientId: ' || ClientIdIN || ', ' ||
                    'CaseId: '        || CaseIdIN;

        SELECT  USER
        INTO    ActualUserName
        FROM    DUAL;

        UserType := LOMS_EMP_PKG.GetUserType(ActualUserName);

        IF UPPER(UserType) = 'ADMIN' OR UPPER(UserType) = 'GOD' THEN

            IF TransactionIdIN IS NOT NULL THEN

                ErrorCdOUT  :=  'E3012';
                ErrorMsgOUT :=  'Attempting delete using Transaction ID';

                DELETE FROM LOMS_INC_EXP_INFO
                WHERE       TRANSACTION_ID = TransactionIdIN;

            ELSIF ClientIdIN IS NOT NULL THEN

                ErrorCdOUT  :=  'E3013';
                ErrorMsgOUT :=  'Attempting delete using Client ID';

                DELETE FROM LOMS_INC_EXP_INFO
                WHERE       UPPER(CLIENT_ID) = UPPER(ClientIdIN);

            ELSIF CaseIdIN IS NOT NULL THEN

                ErrorCdOUT  :=  'E3014';
                ErrorMsgOUT :=  'Attempting delete using Case ID';

                DELETE FROM LOMS_INC_EXP_INFO
                WHERE       UPPER(CASE_ID) = UPPER(CaseIdIN);

            ELSE
                RAISE INVALID_INPUT_EXCEPTION;
            END IF;

        ELSE
            RAISE PRIVILEGES_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E3015';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN PRIVILEGES_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'User - ' || ActualUserName || ' does not has sufficient privileges to delete this information';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Input Data Not Found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END DeleteIncExpDetails;

END LOMS_FINANCE_PKG;

/

--  DDL for Package Body LOMS_OFFICE_PKG

CREATE OR REPLACE
PACKAGE BODY LOMS_OFFICE_PKG IS

      PROCEDURE AddClientInfo
      (
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          TelNoIN               IN        LOMS_CLIENT_INFO.TEL_NO%TYPE,
          MobNoIN               IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          EmailIDIN             IN        LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          PermAddressIN         IN        LOMS_CLIENT_INFO.PERM_ADDRESS%TYPE,
          TempAddressIN         IN        LOMS_CLIENT_INFO.TEMP_ADDRESS%TYPE,
          OrgNameIN             IN        LOMS_CLIENT_INFO.ORG_NAME%TYPE,
          OrgAddressIN          IN        LOMS_CLIENT_INFO.ORG_ADDRESS%TYPE,
          OrgTelNoIN            IN        LOMS_CLIENT_INFO.ORG_TEL_NO%TYPE,
          OrgMobIN              IN        LOMS_CLIENT_INFO.ORG_MOBILE%TYPE,
          PanNoIN               IN        LOMS_CLIENT_INFO.PAN_NO%TYPE,
          TinNoIN               IN        LOMS_CLIENT_INFO.TIN_NO%TYPE,
          ProfessionIN          IN        LOMS_CLIENT_INFO.PROFESSION%TYPE,
          DobIN                 IN        VARCHAR2,
          GenderIN              IN        LOMS_CLIENT_INFO.GENDER%TYPE,
          CommentsIN            IN        LOMS_CLIENT_INFO.COMMENTS%TYPE,
          ClientIDOUT		        OUT       LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          ErrorCdOUT		        OUT       VARCHAR2,
          ErrorMsgOUT		        OUT       VARCHAR2
      )
      IS
          -- Local variables
          TmpClientID		  LOMS_CLIENT_INFO.CLIENT_ID%TYPE;
          GenIST			    LOMS_CLIENT_INFO.GEN_IST%TYPE;
          GenUserCd		    LOMS_CLIENT_INFO.GEN_USER_CD%TYPE;
          ProcessName     LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddClientInfo';
          KeyValue        LOMS_AUDIT_INFO.KEY_VALUE%TYPE;

      BEGIN
          -- Process Begins
          ErrorCdOUT  :=  'E1001';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'FirstName: ' || FirstNameIN || ', ' || 'LastName: ' || LastNameIN;

          -- Generate Temporary Client ID using sequence
          SELECT  LOMS_CLI_CLIENT_ID_SEQ.NEXTVAL
          INTO    TmpClientID
          FROM    DUAL;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          -- Actual Client ID
          ClientIDOUT  :=  TO_CHAR('CL'||TmpClientID);

          -- Error Code and Msg
          ErrorCdOUT  :=  'E1002';
          ErrorMsgOUT :=  'Adding New Client Information';

          -- Attempting data insert
          INSERT INTO LOMS_CLIENT_INFO( CLIENT_ID,
                                        FIRST_NAME,
                                        LAST_NAME,
                                        GENDER,
                                        TEL_NO,
                                        MOBILE_NO,
                                        EMAIL_ID,
                                        PERM_ADDRESS,
                                        TEMP_ADDRESS,
                                        ORG_NAME,
                                        ORG_ADDRESS,
                                        ORG_TEL_NO,
                                        ORG_MOBILE,
                                        PAN_NO,
                                        TIN_NO,
                                        USER_ID,
                                        PROFESSION,
                                        DOB,
                                        COMMENTS,
                                        GEN_IST,
                                        GEN_USER_CD,
                                        UPD_IST,
                                        UPD_USER_CD)
          VALUES                       (ClientIDOUT,
                                        FirstNameIN,
                                        LastNameIN,
                                        GenderIN,
                                        TelNoIN,
                                        MobNoIN,
                                        LOWER(EmailIDIN),
                                        PermAddressIN,
                                        TempAddressIN,
                                        OrgNameIN,
                                        OrgAddressIN,
                                        OrgTelNoIN,
                                        OrgMobIN,
                                        PanNoIN,
                                        TinNoIN,
                                        LOWER(EmailIDIN),
                                        ProfessionIN,
                                        TO_DATE(DobIN,'DD/MM/YYYY'),
                                        CommentsIN,
                                        GenIST,
                                        GenUserCd,
                                        GenIST,
                                        GenUserCd);

          -- Error code and msg
          ErrorCdOUT  :=  'E1003';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_CURSOR THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Cursor';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Input Data Not Found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddClientInfo;

      PROCEDURE ModifyClientInfo
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          TelNoIN               IN        LOMS_CLIENT_INFO.TEL_NO%TYPE,
          MobNoIN               IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          EmailIDIN             IN        LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          PermAddressIN         IN        LOMS_CLIENT_INFO.PERM_ADDRESS%TYPE,
          TempAddressIN         IN        LOMS_CLIENT_INFO.TEMP_ADDRESS%TYPE,
          OrgNameIN             IN        LOMS_CLIENT_INFO.ORG_NAME%TYPE,
          OrgAddressIN          IN        LOMS_CLIENT_INFO.ORG_ADDRESS%TYPE,
          OrgTelNoIN            IN        LOMS_CLIENT_INFO.ORG_TEL_NO%TYPE,
          OrgMobIN              IN        LOMS_CLIENT_INFO.ORG_MOBILE%TYPE,
          PanNoIN               IN        LOMS_CLIENT_INFO.PAN_NO%TYPE,
          TinNoIN               IN        LOMS_CLIENT_INFO.TIN_NO%TYPE,
          ProfessionIN          IN        LOMS_CLIENT_INFO.PROFESSION%TYPE,
          DobIN                 IN        VARCHAR2,
          GenderIN              IN        LOMS_CLIENT_INFO.GENDER%TYPE,
          CommentsIN            IN        LOMS_CLIENT_INFO.COMMENTS%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      AS
          UpdIST			      LOMS_CLIENT_INFO.UPD_IST%TYPE;
          UpdUserCd		      LOMS_CLIENT_INFO.UPD_USER_CD%TYPE;
          ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyClientInfo';
          KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN
          -- Process begins
          ErrorCdOUT  :=  'E1004';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'ClientID: ' || ClientIDIN || ', ' || 'FirstName: ' || FirstNameIN || ', ' ||
                      'LastName: ' || LastNameIN;

          -- Select the user name
          SELECT  USER
          INTO    UpdUserCd
          FROM    DUAL;

          -- Select the date and time
          SELECT  SYSDATE
          INTO    UpdIST
          FROM    DUAL;

          ErrorCdOUT  :=  'E1005';
          ErrorMsgOUT :=  'Attempting data update';

          UPDATE  LOMS_CLIENT_INFO
          SET     FIRST_NAME          =     FirstNameIN,
                  LAST_NAME           =     LastNameIN,
                  TEL_NO              =     TelNoIN,
                  MOBILE_NO           =     MobNoIN,
                  EMAIL_ID            =     LOWER(EmailIDIN),
                  PERM_ADDRESS        =     PermAddressIN,
                  TEMP_ADDRESS        =     TempAddressIN,
                  ORG_NAME            =     OrgNameIN,
                  ORG_ADDRESS         =     OrgAddressIN,
                  ORG_TEL_NO          =     OrgTelNoIN,
                  ORG_MOBILE          =     OrgMobIN,
                  PAN_NO              =     PanNoIN,
                  TIN_NO              =     TinNoIN,
                  PROFESSION          =     ProfessionIN,
                  DOB                 =     TO_DATE(DobIN,'DD/MM/YYYY'),
                  GENDER              =     GenderIN,
                  COMMENTS            =     CommentsIN,
                  UPD_IST             =     UpdIST,
                  UPD_USER_CD         =     UpdUserCd
          WHERE   UPPER(CLIENT_ID)    =     UPPER(ClientIDIN);

          ErrorCdOUT  :=  'E1006';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data Found For Update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END ModifyClientInfo;

      PROCEDURE SearchClientInfo
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          MobileNoIN            IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          PanNoIN               IN        LOMS_CLIENT_INFO.PAN_NO%TYPE,
          TinNoIN               IN        LOMS_CLIENT_INFO.TIN_NO%TYPE,
          ClientInfoCurOUT      OUT       LOMS_OFFICE_PKG.CLIENT_INFO_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      AS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchClientInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          KeyValue := 'ClientID: ' || ClientIDIN || ', ' || 'FirstName: ' || FirstNameIN || ', ' ||
                      'LastName: ' || LastNameIN || ', ' || 'MobileNo: '  || MobileNoIN  || ', ' ||
                      'PanNoIN: '  || PanNoIN    || ', ' || 'TinNo: '     || TinNoIN;

          IF ClientIDIN IS NOT NULL THEN

              ErrorCdOUT  :=  'E1007';
              ErrorMsgOUT :=  'Attempting data fetch using Client ID';

              OPEN ClientInfoCurOUT FOR
                  SELECT  CLIENT_ID,
                          FIRST_NAME,
                          LAST_NAME,
                          GENDER,
                          TEL_NO,
                          MOBILE_NO,
                          EMAIL_ID,
                          PERM_ADDRESS,
                          TEMP_ADDRESS,
                          ORG_NAME,
                          ORG_ADDRESS,
                          ORG_TEL_NO,
                          ORG_MOBILE,
                          PAN_NO,
                          TIN_NO,
                          PROFESSION,
                          DOB,
                          COMMENTS
                  FROM    LOMS_CLIENT_INFO
                  WHERE   UPPER(CLIENT_ID) LIKE '%' || UPPER(ClientIDIN) || '%';

          ELSIF MobileNoIN IS NOT NULL THEN

              ErrorCdOUT  :=  'E1008';
              ErrorMsgOUT :=  'Attempting data fetch using Mobile Number';

              OPEN ClientInfoCurOUT FOR
                  SELECT  CLIENT_ID,
                          FIRST_NAME,
                          LAST_NAME,
                          GENDER,
                          TEL_NO,
                          MOBILE_NO,
                          EMAIL_ID,
                          PERM_ADDRESS,
                          TEMP_ADDRESS,
                          ORG_NAME,
                          ORG_ADDRESS,
                          ORG_TEL_NO,
                          ORG_MOBILE,
                          PAN_NO,
                          TIN_NO,
                          PROFESSION,
                          DOB,
                          COMMENTS
                  FROM    LOMS_CLIENT_INFO
                  WHERE   MOBILE_NO LIKE '%' || MobileNoIN || '%';

          ELSIF PanNoIN IS NOT NULL THEN

              ErrorCdOUT  :=  'E1009';
              ErrorMsgOUT :=  'Attempting data fetch using Pan Number';

              OPEN ClientInfoCurOUT FOR
                  SELECT  CLIENT_ID,
                          FIRST_NAME,
                          LAST_NAME,
                          GENDER,
                          TEL_NO,
                          MOBILE_NO,
                          EMAIL_ID,
                          PERM_ADDRESS,
                          TEMP_ADDRESS,
                          ORG_NAME,
                          ORG_ADDRESS,
                          ORG_TEL_NO,
                          ORG_MOBILE,
                          PAN_NO,
                          TIN_NO,
                          PROFESSION,
                          DOB,
                          COMMENTS
                  FROM    LOMS_CLIENT_INFO
                  WHERE   UPPER(PAN_NO) LIKE '%' || UPPER(PanNoIN) || '%';

          ELSIF TinNoIN IS NOT NULL THEN

              ErrorCdOUT  :=  'E1010';
              ErrorMsgOUT :=  'Attempting data fetch using Tin Number';

              OPEN ClientInfoCurOUT FOR
                  SELECT  CLIENT_ID,
                          FIRST_NAME,
                          LAST_NAME,
                          GENDER,
                          TEL_NO,
                          MOBILE_NO,
                          EMAIL_ID,
                          PERM_ADDRESS,
                          TEMP_ADDRESS,
                          ORG_NAME,
                          ORG_ADDRESS,
                          ORG_TEL_NO,
                          ORG_MOBILE,
                          PAN_NO,
                          TIN_NO,
                          PROFESSION,
                          DOB,
                          COMMENTS
                  FROM    LOMS_CLIENT_INFO
                  WHERE   UPPER(TIN_NO) LIKE '%' || UPPER(TinNoIN) || '%';

          ELSIF FirstNameIN IS NOT NULL THEN

              ErrorCdOUT  :=  'E1011';
              ErrorMsgOUT :=  'Attempting data fetch using First Name';

              OPEN ClientInfoCurOUT FOR
                  SELECT  CLIENT_ID,
                          FIRST_NAME,
                          LAST_NAME,
                          GENDER,
                          TEL_NO,
                          MOBILE_NO,
                          EMAIL_ID,
                          PERM_ADDRESS,
                          TEMP_ADDRESS,
                          ORG_NAME,
                          ORG_ADDRESS,
                          ORG_TEL_NO,
                          ORG_MOBILE,
                          PAN_NO,
                          TIN_NO,
                          PROFESSION,
                          DOB,
                          COMMENTS
                  FROM    LOMS_CLIENT_INFO
                  WHERE   UPPER(FIRST_NAME)  LIKE   '%' || UPPER(FirstNameIN) || '%';

          ELSIF LastNameIN IS NOT NULL THEN

              ErrorCdOUT  :=  'E1012';
              ErrorMsgOUT :=  'Attempting data fetch using Last Name';

              OPEN ClientInfoCurOUT FOR
                  SELECT  CLIENT_ID,
                          FIRST_NAME,
                          LAST_NAME,
                          GENDER,
                          TEL_NO,
                          MOBILE_NO,
                          EMAIL_ID,
                          PERM_ADDRESS,
                          TEMP_ADDRESS,
                          ORG_NAME,
                          ORG_ADDRESS,
                          ORG_TEL_NO,
                          ORG_MOBILE,
                          PAN_NO,
                          TIN_NO,
                          PROFESSION,
                          DOB,
                          COMMENTS
                  FROM    LOMS_CLIENT_INFO
                  WHERE   UPPER(LAST_NAME)   LIKE   '%' || UPPER(LastNameIN) || '%';

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1013';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchClientInfo;

      PROCEDURE DeleteClientInfo
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteClientInfo';
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN

          ErrorCdOUT  :=  'E1014';
          ErrorMsgOUT :=  'Process Initiated';

          IF TRIM(ClientIDIN) IS NOT NULL THEN
              DELETE FROM LOMS_CLIENT_INFO
              WHERE TRIM(UPPER(CLIENT_ID)) = TRIM(UPPER(ClientIDIN));
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1015';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DeleteClientInfo;

      PROCEDURE AddCaseInfo
      (
          ClientIdIN	          IN	      LOMS_CASE_INFO.CLIENT_ID%TYPE,
          CaseTypeIN	          IN	      LOMS_CASE_INFO.CASE_TYPE%TYPE,
          CaseSubType1IN	      IN	      LOMS_CASE_INFO.CASE_SUB_TYPE_1%TYPE,
          CaseSubType2IN	      IN	      LOMS_CASE_INFO.CASE_SUB_TYPE_2%TYPE,
          CaseNo1IN	            IN	      LOMS_CASE_INFO.CASE_NO_1%TYPE,
          CaseNo2IN	            IN	      LOMS_CASE_INFO.CASE_NO_2%TYPE,
          CaseNo3IN	            IN	      LOMS_CASE_INFO.CASE_NO_3%TYPE,
          CaseNo4IN	            IN	      LOMS_CASE_INFO.CASE_NO_4%TYPE,
          CaseNo5IN	            IN	      LOMS_CASE_INFO.CASE_NO_5%TYPE,
          CaseNo6IN	            IN	      LOMS_CASE_INFO.CASE_NO_6%TYPE,
          CourtDetailsIN	      IN	      LOMS_CASE_INFO.COURT_DETAILS%TYPE,
          CasePriorityIN	      IN	      LOMS_CASE_INFO.CASE_PRIORITY%TYPE,
          CaseStatusIN	        IN	      LOMS_CASE_INFO.CASE_STATUS%TYPE,
          JudgmntDtIN	          IN	      VARCHAR2,
          CaseCommentsIN	      IN	      LOMS_CASE_INFO.CASE_COMMENTS%TYPE,
          CaseIdOUT	            OUT	      LOMS_CASE_INFO.CASE_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddCaseInfo';
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          GenIST			                LOMS_CLIENT_INFO.GEN_IST%TYPE;
          GenUserCd		                LOMS_CLIENT_INFO.GEN_USER_CD%TYPE;
          TmpCaseId                   LOMS_CASE_INFO.CASE_ID%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN

          ErrorCdOUT  :=  'E1016';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'ClientID: ' || ClientIDIN  || ', ' || 'CaseType: ' || CaseTypeIN || ', ' || 'CaseSubType: ' || CaseSubType1IN || ' / ' || CaseSubType2IN || ', ' ||
                      'CaseNo: ' || CaseNo1IN;

          -- Generate Temporary Case ID using sequence
          SELECT  LOMS_CI_CASE_ID_SEQ.NEXTVAL
          INTO    TmpCaseID
          FROM    DUAL;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          -- Actual Case ID (System Generated)
          CaseIDOUT  :=  TO_CHAR('CID'||TmpCaseID);

          ErrorCdOUT  :=  'E1017';
          ErrorMsgOUT :=  'Adding New Case Information';

          INSERT INTO LOMS_CASE_INFO( CASE_ID,
                                      CLIENT_ID,
                                      CASE_TYPE,
                                      CASE_SUB_TYPE_1,
                                      CASE_SUB_TYPE_2,
                                      CASE_NO_1,
                                      CASE_NO_2,
                                      CASE_NO_3,
                                      CASE_NO_4,
                                      CASE_NO_5,
                                      CASE_NO_6,
                                      COURT_DETAILS,
                                      CASE_PRIORITY,
                                      CASE_STATUS,
                                      JUDGMNT_DT,
                                      CASE_COMMENTS,
                                      GEN_IST,
                                      GEN_USER_CD,
                                      UPD_IST,
                                      UPD_USER_CD)
          VALUES                     (CaseIDOUT,
                                      ClientIdIN,
                                      CaseTypeIN,
                                      CaseSubType1IN,
                                      CaseSubType2IN,
                                      CaseNo1IN,
                                      CaseNo2IN,
                                      CaseNo3IN,
                                      CaseNo4IN,
                                      CaseNo5IN,
                                      CaseNo6IN,
                                      CourtDetailsIN,
                                      CasePriorityIN,
                                      CaseStatusIN,
                                      TO_DATE(JudgmntDtIN,'DD/MM/YYYY'),
                                      CaseCommentsIN,
                                      GenIST,
                                      GenUserCd,
                                      GenIST,
                                      GenUserCd);

          ErrorCdOUT  :=  'E1018';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddCaseInfo;

      PROCEDURE ModifyCaseInfo
      (
          CaseIdIN	            IN	      LOMS_CASE_INFO.CASE_ID%TYPE,
          ClientIdIN	          IN	      LOMS_CASE_INFO.CLIENT_ID%TYPE,
          CaseTypeIN	          IN	      LOMS_CASE_INFO.CASE_TYPE%TYPE,
          CaseSubType1IN	      IN	      LOMS_CASE_INFO.CASE_SUB_TYPE_1%TYPE,
          CaseSubType2IN	      IN	      LOMS_CASE_INFO.CASE_SUB_TYPE_2%TYPE,
          CaseNo1IN	            IN	      LOMS_CASE_INFO.CASE_NO_1%TYPE,
          CaseNo2IN	            IN	      LOMS_CASE_INFO.CASE_NO_2%TYPE,
          CaseNo3IN	            IN	      LOMS_CASE_INFO.CASE_NO_3%TYPE,
          CaseNo4IN	            IN	      LOMS_CASE_INFO.CASE_NO_4%TYPE,
          CaseNo5IN	            IN	      LOMS_CASE_INFO.CASE_NO_5%TYPE,
          CaseNo6IN	            IN	      LOMS_CASE_INFO.CASE_NO_6%TYPE,
          CourtDetailsIN	      IN	      LOMS_CASE_INFO.COURT_DETAILS%TYPE,
          CasePriorityIN	      IN	      LOMS_CASE_INFO.CASE_PRIORITY%TYPE,
          CaseStatusIN	        IN	      LOMS_CASE_INFO.CASE_STATUS%TYPE,
          JudgmntDtIN	          IN	      VARCHAR2,
          CaseCommentsIN	      IN	      LOMS_CASE_INFO.CASE_COMMENTS%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          UpdIST			      LOMS_CASE_INFO.UPD_IST%TYPE;
          UpdUserCd		      LOMS_CASE_INFO.UPD_USER_CD%TYPE;
          ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyCaseInfo';
          KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN
          -- Process begins
          ErrorCdOUT  :=  'E1019';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'ClientID: ' || ClientIDIN || ', ' || 'CaseId: ' || CaseIdIN ;

          -- Select the user name
          SELECT  USER
          INTO    UpdUserCd
          FROM    DUAL;

          -- Select the date and time
          SELECT  SYSDATE
          INTO    UpdIST
          FROM    DUAL;

          ErrorCdOUT  :=  'E1020';
          ErrorMsgOUT :=  'Attempting data update';

          UPDATE  LOMS_CASE_INFO
          SET     CLIENT_ID           =     TRIM(ClientIdIN),
                  CASE_TYPE           =     TRIM(CaseTypeIN),
                  CASE_SUB_TYPE_1     =     TRIM(CaseSubType1IN),
                  CASE_SUB_TYPE_2     =     TRIM(CaseSubType2IN),
                  CASE_NO_1           =     TRIM(CaseNo1IN),
                  CASE_NO_2           =     TRIM(CaseNo2IN),
                  CASE_NO_3           =     TRIM(CaseNo3IN),
                  CASE_NO_4           =     TRIM(CaseNo4IN),
                  CASE_NO_5           =     TRIM(CaseNo5IN),
                  CASE_NO_6           =     TRIM(CaseNo6IN),
                  COURT_DETAILS       =     TRIM(CourtDetailsIN),
                  CASE_PRIORITY       =     TRIM(CasePriorityIN),
                  CASE_STATUS         =     TRIM(CaseStatusIN),
                  JUDGMNT_DT          =     TO_DATE(TRIM(JudgmntDtIN),'DD/MM/YYYY'),
                  CASE_COMMENTS       =     TRIM(CaseCommentsIN),
                  UPD_IST             =     UpdIST,
                  UPD_USER_CD         =     UpdUserCd
          WHERE   UPPER(CASE_ID)      =     UPPER(CaseIdIN);

          ErrorCdOUT  :=  'E1021';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data Found For Update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END ModifyCaseInfo;

      PROCEDURE SearchCaseInfo
      (
          CaseIdIN	            IN	      LOMS_CASE_INFO.CASE_ID%TYPE,
          ClientIdIN	          IN	      LOMS_CASE_INFO.CLIENT_ID%TYPE,
          CaseTypeIN	          IN	      LOMS_CASE_INFO.CASE_TYPE%TYPE,
          CaseNoIN              IN        LOMS_CASE_INFO.CASE_NO_1%TYPE,
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          MobileNoIN            IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          EmailIdIN             IN        LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          CourtIdIN             IN        LOMS_COURT_INFO.COURT_ID%TYPE,
          CaseInfoCurOUT        OUT       LOMS_OFFICE_PKG.CASE_INFO_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          EOL                       CONSTANT  STRING(2) := CHR(13) || CHR(10);
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchCaseInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          KeyValue := 'ClientID: ' || ClientIDIN  || ', ' || 'CaseId: '      || CaseIdIN       || ', ' ||
                      'CaseType: ' || CaseTypeIN  || ', ' || 'CaseNo: '      || CaseNoIN       || ', ' ||
                      'FirstName: '|| FirstNameIN || ', ' || 'LastName: '    || LastNameIN     || ', ' ||
                      'MobileNo: ' || MobileNoIN;

          IF TRIM(CaseIdIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1022';
              ErrorMsgOUT :=  'Attempting data fetch using Case ID';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     (UPPER(T2.CASE_ID) LIKE ('%' || TRIM(UPPER(CaseIdIN)) || '%'))
                  AND       T1.CLIENT_ID = T2.CLIENT_ID
                  AND       T3.COURT_ID = T2.COURT_DETAILS;

          ELSIF TRIM(ClientIdIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1023';
              ErrorMsgOUT :=  'Attempting data fetch using Client ID';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     (UPPER(T2.CLIENT_ID) LIKE ('%' || TRIM(UPPER(ClientIdIN)) || '%'))
                  AND       T1.CLIENT_ID = T2.CLIENT_ID
                  AND       T3.COURT_ID = T2.COURT_DETAILS;

          ELSIF TRIM(CaseTypeIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1024';
              ErrorMsgOUT :=  'Attempting data fetch using Case Type';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     ((UPPER(T2.CASE_TYPE) LIKE ('%' || TRIM(UPPER(CaseTypeIN)) || '%')) OR (UPPER(T2.CASE_SUB_TYPE_1) LIKE ('%' || TRIM(UPPER(CaseTypeIN)) || '%')) OR (UPPER(T2.CASE_SUB_TYPE_2) LIKE ('%' || TRIM(UPPER(CaseTypeIN)) || '%')))
                  AND       T1.CLIENT_ID = T2.CLIENT_ID
                  AND       T3.COURT_ID = T2.COURT_DETAILS;

          ELSIF TRIM(CaseNoIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1025';
              ErrorMsgOUT :=  'Attempting data fetch using Case No';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     ((UPPER(T2.CASE_NO_1) LIKE ('%' || TRIM(UPPER(CaseNoIN)) || '%')) OR (UPPER(T2.CASE_NO_2) LIKE ('%' || TRIM(UPPER(CaseNoIN)) || '%')) OR (UPPER(T2.CASE_NO_3) LIKE ('%' || TRIM(UPPER(CaseNoIN)) || '%')) OR (UPPER(T2.CASE_NO_4) LIKE ('%' || TRIM(UPPER(CaseNoIN)) || '%')) OR (UPPER(T2.CASE_NO_5) LIKE ('%' || TRIM(UPPER(CaseNoIN)) || '%')) OR (UPPER(T2.CASE_NO_6) LIKE ('%' || TRIM(UPPER(CaseNoIN)) || '%')))
                  AND       T1.CLIENT_ID = T2.CLIENT_ID
                  AND       T3.COURT_ID = T2.COURT_DETAILS;

          ELSIF TRIM(FirstNameIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1026';
              ErrorMsgOUT :=  'Attempting data fetch using First Name';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     UPPER(T1.FIRST_NAME) LIKE '%' || UPPER(FirstNameIN) || '%'
                  AND       T2.CLIENT_ID = T1.CLIENT_ID
                  AND       T3.COURT_ID = T2.COURT_DETAILS;

          ELSIF TRIM(LastNameIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1027';
              ErrorMsgOUT :=  'Attempting data fetch using Last Name';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     (UPPER(T1.LAST_NAME) LIKE ('%' || UPPER(LastNameIN) || '%'))
                  AND       T2.CLIENT_ID = T1.CLIENT_ID
                  AND       T3.COURT_ID = T2.COURT_DETAILS;

          ELSIF TRIM(MobileNoIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1028';
              ErrorMsgOUT :=  'Attempting data fetch using Mobile No';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     (UPPER(T1.MOBILE_NO) LIKE ('%' || UPPER(MobileNoIN) || '%'))
                  AND       T2.CLIENT_ID = T1.CLIENT_ID
                  AND       T3.COURT_ID = T2.COURT_DETAILS;

          ELSIF TRIM(EmailIdIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1029';
              ErrorMsgOUT :=  'Attempting data fetch using Email ID';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     (UPPER(T1.EMAIL_ID) LIKE ('%' || UPPER(EmailIdIN) || '%'))
                  AND       T2.CLIENT_ID = T1.CLIENT_ID
                  AND       T3.COURT_ID = T2.COURT_DETAILS;

          ELSIF TRIM(CourtIdIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1030';
              ErrorMsgOUT :=  'Attempting data fetch using Court ID';

              OPEN CaseInfoCurOUT FOR
                  SELECT    T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T2.JUDGMNT_DT,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3
                  WHERE     T2.COURT_DETAILS LIKE '%' || CourtIdIN || '%'
                  AND       T3.COURT_ID = T2.COURT_DETAILS
                  AND       T1.CLIENT_ID = T2.CLIENT_ID;

          ELSE
                RAISE INVALID_INPUT_EXCEPTION;
          END IF;

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchCaseInfo;

      PROCEDURE SearchCaseInfoForUpdate
      (
          CaseIdIN	            IN	      LOMS_CASE_INFO.CASE_ID%TYPE,
          CaseInfoCurOUT        OUT       LOMS_OFFICE_PKG.CASE_INFO_UPD_REF_CUR_TYPE,
          OppInfoCurOUT         OUT       LOMS_OFFICE_PKG.OPP_INFO_UPD_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchCaseInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          KeyValue := 'CaseId: ' || CaseIdIN;

          ErrorCdOUT  :=  'E1031';
          ErrorMsgOUT :=  'Process Initiated';

          IF TRIM(CaseIdIN) IS NOT NULL THEN
              -- Case Information
              OPEN CaseInfoCurOUT FOR
                  SELECT  CASE_ID,
                          CLIENT_ID,
                          CASE_TYPE,
                          CASE_SUB_TYPE_1,
                          CASE_SUB_TYPE_2,
                          CASE_NO_1,
                          CASE_NO_2,
                          CASE_NO_3,
                          CASE_NO_4,
                          CASE_NO_5,
                          CASE_NO_6,
                          COURT_DETAILS,
                          CASE_PRIORITY,
                          CASE_STATUS,
                          JUDGMNT_DT,
                          CASE_COMMENTS
                  FROM    LOMS_CASE_INFO
                  WHERE   CASE_ID = CaseIdIN;
              -- Opponent Information
              OPEN OppInfoCurOUT FOR
                  SELECT  OPPONENT_NO,
                          CASE_ID,
                          CLIENT_ID,
                          OPP_PARTY_NAME,
                          OPP_PARTY_ADDRESS,
                          OPP_PARTY_TEL_NO,
                          OPP_PARTY_MOB_NO,
                          OPP_PARTY_EMAIL_ID,
                          OPP_PARTY_ORG_NAME,
                          OPP_PARTY_ORG_REP,
                          OPP_PARTY_ORG_ADDRESS,
                          OPP_PARTY_ORG_TEL_NO,
                          OPP_PARTY_ORG_MOB_NO,
                          OPP_PARTY_ORG_EMAIL_ID,
                          OPP_LAWYER_NAME,
                          OPP_LAWYER_ADDRESS,
                          OPP_LAWYER_TEL_NO,
                          OPP_LAWYER_MOB_NO,
                          OPP_LAWYER_EMAIL_ID
                  FROM    LOMS_OPPONENT_INFO
                  WHERE   TRIM(UPPER(CASE_ID)) = UPPER(CaseIdIN);
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1032';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchCaseInfoForUpdate;

      PROCEDURE AddOpponentInfo
      (
          CaseIdIN	                  IN	      LOMS_OPPONENT_INFO.CASE_ID%TYPE,
          ClientIdIN	                IN	      LOMS_OPPONENT_INFO.CLIENT_ID%TYPE,
          OppPartyNameIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_NAME%TYPE,
          OppPartyAddressIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ADDRESS%TYPE,
          OppPartyTelNoIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_TEL_NO%TYPE,
          OppPartyMobNoIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_MOB_NO%TYPE,
          OppPartyEmailIdIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_EMAIL_ID%TYPE,
          OppPartyOrgNameIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_NAME%TYPE,
          OppPartyOrgRepNameIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_REP%TYPE,
          OppPartyOrgAddressIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_ADDRESS%TYPE,
          OppPartyOrgTelNoIN	        IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_TEL_NO%TYPE,
          OppPartyOrgMobNoIN	        IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_MOB_NO%TYPE,
          OppPartyOrgEmailIdIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_EMAIL_ID%TYPE,
          OppPartyLawyerNameIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_NAME%TYPE,
          OppPartyLawyerAddressIN	    IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_ADDRESS%TYPE,
          OppPartyLawyerTelNoIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_TEL_NO%TYPE,
          OppPartyLawyerMobNoIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_MOB_NO%TYPE,
          OppPartyLawyerEmailIdIN	    IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_EMAIL_ID%TYPE,
          ErrorCdOUT                  OUT       VARCHAR2,
          ErrorMsgOUT                 OUT       VARCHAR2
      )
      IS
          OpponentNo                  LOMS_OPPONENT_INFO.OPPONENT_NO%TYPE;
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddOpponentInfo';
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          GenIST			                LOMS_OPPONENT_INFO.GEN_IST%TYPE;
          GenUserCd		                LOMS_OPPONENT_INFO.GEN_USER_CD%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN

          ErrorCdOUT  :=  'E1033';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'ClientID: ' || ClientIDIN  || ', ' || 'CaseId: ' || CaseIdIN ;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          --Select the Opponent No
          SELECT  LOMS_OI_OPP_ID_SEQ.NEXTVAL
          INTO    OpponentNo
          FROM    DUAL;

          INSERT INTO LOMS_OPPONENT_INFO( OPPONENT_NO,
                                          CASE_ID,
                                          CLIENT_ID,
                                          OPP_PARTY_NAME,
                                          OPP_PARTY_ADDRESS,
                                          OPP_PARTY_TEL_NO,
                                          OPP_PARTY_MOB_NO,
                                          OPP_PARTY_EMAIL_ID,
                                          OPP_PARTY_ORG_NAME,
                                          OPP_PARTY_ORG_REP,
                                          OPP_PARTY_ORG_ADDRESS,
                                          OPP_PARTY_ORG_TEL_NO,
                                          OPP_PARTY_ORG_MOB_NO,
                                          OPP_PARTY_ORG_EMAIL_ID,
                                          OPP_LAWYER_NAME,
                                          OPP_LAWYER_ADDRESS,
                                          OPP_LAWYER_TEL_NO,
                                          OPP_LAWYER_MOB_NO,
                                          OPP_LAWYER_EMAIL_ID,
                                          GEN_IST,
                                          GEN_USER_CD,
                                          UPD_IST,
                                          UPD_USER_CD)
          VALUES                         (OpponentNo,
                                          CaseIdIN,
                                          ClientIdIN,
                                          OppPartyNameIN,
                                          OppPartyAddressIN,
                                          OppPartyTelNoIN,
                                          OppPartyMobNoIN,
                                          OppPartyEmailIdIN,
                                          OppPartyOrgNameIN,
                                          OppPartyOrgRepNameIN,
                                          OppPartyOrgAddressIN,
                                          OppPartyOrgTelNoIN,
                                          OppPartyOrgMobNoIN,
                                          OppPartyOrgEmailIdIN,
                                          OppPartyLawyerNameIN,
                                          OppPartyLawyerAddressIN,
                                          OppPartyLawyerTelNoIN,
                                          OppPartyLawyerMobNoIN,
                                          OppPartyLawyerEmailIdIN,
                                          GenIST,
                                          GenUserCd,
                                          GenIST,
                                          GenUserCd);

          ErrorCdOUT  :=  'E1034';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddOpponentInfo;

      PROCEDURE ModifyOpponentInfo
      (
          OpponentNoIN                IN        LOMS_OPPONENT_INFO.OPPONENT_NO%TYPE,
          CaseIdIN	                  IN	      LOMS_OPPONENT_INFO.CASE_ID%TYPE,
          ClientIdIN	                IN	      LOMS_OPPONENT_INFO.CLIENT_ID%TYPE,
          OppPartyNameIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_NAME%TYPE,
          OppPartyAddressIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ADDRESS%TYPE,
          OppPartyTelNoIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_TEL_NO%TYPE,
          OppPartyMobNoIN	            IN	      LOMS_OPPONENT_INFO.OPP_PARTY_MOB_NO%TYPE,
          OppPartyEmailIdIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_EMAIL_ID%TYPE,
          OppPartyOrgNameIN	          IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_NAME%TYPE,
          OppPartyOrgRepNameIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_REP%TYPE,
          OppPartyOrgAddressIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_ADDRESS%TYPE,
          OppPartyOrgTelNoIN	        IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_TEL_NO%TYPE,
          OppPartyOrgMobNoIN	        IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_MOB_NO%TYPE,
          OppPartyOrgEmailIdIN	      IN	      LOMS_OPPONENT_INFO.OPP_PARTY_ORG_EMAIL_ID%TYPE,
          OppPartyLawyerNameIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_NAME%TYPE,
          OppPartyLawyerAddressIN	    IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_ADDRESS%TYPE,
          OppPartyLawyerTelNoIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_TEL_NO%TYPE,
          OppPartyLawyerMobNoIN	      IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_MOB_NO%TYPE,
          OppPartyLawyerEmailIdIN	    IN	      LOMS_OPPONENT_INFO.OPP_LAWYER_EMAIL_ID%TYPE,
          ErrorCdOUT                  OUT       VARCHAR2,
          ErrorMsgOUT                 OUT       VARCHAR2
      )
      IS
          UpdIST			      LOMS_CASE_INFO.UPD_IST%TYPE;
          UpdUserCd		      LOMS_CASE_INFO.UPD_USER_CD%TYPE;
          ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyOpponentInfo';
          KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN

          -- Process begins
          ErrorCdOUT  :=  'E1035';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'ClientID: ' || ClientIDIN || ', ' || 'CaseId: ' || CaseIdIN ;

          -- Select the user name
          SELECT  USER
          INTO    UpdUserCd
          FROM    DUAL;

          -- Select the date and time
          SELECT  SYSDATE
          INTO    UpdIST
          FROM    DUAL;

          ErrorCdOUT  :=  'E1036';
          ErrorMsgOUT :=  'Attempting data update';

          UPDATE  LOMS_OPPONENT_INFO
          SET     CASE_ID                 =     UPPER(TRIM(CaseIdIN)),
                  CLIENT_ID               =     TRIM(ClientIdIN),
                  OPP_PARTY_NAME          =     TRIM(OppPartyNameIN),
                  OPP_PARTY_ADDRESS       =     TRIM(OppPartyAddressIN),
                  OPP_PARTY_TEL_NO        =     TRIM(OppPartyTelNoIN),
                  OPP_PARTY_MOB_NO        =     TRIM(OppPartyMobNoIN),
                  OPP_PARTY_EMAIL_ID      =     TRIM(OppPartyEmailIdIN),
                  OPP_PARTY_ORG_NAME      =     TRIM(OppPartyOrgNameIN),
                  OPP_PARTY_ORG_REP       =     TRIM(OppPartyOrgRepNameIN),
                  OPP_PARTY_ORG_ADDRESS   =     TRIM(OppPartyOrgAddressIN),
                  OPP_PARTY_ORG_TEL_NO    =     TRIM(OppPartyOrgTelNoIN),
                  OPP_PARTY_ORG_MOB_NO    =     TRIM(OppPartyOrgMobNoIN),
                  OPP_PARTY_ORG_EMAIL_ID  =     TRIM(OppPartyOrgEmailIdIN),
                  OPP_LAWYER_NAME         =     TRIM(OppPartyLawyerNameIN),
                  OPP_LAWYER_ADDRESS      =     TRIM(OppPartyLawyerAddressIN),
                  OPP_LAWYER_TEL_NO       =     TRIM(OppPartyLawyerTelNoIN),
                  OPP_LAWYER_MOB_NO       =     TRIM(OppPartyLawyerMobNoIN),
                  OPP_LAWYER_EMAIL_ID     =     TRIM(OppPartyLawyerEmailIdIN),
                  UPD_USER_CD             =     TRIM(UpdUserCd),
                  UPD_IST                 =     TRIM(UpdIST)
          WHERE   TRIM(OPPONENT_NO)       =     TRIM(OpponentNoIN);

          ErrorCdOUT  :=  'E1037';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data Found For Update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END ModifyOpponentInfo;

      PROCEDURE DeleteCaseAndOpponentInfo
      (
          CaseIdIN	            IN	      LOMS_CASE_INFO.CASE_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          CaseNo                      LOMS_CASE_INFO.CASE_NO_1%TYPE;
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteCaseAndOpponentInfo';
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN
          ErrorCdOUT  :=  'E1038';
          ErrorMsgOUT :=  'Process Initiated';

          IF TRIM(CaseIdIN) IS NOT NULL THEN

              DELETE FROM LOMS_OPPONENT_INFO
              WHERE TRIM(UPPER(CASE_ID)) = TRIM(UPPER(CaseIdIN));

              DELETE FROM LOMS_CASE_INFO
              WHERE TRIM(UPPER(CASE_ID)) = TRIM(UPPER(CaseIdIN));

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1039';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DeleteCaseAndOpponentInfo;

      PROCEDURE AddCaseHearingInfo
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          CaseIDIN              IN        LOMS_CASE_HEARING_INFO.CASE_ID%TYPE,
          HearingDateIN         IN        VARCHAR2,
          HearingCommentsIN     IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_COMMENTS%TYPE,
          CaseHearingIDOUT      OUT       LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      AS
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddCaseHearingInfo';
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          GenIST			                LOMS_CLIENT_INFO.GEN_IST%TYPE;
          GenUserCd		                LOMS_CLIENT_INFO.GEN_USER_CD%TYPE;
          CaseHearingID               LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN

          ErrorCdOUT  :=  'E1040';
          ErrorMsgOUT :=  'Fetching the Case ID';

          KeyValue    :=  'ClientID: '    || ClientIDIN     || ', ' || 'CaseID: ' || CaseIDIN || ', ' ||
                          'HearingDate: ' || HearingDateIN;

          ErrorCdOUT  :=  'E1041';
          ErrorMsgOUT :=  'Fetching the Client ID';

          IF ClientIDIN IS NOT NULL AND CaseIDIN IS NOT NULL THEN

              -- Generating case hearing ID using sequence
              SELECT  LOMS_CHI_CH_ID_SEQ.NEXTVAL
              INTO    CaseHearingIDOUT
              FROM    DUAL;

              -- Selecting the date and time of update
              SELECT  SYSDATE
              INTO    GenIST
              FROM    DUAL;

              -- Selecting the user trying to update
              SELECT  USER
              INTO    GenUserCd
              FROM    DUAL;

              ErrorCdOUT  :=  'E1042';
              ErrorMsgOUT :=  'Attempting data insert';

              -- Attempting data insert
              INSERT INTO LOMS_CASE_HEARING_INFO (CASE_HEARING_ID,
                                                  CASE_ID,
                                                  CLIENT_ID,
                                                  CASE_HEARING_DATE,
                                                  CASE_HEARING_COMMENTS,
                                                  GEN_IST,
                                                  GEN_USER_CD,
                                                  UPD_IST,
                                                  UPD_USER_CD)
              VALUES                             (CaseHearingIDOUT,
                                                  CaseIDIN,
                                                  ClientIDIN,
                                                  TO_DATE(HearingDateIN,'DD/MM/YYYY'),
                                                  HearingCommentsIN,
                                                  GenIST,
                                                  GenUserCd,
                                                  GenIST,
                                                  GenUserCd);

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1043';
          ErrorMsgOUT :=  'Processing Successful';

       EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Search found no records for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Search returns no data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddCaseHearingInfo;

      PROCEDURE SearchCaseHearingInfo
      (
          CaseHearingIdIN       IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          CaseHearingCurOUT     OUT       LOMS_OFFICE_PKG.CASE_HEARING_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchCaseHearingInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN
          ErrorCdOUT  :=  'E1044';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue    :=  'CaseHearingID: ' || CaseHearingIdIN;

          IF TRIM(CaseHearingIdIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1045';
              ErrorMsgOUT :=  'Search hearing data using Case Hearing ID';

              OPEN CaseHearingCurOUT FOR
                  SELECT  CASE_HEARING_ID,
                          CASE_ID,
                          CLIENT_ID,
                          CASE_HEARING_DATE,
                          CASE_HEARING_COMMENTS
                  FROM    LOMS_CASE_HEARING_INFO
                  WHERE   UPPER(CASE_HEARING_ID) LIKE '%' || CaseHearingIdIN || '%';

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1046';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Search returns no data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchCaseHearingInfo;

      PROCEDURE SearchCaseHearingInfoGeneric
      (
          ClientIDIN            IN        LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          FirstNameIN           IN        LOMS_CLIENT_INFO.FIRST_NAME%TYPE,
          LastNameIN            IN        LOMS_CLIENT_INFO.LAST_NAME%TYPE,
          MobileNoIN            IN        LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          EmailIdIN             IN        LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          CaseIDIN              IN        LOMS_CASE_HEARING_INFO.CASE_ID%TYPE,
          CaseHearingCurOUT     OUT       LOMS_OFFICE_PKG.CASE_HEARING_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchCaseHearingInfoGeneric';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN
          ErrorCdOUT  :=  'E1047';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue    :=  'ClientID: ' || ClientIDIN  || ', ' || 'FirstName: '  || FirstNameIN  || ', ' ||
                          'LastName: ' || LastNameIN  || ', ' || 'MobileNo: '   || MobileNoIN   || ', ' ||
                          'EmailId: '  || EmailIdIN   || ', ' || 'CaseId: '     || CaseIDIN;

          IF TRIM(ClientIDIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1048';
              ErrorMsgOUT :=  'Search hearing data using Client Id';

              OPEN CaseHearingCurOUT FOR
                  SELECT  CASE_HEARING_ID,
                          CASE_ID,
                          CLIENT_ID,
                          CASE_HEARING_DATE,
                          CASE_HEARING_COMMENTS
                  FROM    LOMS_CASE_HEARING_INFO
                  WHERE   UPPER(CLIENT_ID) LIKE '%' || ClientIDIN || '%';

          ELSIF TRIM(FirstNameIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1049';
              ErrorMsgOUT :=  'Search hearing data using First Name';

              OPEN CaseHearingCurOUT FOR
                  SELECT  T1.CASE_HEARING_ID,
                          T1.CASE_ID,
                          T1.CLIENT_ID,
                          T1.CASE_HEARING_DATE,
                          T1.CASE_HEARING_COMMENTS
                  FROM    LOMS_CASE_HEARING_INFO T1,
                          LOMS_CLIENT_INFO T2
                  WHERE   UPPER(T2.FIRST_NAME) LIKE '%' || UPPER(FirstNameIN) || '%'
                  AND     UPPER(T1.CLIENT_ID) = UPPER(T2.CLIENT_ID);

          ELSIF TRIM(LastNameIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1050';
              ErrorMsgOUT :=  'Search hearing data using Last Name';

              OPEN CaseHearingCurOUT FOR
                  SELECT  T1.CASE_HEARING_ID,
                          T1.CASE_ID,
                          T1.CLIENT_ID,
                          T1.CASE_HEARING_DATE,
                          T1.CASE_HEARING_COMMENTS
                  FROM    LOMS_CASE_HEARING_INFO T1,
                          LOMS_CLIENT_INFO T2
                  WHERE   UPPER(T2.LAST_NAME) LIKE '%' || UPPER(LastNameIN) || '%'
                  AND     UPPER(T1.CLIENT_ID) = UPPER(T2.CLIENT_ID);

          ELSIF TRIM(MobileNoIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1051';
              ErrorMsgOUT :=  'Search hearing data using Mobile No';

              OPEN CaseHearingCurOUT FOR
                  SELECT  T1.CASE_HEARING_ID,
                          T1.CASE_ID,
                          T1.CLIENT_ID,
                          T1.CASE_HEARING_DATE,
                          T1.CASE_HEARING_COMMENTS
                  FROM    LOMS_CASE_HEARING_INFO T1,
                          LOMS_CLIENT_INFO T2
                  WHERE   UPPER(T2.MOBILE_NO) LIKE '%' || UPPER(MobileNoIN) || '%'
                  AND     UPPER(T1.CLIENT_ID) = UPPER(T2.CLIENT_ID);

          ELSIF TRIM(EmailIdIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1052';
              ErrorMsgOUT :=  'Search hearing data using Email ID';

              OPEN CaseHearingCurOUT FOR
                  SELECT  T1.CASE_HEARING_ID,
                          T1.CASE_ID,
                          T1.CLIENT_ID,
                          T1.CASE_HEARING_DATE,
                          T1.CASE_HEARING_COMMENTS
                  FROM    LOMS_CASE_HEARING_INFO T1,
                          LOMS_CLIENT_INFO T2
                  WHERE   UPPER(T2.EMAIL_ID) LIKE '%' || UPPER(EmailIdIN) || '%'
                  AND     UPPER(T1.CLIENT_ID) = UPPER(T2.CLIENT_ID);

          ELSIF TRIM(CaseIdIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1053';
              ErrorMsgOUT :=  'Search hearing data using Case No';

              OPEN CaseHearingCurOUT FOR
                  SELECT  T1.CASE_HEARING_ID,
                          T1.CASE_ID,
                          T1.CLIENT_ID,
                          T1.CASE_HEARING_DATE,
                          T1.CASE_HEARING_COMMENTS
                  FROM    LOMS_CASE_HEARING_INFO T1
                  WHERE   UPPER(T1.CASE_ID) LIKE '%' || UPPER(CaseIdIN) || '%';

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1054';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Search returns no data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchCaseHearingInfoGeneric;

      PROCEDURE DeleteCaseHearingInfo
      (
          CaseHearingIDIN       IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteCaseHearingInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          ErrorCdOUT  :=  'E1055';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'CaseHearingID: ' || CaseHearingIDIN;

          IF CaseHearingIDIN IS NOT NULL THEN
              DELETE FROM LOMS_CASE_HEARING_INFO
              WHERE CASE_HEARING_ID = CaseHearingIDIN;
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1056';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Search returns no data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DeleteCaseHearingInfo;

      PROCEDURE ModifyCaseHearingInfo
      (
          CaseHearingIDIN       IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          ClientIDIN            IN        LOMS_CASE_HEARING_INFO.CLIENT_ID%TYPE,
          CaseIDIN              IN        LOMS_CASE_HEARING_INFO.CASE_ID%TYPE,
          HearingDateIN         IN        VARCHAR2,
          HearingCommentsIN     IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_COMMENTS%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      AS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyCaseHearingInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          UpdIST			              LOMS_CASE_HEARING_INFO.UPD_IST%TYPE;
          UpdUserCd		              LOMS_CASE_HEARING_INFO.UPD_USER_CD%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          KeyValue    :=  'ClientID: '     || ClientIDIN     || ', ' || 'CaseID: '       || CaseIDIN        || ', ' ||
                          'HearingDate: '  || HearingDateIN  || ', ' || 'CaseHearingID: '|| CaseHearingIDIN;

          ErrorCdOUT  :=  'E1057';
          ErrorMsgOUT :=  'Attempting data update';

          IF TRIM(ClientIDIN) IS NOT NULL AND TRIM(CaseIDIN) IS NOT NULL AND TRIM(CaseHearingIDIN) IS NOT NULL THEN
              UPDATE    LOMS_CASE_HEARING_INFO
              SET       CASE_HEARING_DATE       =   TO_DATE(HearingDateIN,'DD/MM/YYYY'),
                        CASE_HEARING_COMMENTS   =   HearingCommentsIN,
                        CASE_ID                 =   UPPER(CaseIDIN),
                        CLIENT_ID               =   UPPER(ClientIDIN)
              WHERE     CASE_HEARING_ID         =   CaseHearingIDIN;
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1058';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END ModifyCaseHearingInfo;

      PROCEDURE AddClientFamilyInfo
      (
          ClientIDIN	            IN        LOMS_CLIENT_FAMILY_INFO.CLIENT_ID%TYPE,
          RelnNameIN	            IN        LOMS_CLIENT_FAMILY_INFO.RELN_NAME%TYPE,
          RelnTypeIN	            IN        LOMS_CLIENT_FAMILY_INFO.RELN_TYPE%TYPE,
          RelnDobIN	              IN        VARCHAR2,
          RelnMobNoIN	            IN        LOMS_CLIENT_FAMILY_INFO.RELN_MOB_NO%TYPE,
          RelnTelNoIN	            IN        LOMS_CLIENT_FAMILY_INFO.RELN_TEL_NO%TYPE,
          RelnAddressIN	          IN        LOMS_CLIENT_FAMILY_INFO.RELN_ADDRESS%TYPE,
          RelnGenderIN	          IN        LOMS_CLIENT_FAMILY_INFO.RELN_GENDER%TYPE,
          RelnMaritalStatusIN	    IN        LOMS_CLIENT_FAMILY_INFO.RELN_MARITAL_STATUS%TYPE,
          RelnDomIN	              IN        VARCHAR2,
          CommentsIN	            IN        LOMS_CLIENT_FAMILY_INFO.COMMENTS%TYPE,
          ErrorCdOUT              OUT       VARCHAR2,
          ErrorMsgOUT             OUT       VARCHAR2
      )
      AS
          -- Local Variables
          GenIST			            LOMS_CLIENT_INFO.GEN_IST%TYPE;
          GenUserCd		            LOMS_CLIENT_INFO.GEN_USER_CD%TYPE;
          ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddClientFamilyInfo';
          KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN
          -- Process Begins
          ErrorCdOUT  :=  'E1059';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue    :=  'ClientID: '    || ClientIDIN    || ', ' || 'RelnName: '   || RelnNameIN  || ', ' ||
                          'RelnType: '    || RelnTypeIN    || ', ' || 'RelnDob: '    || RelnDobIN   || ', ' ||
                          'RelnMobNo: '   || RelnMobNoIN   || ', ' || 'RelnTelNo: '  || RelnTelNoIN || ', ' ||
                          'RelnGender: '  || RelnGenderIN;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          -- Error Code and Msg
          ErrorCdOUT  :=  'E1060';
          ErrorMsgOUT :=  'Adding Client Family Information';

          -- Attempting data insert
          INSERT INTO LOMS_CLIENT_FAMILY_INFO(CLIENT_ID,
                                              RELN_NAME,
                                              RELN_TYPE,
                                              RELN_DOB,
                                              RELN_MOB_NO,
                                              RELN_TEL_NO,
                                              RELN_ADDRESS,
                                              RELN_GENDER,
                                              RELN_MARITAL_STATUS,
                                              RELN_DOM,
                                              COMMENTS,
                                              GEN_IST,
                                              GEN_USER_CD,
                                              UPD_IST,
                                              UPD_USER_CD)
          VALUES                             (ClientIDIN,
                                              RelnNameIN,
                                              UPPER(RelnTypeIN),
                                              TO_DATE(RelnDobIN,'DD/MM/YYYY'),
                                              RelnMobNoIN,
                                              RelnTelNoIN,
                                              RelnAddressIN,
                                              UPPER(RelnGenderIN),
                                              UPPER(RelnMaritalStatusIN),
                                              TO_DATE(RelnDomIN,'DD/MM/YYYY'),
                                              CommentsIN,
                                              GenIST,
                                              GenUserCd,
                                              GenIST,
                                              GenUserCd);
          -- Error code and msg
          ErrorCdOUT  :=  'E1061';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddClientFamilyInfo;

      PROCEDURE SearchClientFamilyInfo
      (
          ClientIDIN                IN        LOMS_CLIENT_FAMILY_INFO.CLIENT_ID%TYPE,
          ClientFamilyInfoCurOUT    OUT       LOMS_OFFICE_PKG.CLIENT_FAM_INFO_REF_CUR_TYPE,
          ErrorCdOUT                OUT       VARCHAR2,
          ErrorMsgOUT               OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchClientFamilyInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN
          -- Process Begins
          ErrorCdOUT  :=  'E1062';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue    :=  'ClientID: ' || ClientIDIN;

          IF ClientIDIN IS NOT NULL THEN
              OPEN ClientFamilyInfoCurOUT FOR
                  SELECT  CLIENT_ID,
                          RELN_NAME,
                          RELN_TYPE,
                          RELN_DOB,
                          RELN_MOB_NO,
                          RELN_TEL_NO,
                          RELN_ADDRESS,
                          RELN_GENDER,
                          RELN_MARITAL_STATUS,
                          RELN_DOM,
                          COMMENTS
                  FROM    LOMS_CLIENT_FAMILY_INFO
                  WHERE   UPPER(CLIENT_ID) = UPPER(ClientIDIN);
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT    :=  'E1063';
          ErrorMsgOUT   :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Invalid Input';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchClientFamilyInfo;

      PROCEDURE DeleteClientFamilyInfo
      (
          ClientIDIN        IN        LOMS_CLIENT_FAMILY_INFO.CLIENT_ID%TYPE,
          RelnNameIN        IN        LOMS_CLIENT_FAMILY_INFO.RELN_NAME%TYPE,
          RelnTypeIN        IN        LOMS_CLIENT_FAMILY_INFO.RELN_TYPE%TYPE,
          ErrorCdOUT        OUT       VARCHAR2,
          ErrorMsgOUT       OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteClientFamilyInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          -- Process Begins
          ErrorCdOUT  :=  'E1064';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue    :=  'ClientID: ' || ClientIDIN || ', ' || 'RelnName: ' || RelnNameIN || ', ' ||
                          'RelnType: ' || RelnTypeIN;

          IF ClientIDIN IS NOT NULL AND RelnNameIN IS NOT NULL AND RelnTypeIN IS NOT NULL THEN
              DELETE  FROM LOMS_CLIENT_FAMILY_INFO
              WHERE   CLIENT_ID         =   ClientIDIN
              AND     UPPER(RELN_NAME)  =   UPPER(RelnNameIN)
              AND     UPPER(RELN_TYPE)  =   UPPER(RelnTypeIN);
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT    :=  'E1065';
          ErrorMsgOUT   :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Invalid Input';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DeleteClientFamilyInfo;

      PROCEDURE UploadCaseDocument
      (
          CaseIDIN            IN        LOMS_CASE_DOC_INFO.CASE_ID%TYPE,
          ClientIDIN          IN        LOMS_CASE_DOC_INFO.CLIENT_ID%TYPE,
          DocFolderIN         IN        VARCHAR2,
          DocNameIN           IN        LOMS_CASE_DOC_INFO.DOC_NAME%TYPE,
          CommentsIN          IN        LOMS_CASE_DOC_INFO.COMMENTS%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      )
      IS
          DocumentID              LOMS_CASE_DOC_INFO.DOC_ID%TYPE;
          DynamicQueryString      VARCHAR2(1000);
          SourceFile              BFILE;
          DestinationFile         BLOB;
          FileLength              BINARY_INTEGER;
          GenIST			            LOMS_CASE_DOC_INFO.GEN_IST%TYPE;
          GenUserCd		            LOMS_CASE_DOC_INFO.GEN_USER_CD%TYPE;
          ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'UploadCaseDocument';
          KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN

          ErrorCdOUT  :=  'E1066';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'CaseID: ' || CaseIDIN  || ', ' || 'ClientID: ' || ClientIDIN || ', ' ||
                      'DocName: '|| DocNameIN;

          SELECT  LOMS_CD_DOC_ID_SEQ.NEXTVAL
          INTO    DocumentID
          FROM    DUAL;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          --Create Document Folder
          DynamicQueryString  := 'GRANT CREATE ANY DIRECTORY TO ' || GenUserCd;
          EXECUTE IMMEDIATE (DynamicQueryString);
          DynamicQueryString  := 'CREATE OR REPLACE DIRECTORY LOMS_IMAGES_UPLOAD AS ' || CHR(39) || DocFolderIN || CHR(39);
          EXECUTE IMMEDIATE (DynamicQueryString);

          SourceFile := bfilename('LOMS_IMAGES_UPLOAD', DocNameIN);

          -- insert a NULL record to lock
          INSERT INTO LOMS_CASE_DOC_INFO( DOC_ID,
                                          CASE_ID,
                                          CLIENT_ID,
                                          DOC_NAME,
                                          COMMENTS,
                                          ACTUAL_DOC,
                                          GEN_IST,
                                          GEN_USER_CD,
                                          UPD_IST,
                                          UPD_USER_CD)
          VALUES                        ( DocumentID,
                                          CaseIDIN,
                                          ClientIDIN,
                                          DocNameIN,
                                          CommentsIN,
                                          EMPTY_BLOB(),
                                          GenIST,
                                          GenUserCd,
                                          GenIST,
                                          GenUserCd)
          RETURNING ACTUAL_DOC INTO DestinationFile;

          -- lock record
          SELECT    ACTUAL_DOC
          INTO      DestinationFile
          FROM      LOMS_CASE_DOC_INFO
          WHERE     DOC_ID = DocumentID
          FOR UPDATE;

          -- Open the file
          dbms_lob.fileopen(SourceFile, dbms_lob.file_readonly);

          -- Determine length
          FileLength := dbms_lob.getlength(SourceFile);

          -- read the file
          dbms_lob.loadfromfile(DestinationFile, SourceFile, FileLength);

          -- Update the blob field
          UPDATE  LOMS_CASE_DOC_INFO
          SET     ACTUAL_DOC = DestinationFile
          WHERE   DOC_ID = DocumentID;

          dbms_lob.fileclose(SourceFile);

          --dbms_output.put_line('I am here # 5');

          ErrorCdOUT  :=  'E1067';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END UploadCaseDocument;

      PROCEDURE DownloadCaseDocument
      (
        DocIDIN             IN        LOMS_CASE_DOC_INFO.DOC_ID%TYPE,
        ErrorCdOUT          OUT       VARCHAR2,
        ErrorMsgOUT         OUT       VARCHAR2
      )
      IS

          OutputFile        utl_file.file_type;
          ActualDoc         BLOB;
          DocumentName      VARCHAR2(1000);
          ChunkSize         constant pls_integer := 4096;
          buf               raw (4096);
          WrittenSoFar      pls_integer := 0;
          BytesToWrite      pls_integer;
          LobLength         pls_integer;
          ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DownloadCaseDocument';
          KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;

      BEGIN

          ErrorCdOUT  :=  'E1068';
          ErrorMsgOUT :=  'Process Initiated';

          SELECT  ACTUAL_DOC
          INTO    ActualDoc
          FROM    LOMS_CASE_DOC_INFO
          WHERE   DOC_ID = DocIdIN;

          LobLength := dbms_lob.getlength(ActualDoc);

          SELECT  DOC_NAME
          INTO    DocumentName
          FROM    LOMS_CASE_DOC_INFO
          WHERE   DOC_ID = DocIdIN;

          OutputFile := utl_file.fopen('LOMS_IMAGES_DOWNLOAD', DocumentName, 'WB');

          while WrittenSoFar + ChunkSize < LobLength loop

              BytesToWrite := ChunkSize;

              dbms_lob.read(ActualDoc, BytesToWrite, WrittenSoFar + 1, buf);

              utl_file.put_raw(OutputFile, buf);

              WrittenSoFar := WrittenSoFar + ChunkSize;

          end loop;

          BytesToWrite := LobLength - WrittenSoFar;

          dbms_lob.read(ActualDoc,BytesToWrite, WrittenSoFar + 1, buf);

          utl_file.put_raw(OutputFile,buf);

          utl_file.fclose(OutputFile);

          ErrorCdOUT  :=  'E1069';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DownloadCaseDocument;

      PROCEDURE SearchCaseDocument
      (
          DocIDIN                 IN        LOMS_CASE_DOC_INFO.DOC_ID%TYPE,
          CaseIDIN                IN        LOMS_CASE_DOC_INFO.CASE_ID%TYPE,
          ClientIDIN              IN        LOMS_CASE_DOC_INFO.CLIENT_ID%TYPE,
          DocNameIN               IN        LOMS_CASE_DOC_INFO.DOC_NAME%TYPE,
          FromDateIN              IN        VARCHAR2,
          ToDateIN                IN        VARCHAR2,
          CaseDocInfoCurOUT       OUT       LOMS_OFFICE_PKG.CASE_DOC_INFO_REF_CUR_TYPE,
          ErrorCdOUT              OUT       VARCHAR2,
          ErrorMsgOUT             OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchCaseDocument';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN
          ErrorCdOUT    :=  'E1070';
          ErrorMsgOUT   :=  'Processing Input Data';

          KeyValue      :=  'DocID: '     || DocIDIN     || ', ' || 'CaseID: '   || CaseIDIN  || ', ' ||
                            'ClientID: '  || ClientIDIN  || ', ' || 'DocName: '  || DocNameIN || ', ' ||
                            'FromDate: '  || FromDateIN  || ', ' || 'ToDate: '   || ToDateIN;

          IF DocIDIN IS NOT NULL THEN

              ErrorCdOUT    :=  'E1071';
              ErrorMsgOUT   :=  'Searching data based on Document ID';

              OPEN CaseDocInfoCurOUT FOR
                  SELECT  DOC_ID,
                          CASE_ID,
                          CLIENT_ID,
                          DOC_NAME,
                          COMMENTS
                  FROM    LOMS_CASE_DOC_INFO
                  WHERE   DOC_ID LIKE '%' || DocIDIN || '%';

          ELSIF CaseIDIN IS NOT NULL THEN

              ErrorCdOUT    :=  'E1072';
              ErrorMsgOUT   :=  'Searching data based on Case ID';

              OPEN CaseDocInfoCurOUT FOR
                  SELECT  DOC_ID,
                          CASE_ID,
                          CLIENT_ID,
                          DOC_NAME,
                          COMMENTS
                  FROM    LOMS_CASE_DOC_INFO
                  WHERE   UPPER(CASE_ID) LIKE '%' || UPPER(CaseIDIN) || '%';

          ELSIF ClientIDIN IS NOT NULL THEN

              ErrorCdOUT    :=  'E1073';
              ErrorMsgOUT   :=  'Searching data based on Client ID';

              OPEN CaseDocInfoCurOUT FOR
                  SELECT  DOC_ID,
                          CASE_ID,
                          CLIENT_ID,
                          DOC_NAME,
                          COMMENTS
                  FROM    LOMS_CASE_DOC_INFO
                  WHERE   UPPER(CLIENT_ID) LIKE '%' || UPPER(ClientIDIN) || '%';

          ELSIF DocNameIN IS NOT NULL THEN

              ErrorCdOUT    :=  'E1074';
              ErrorMsgOUT   :=  'Searching data based on Document Name';

              OPEN CaseDocInfoCurOUT FOR
                  SELECT  DOC_ID,
                          CASE_ID,
                          CLIENT_ID,
                          DOC_NAME,
                          COMMENTS
                  FROM    LOMS_CASE_DOC_INFO
                  WHERE   UPPER(DOC_NAME) LIKE '%' || UPPER(DocNameIN) || '%';

          ELSIF FromDateIN IS NOT NULL AND ToDateIN IS NOT NULL THEN

              ErrorCdOUT    :=  'E1075';
              ErrorMsgOUT   :=  'Searching data based on Document Date';

              OPEN CaseDocInfoCurOUT FOR
                  SELECT  DOC_ID,
                          CASE_ID,
                          CLIENT_ID,
                          DOC_NAME,
                          COMMENTS
                  FROM    LOMS_CASE_DOC_INFO
                  WHERE   TRUNC(GEN_IST) >= TO_DATE(FromDateIN,'DD/MM/YYYY')
                  AND     TRUNC(GEN_IST) <= TO_DATE(ToDateIN,'DD/MM/YYYY');
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT    :=  'E1076';
          ErrorMsgOUT   :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchCaseDocument;

      PROCEDURE DeleteCaseDocument
      (
          DocIDIN             IN        LOMS_CASE_DOC_INFO.DOC_ID%TYPE,
          CaseIDIN            IN        LOMS_CASE_DOC_INFO.CASE_ID%TYPE,
          ClientIDIN          IN        LOMS_CASE_DOC_INFO.CLIENT_ID%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteCaseDocument';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          ErrorCdOUT    :=  'E1077';
          ErrorMsgOUT   :=  'Process Initiated';

          KeyValue      :=  'DocID: '     || DocIDIN || ', ' || 'CaseID: ' || CaseIDIN || ', ' ||
                            'ClientID: '  || ClientIDIN;

          IF DocIDIN IS NOT NULL THEN
              DELETE  FROM LOMS_CASE_DOC_INFO
              WHERE   DOC_ID  =   DocIDIN;
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT    :=  'E1078';
          ErrorMsgOUT   :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DeleteCaseDocument;

      PROCEDURE AddEventReminder
      (
          ReminderTypeIN        IN        LOMS_REMINDER_ALERT.REMINDER_TYPE%TYPE,
          ReminderSubjectIN     IN        LOMS_REMINDER_ALERT.REMINDER_SUBJECT%TYPE,
          ReminderLocnIN        IN        LOMS_REMINDER_ALERT.REMINDER_LOCN%TYPE,
          ReminderDateIN        IN        LOMS_REMINDER_ALERT.REMINDER_LOCN%TYPE,
          ReminderTimeIN        IN        LOMS_REMINDER_ALERT.REMINDER_TIME%TYPE,
          ReminderMsgIN         IN        LOMS_REMINDER_ALERT.REMINDER_MSG%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ReminderID          LOMS_REMINDER_ALERT.REMINDER_ID%TYPE;
          GenIST			        LOMS_REMINDER_ALERT.GEN_IST%TYPE;
          GenUserCd		        LOMS_REMINDER_ALERT.GEN_USER_CD%TYPE;
          ProcessName         LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddEventReminder';
          KeyValue            LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN
          ErrorCdOUT  :=  'E1079';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'ReminderType: ' || ReminderTypeIN || ', ' || 'ReminderSubject: ' || ReminderSubjectIN ||
                      'ReminderLocn: ' || ReminderLocnIN;

          -- Generate Temporary Client ID using sequence
          SELECT  LOMS_RI_REQST_ID_SEQ.NEXTVAL
          INTO    ReminderID
          FROM    DUAL;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          IF UPPER(ReminderTypeIN) = 'PERSONAL' OR UPPER(ReminderTypeIN) = 'OFFICIAL' THEN
              INSERT INTO LOMS_REMINDER_ALERT  (REMINDER_ID,
                                                REMINDER_TYPE,
                                                REMINDER_SUBJECT,
                                                REMINDER_LOCN,
                                                REMINDER_DATE,
                                                REMINDER_TIME,
                                                REMINDER_MSG,
                                                GEN_IST,
                                                GEN_USER_CD,
                                                UPD_IST,
                                                UPD_USER_CD)
              VALUES                           (ReminderID,
                                                ReminderTypeIN,
                                                ReminderSubjectIN,
                                                ReminderLocnIN,
                                                TO_DATE(ReminderDateIN,'DD/MM/YYYY'),
                                                ReminderTimeIN,
                                                ReminderMsgIN,
                                                GenIST,
                                                GenUserCd,
                                                GenIST,
                                                GenUserCd);
          ELSE
              INSERT INTO LOMS_REMINDER_ALERT  (REMINDER_ID,
                                                REMINDER_TYPE,
                                                REMINDER_SUBJECT,
                                                REMINDER_LOCN,
                                                REMINDER_DATE,
                                                REMINDER_TIME,
                                                REMINDER_MSG,
                                                GEN_IST,
                                                GEN_USER_CD,
                                                UPD_IST,
                                                UPD_USER_CD)
              VALUES                           (ReminderID,
                                                ReminderTypeIN,
                                                ReminderSubjectIN,
                                                ReminderLocnIN,
                                                TO_DATE(ReminderDateIN,'DD/MM/YYYY'),
                                                ReminderTimeIN,
                                                ReminderMsgIN,
                                                GenIST,
                                                ReminderTypeIN,
                                                GenIST,
                                                ReminderTypeIN);
          END IF;

          -- Error code and msg
          ErrorCdOUT  :=  'E1080';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_CURSOR THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Cursor';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Input Data Not Found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddEventReminder;

      PROCEDURE SearchEventReminderForDB
      (
          UserNameIN            IN        VARCHAR2,
          RemAlertCurOUT        OUT       LOMS_OFFICE_PKG.REMINDER_ALERT_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          INVALID_INPUT_EXCEPTION   EXCEPTION;
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchEventReminderForDB';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN

          ErrorCdOUT  :=  'E1081';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'UserName: ' || UserNameIN;

          IF UserNameIN IS NOT NULL THEN

              OPEN RemAlertCurOUT FOR
                  SELECT  REMINDER_ID,
                          REMINDER_TYPE,
                          REMINDER_SUBJECT,
                          REMINDER_LOCN,
                          REMINDER_DATE,
                          REMINDER_TIME,
                          REMINDER_MSG
                  FROM    LOMS_REMINDER_ALERT
                  WHERE  (UPPER(GEN_USER_CD) = UPPER(UserNameIN) OR UPPER(REMINDER_TYPE) = 'OFFICIAL')
                  AND    (TRUNC(REMINDER_DATE) >= TRUNC(SYSDATE) AND TRUNC(REMINDER_DATE) <= (TRUNC(SYSDATE) + 7));

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1082';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchEventReminderForDB;

      PROCEDURE DeleteEventReminder
      IS
          ProcessName     LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteEventReminder';
          MsgCd           LOMS_AUDIT_INFO.MSG_CODE%TYPE;
          MsgText         LOMS_AUDIT_INFO.MSG_TEXT%TYPE;
          MsgDate         VARCHAR2(100);
          MsgTime         VARCHAR2(100);
          KeyValue        LOMS_AUDIT_INFO.KEY_VALUE%TYPE := 'Trying to delete reminder data';
      BEGIN

          MsgCd   :=  'E1083';
          MsgText :=  'Process Initiated';
          LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,MsgCd,MsgText,NULL,NULL);

          SELECT  TO_CHAR(SYSDATE)
          INTO    MsgDate
          FROM    DUAL;

          SELECT  TO_CHAR(SYSDATE,'hh24:mi:ss')
          INTO    MsgTime
          FROM    DUAL;

          MsgCd   :=  'E1084';
          MsgText := 'Attempting to delete data from LOMS_REMINDER_ALERT on ' || MsgDate || ' @ ' || MsgTime;
          LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,MsgCd,MsgText,NULL,NULL);

          DELETE  FROM  LOMS_REMINDER_ALERT
          WHERE         REMINDER_DATE <= SYSDATE - 1;

          MsgCd   :=  'E1085';
          MsgText :=  'Delete data from LOMS_REMINDER_ALERT on ' || MsgDate || ' @ ' || MsgTime || ' successful';
          LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,MsgCd,MsgText,NULL,NULL);

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              MsgCd   :=  'E9999';
              MsgText :=  'No Data found - Delete data from LOMS_REMINDER_ALERT on ' || MsgDate || ' @ ' || MsgTime || ' failed';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,MsgCd,MsgText,NULL,NULL);
          WHEN OTHERS THEN
              MsgCd   :=  'E9999';
              MsgText :=  'Unexpected error - Delete data from LOMS_REMINDER_ALERT on ' || MsgDate || ' @ ' || MsgTime || ' failed';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,MsgCd,MsgText,SQLCODE,SQLERRM);
      END DeleteEventReminder;

      PROCEDURE DeleteEventReminder
      (
          ReminderIdIN          IN        LOMS_REMINDER_ALERT.REMINDER_ID%TYPE
      )
      IS
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteEventReminder';
          MsgCd                       LOMS_AUDIT_INFO.MSG_CODE%TYPE;
          MsgText                     LOMS_AUDIT_INFO.MSG_TEXT%TYPE;
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN
          MsgCd     :=  'E1086';
          MsgText   :=  'Process Initiated';

          KeyValue := 'ReminderId: ' || ReminderIdIN;

          IF ReminderIdIN IS NOT NULL THEN
              DELETE FROM  LOMS_REMINDER_ALERT
              WHERE REMINDER_ID = ReminderIdIN;
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          MsgCd     :=  'E1087';
          MsgText   :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              MsgCd     :=  'E9999';
              MsgText   :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,MsgCd,MsgText,NULL,NULL);
          WHEN OTHERS THEN
              MsgCd     :=  'E9999';
              MsgText   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,MsgCd,MsgText,SQLCODE,SQLERRM);
      END DeleteEventReminder;

      PROCEDURE SearchEventReminderByRemID
      (
          ReminderIDIN          IN        LOMS_REMINDER_ALERT.REMINDER_ID%TYPE,
          RemAlertCurOUT        OUT       LOMS_OFFICE_PKG.REMINDER_ALERT_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchEventReminderByRemID';
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN

          KeyValue        := 'ReminderID: ' || ReminderIDIN;

          ErrorCdOUT      :=  'E1088';
          ErrorMsgOUT     :=  'Process Initiated';

          IF ReminderIDIN IS NOT NULL THEN
              OPEN RemAlertCurOUT FOR
                  SELECT  REMINDER_ID,
                          REMINDER_TYPE,
                          REMINDER_SUBJECT,
                          REMINDER_LOCN,
                          REMINDER_DATE,
                          REMINDER_TIME,
                          REMINDER_MSG
                  FROM    LOMS_REMINDER_ALERT
                  WHERE   REMINDER_ID = ReminderIDIN;
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT      :=  'E1089';
          ErrorMsgOUT     :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchEventReminderByRemID;

      PROCEDURE SearchEventReminderByUserName
      (
          UserNameIN            IN        VARCHAR2,
          RemAlertCurOUT        OUT       LOMS_OFFICE_PKG.REMINDER_ALERT_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          INVALID_INPUT_EXCEPTION   EXCEPTION;
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchEventReminderByUserName';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN

          ErrorCdOUT  :=  'E1090';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'UserName: ' || UserNameIN;

          IF UserNameIN IS NOT NULL THEN

              OPEN RemAlertCurOUT FOR
                  SELECT  REMINDER_ID,
                          REMINDER_TYPE,
                          REMINDER_SUBJECT,
                          REMINDER_LOCN,
                          REMINDER_DATE,
                          REMINDER_TIME,
                          REMINDER_MSG
                  FROM    LOMS_REMINDER_ALERT
                  WHERE   (UPPER(GEN_USER_CD) = UPPER(UserNameIN) OR UPPER(REMINDER_TYPE) = 'OFFICIAL');

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1091';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchEventReminderByUserName;

      PROCEDURE ComposeAddClientEmail
      (
          ClientIDIN          IN      LOMS_CLIENT_INFO.CLIENT_ID%TYPE,
          FromEmailIDOUT      OUT     LOMS_APP_MASTER.EMAIL_ID%TYPE,
          FromEmailPwdOUT     OUT     VARCHAR2,
          ToEmailIdOUT        OUT     LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          EmailSubjectOUT     OUT     VARCHAR2,
          EmailMsgOUT         OUT     VARCHAR2,
          ToMobileNoOUT       OUT     LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          SMSMsgOUT           OUT     VARCHAR2,
          ErrorCdOUT          OUT     VARCHAR2,
          ErrorMsgOUT         OUT     VARCHAR2
      )
      IS
          -- Email Content
          EOL                 CONSTANT  STRING(2) := CHR(13) || CHR(10);
          AddressLine         VARCHAR2(10)  := 'Dear ';
          WelcomeLine         VARCHAR2(100) := 'Greetings from LOMS!!!';
          UserAccMsgLine      VARCHAR2(100) := 'You have been added successfully as a client. Please find your registered details below,';
          CredentialsLine1    VARCHAR2(50)  := 'Client ID: ';
          CredentialsLine2    VARCHAR2(50)  := 'Mobile No: ';
          CredentialsLine3    VARCHAR2(50)  := 'Email ID: ';
          NoteLine            VARCHAR2(100) := 'Please communicate the advocate for any change in the above information.';
          ThanksLine          VARCHAR2(50)  := 'Thank You!!!';
          SignatureLine       VARCHAR2(100) := 'Regards, ' || EOL || 'LOMS';
          DisclaimerLine      VARCHAR2(200) := 'A product of Sunrays Technology Solutions';
          CaseLine            VARCHAR2(2000);
          SmsFlag             VARCHAR2(5);
          EmailFlag           VARCHAR2(5);
          -- Client Information
          FirstName           LOMS_CLIENT_INFO.FIRST_NAME%TYPE;
          LastName            LOMS_CLIENT_INFO.LAST_NAME%TYPE;
          MobileNo            LOMS_CLIENT_INFO.MOBILE_NO%TYPE;
          --For Audit Table
          ProcessName         LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ComposeAddClientEmail';
          KeyValue            LOMS_AUDIT_INFO.KEY_VALUE%TYPE;

      BEGIN
          ErrorCdOUT   :=  'E1092';
          ErrorMsgOUT  :=  'Process Initiated';

          SmsFlag := LOMS_OFFICE_PKG.CheckIfSMSEnabled;

          EmailFlag := LOMS_OFFICE_PKG.CheckIfEmailEnabled;

          IF EmailFlag = 'Y' THEN

              SELECT  FIRST_NAME,
                      LAST_NAME,
                      EMAIL_ID,
                      MOBILE_NO
              INTO    FirstName,
                      LastName,
                      ToEmailIdOUT,
                      MobileNo
              FROM    LOMS_CLIENT_INFO
              WHERE   CLIENT_ID = ClientIDIN;

              SELECT  EMAIL_ID,
                      LOMS_CRYPT_PKG.DecryptData(EMAIL_PWD)
              INTO    FromEmailIDOUT,
                      FromEmailPwdOUT
              FROM    LOMS_APP_MASTER;

              --Compose Email
              EmailSubjectOUT := 'LOMS - Client Registration Successful';
              --Email Msg
              EmailMsgOUT  := AddressLine       || FirstName    || LastName         || ', '             || EOL            ||
                              EOL               || WelcomeLine  || EOL              || EOL              || UserAccMsgLine ||
                              EOL               || EOL          || CredentialsLine1 || ClientIDIN       || EOL            ||
                              CredentialsLine2  || MobileNo     || EOL              || CredentialsLine3 || ToEmailIdOUT   ||
                              EOL               || EOL          || NoteLine         || EOL              || EOL            ||
                              ThanksLine        || EOL          || EOL              || SignatureLine    || EOL            ||
                              DisclaimerLine;
          ELSE
              FromEmailIDOUT    :=  NULL;
              FromEmailPwdOUT   :=  NULL;
              ToEmailIdOUT      :=  NULL;
              EmailSubjectOUT   :=  NULL;
              EmailMsgOUT       :=  NULL;
          END IF;

          IF SmsFlag = 'Y' AND TRIM(MobileNo) IS NOT NULL THEN
              ToMobileNoOUT :=  MobileNo;
              SMSMsgOUT     := 'Congratulations!!! You have been added successfully as a client. Client ID: ' || ClientIDIN || 'Please use this Client ID for further reference. Thanks!!!';
          ELSE
              ToMobileNoOUT   := NULL;
              SMSMsgOUT       := NULL;
          END IF;

          IF TRIM(FromEmailIDOUT) IS NULL OR TRIM(FromEmailPwdOUT) IS NULL OR TRIM(ToEmailIdOUT) IS NULL THEN
              FromEmailIDOUT    :=  NULL;
              FromEmailPwdOUT   :=  NULL;
              ToEmailIdOUT      :=  NULL;
              EmailSubjectOUT   :=  NULL;
              EmailMsgOUT       :=  NULL;
          END IF;

          ErrorCdOUT  :=  'E1093';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT   :=  'E9999';
              ErrorMsgOUT  :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT   :=  'E9999';
              ErrorMsgOUT  :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END ComposeAddClientEmail;

      PROCEDURE ComposeAddCaseEmail
      (
          CaseIDIN              IN      LOMS_CASE_INFO.CASE_ID%TYPE,
          FromEmailIDOUT        OUT     LOMS_APP_MASTER.EMAIL_ID%TYPE,
          FromEmailPwdOUT       OUT     VARCHAR2,
          ToEmailIdOUT          OUT     LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          EmailSubjectOUT       OUT     VARCHAR2,
          EmailMsgOUT           OUT     VARCHAR2,
          ToMobileNoOUT         OUT     LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          SMSMsgOUT             OUT     VARCHAR2,
          ErrorCdOUT            OUT     VARCHAR2,
          ErrorMsgOUT           OUT     VARCHAR2
      )
      IS
          --Client Info
          ClientId            LOMS_CLIENT_INFO.CLIENT_ID%TYPE;
          FirstName           LOMS_CLIENT_INFO.FIRST_NAME%TYPE;
          LastName            LOMS_CLIENT_INFO.LAST_NAME%TYPE;
          MobileNo            LOMS_CLIENT_INFO.MOBILE_NO%TYPE;
          --Case info
          CaseType            VARCHAR2(1000);
          PrimeCaseNo	        VARCHAR2(100);
          RefCaseNo	          VARCHAR2(1000);
          CourtDetails	      VARCHAR2(1000);
          CaseStatus	        VARCHAR2(50);
          JudgmntDate	        VARCHAR2(50);
          SmsFlag             VARCHAR2(5);
          EmailFlag           VARCHAR2(5);
          -- Email Content
          EOL                 CONSTANT  STRING(2) := CHR(13) || CHR(10);
          CaseLine            VARCHAR2(2000);
          AddressLine         VARCHAR2(10)  := 'Dear ';
          WelcomeLine         VARCHAR2(100) := 'Greetings from LOMS!!!';
          UserCaseMsgLine     VARCHAR2(100) := 'Your case details have been added successfully. Please find your registered details below,';
          NoteLine            VARCHAR2(100) := 'Please communicate the advocate for any change in the above information.';
          ThanksLine          VARCHAR2(50)  := 'Thank You!!!';
          SignatureLine       VARCHAR2(100) := 'Regards, ' || EOL || 'LOMS';
          DisclaimerLine      VARCHAR2(200) := 'A product of Sunrays Technology Solutions';
          --For Audit Table
          ProcessName         LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ComposeAddCaseEmail';
          KeyValue            LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN
          ErrorCdOUT   :=  'E1094';
          ErrorMsgOUT  :=  'Process Initiated';

          SmsFlag := LOMS_OFFICE_PKG.CheckIfSMSEnabled;

          EmailFlag := LOMS_OFFICE_PKG.CheckIfEmailEnabled;

          IF EmailFlag = 'Y' THEN

              SELECT  EMAIL_ID,
                      LOMS_CRYPT_PKG.DecryptData(EMAIL_PWD)
              INTO    FromEmailIDOUT,
                      FromEmailPwdOUT
              FROM    LOMS_APP_MASTER;

              SELECT    CLIENT_ID
              INTO      ClientId
              FROM      LOMS_CASE_INFO
              WHERE     CASE_ID = CaseIDIN;

              SELECT    FIRST_NAME,
                        LAST_NAME,
                        EMAIL_ID,
                        MOBILE_NO
              INTO      FirstName,
                        LastName,
                        ToEmailIdOUT,
                        MobileNo
              FROM      LOMS_CLIENT_INFO
              WHERE     CLIENT_ID = ClientID;

              SELECT    'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                        'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                        'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                        'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                        NVL(T2.CASE_STATUS,'N/A'),
                        T2.JUDGMNT_DT
              INTO      CaseType,
                        PrimeCaseNo,
                        RefCaseNo,
                        CourtDetails,
                        CaseStatus,
                        JudgmntDate
              FROM      LOMS_CLIENT_INFO  T1,
                        LOMS_CASE_INFO    T2,
                        LOMS_COURT_INFO   T3
              WHERE     UPPER(T2.CASE_ID) = TRIM(UPPER(CaseIdIN))
              AND       T1.CLIENT_ID = T2.CLIENT_ID
              AND       T3.COURT_ID = T2.COURT_DETAILS;

              IF TRIM(CaseIDIN) IS NOT NULL THEN
                  CaseLine := 'Case ID: ' || CaseIDIN || EOL;
              END IF;

              IF TRIM(CaseType) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Case Type: ' || CaseType || EOL;
              END IF;

              IF TRIM(PrimeCaseNo) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Case No: ' || PrimeCaseNo || EOL;
              END IF;

              IF TRIM(RefCaseNo) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Reference Cases: ' || RefCaseNo || EOL;
              END IF;

              IF TRIM(CourtDetails) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Court Details: ' || CourtDetails || EOL;
              END IF;

              IF TRIM(CaseStatus) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Case Status: ' || CaseStatus || EOL;
              END IF;

              IF TRIM(JudgmntDate) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Judgment Date: ' || JudgmntDate || EOL;
              END IF;

              IF TRIM(ToEmailIdOUT) IS NOT NULL THEN
                  --Compose Email
                  EmailSubjectOUT := 'LOMS - Case added successfully';
                  --Email Msg
                  EmailMsgOUT  := AddressLine   || FirstName     || LastName   || ', '|| EOL             ||
                                  EOL           || WelcomeLine   || EOL        || EOL || UserCaseMsgLine ||
                                  EOL           || EOL           || CaseLine   || EOL || NoteLine        ||
                                  EOL           || EOL           || ThanksLine || EOL || EOL             ||
                                  SignatureLine || EOL           || DisclaimerLine;
              END IF;
          ELSE
              FromEmailIDOUT    :=  NULL;
              FromEmailPwdOUT   :=  NULL;
              ToEmailIdOUT      :=  NULL;
              EmailSubjectOUT   :=  NULL;
              EmailMsgOUT       :=  NULL;
          END IF;

          IF TRIM(FromEmailIDOUT) IS NULL OR TRIM(FromEmailPwdOUT) IS NULL OR TRIM(ToEmailIdOUT) IS NULL THEN
              FromEmailIDOUT    :=  NULL;
              FromEmailPwdOUT   :=  NULL;
              ToEmailIdOUT      :=  NULL;
              EmailSubjectOUT   :=  NULL;
              EmailMsgOUT       :=  NULL;
          END IF;

          IF SmsFlag = 'Y' AND TRIM(MobileNo) IS NOT NULL THEN
              --To Mobile No
              ToMobileNoOUT :=  MobileNo;
              -- SMS
              SMSMsgOUT     := 'Congratulations!!! Your case (Case No - ' || PrimeCaseNo || ') has been updated to the Lawyers System. Please use the case no for further reference. Thanks';
          ELSE
              ToMobileNoOUT   := NULL;
              SMSMsgOUT       := NULL;
          END IF;

          ErrorCdOUT  :=  'E1095';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT   :=  'E9999';
              ErrorMsgOUT  :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT   :=  'E9999';
              ErrorMsgOUT  :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END ComposeAddCaseEmail;

      PROCEDURE ComposeAddCaseHearingEmail
      (
          CaseHearingIdIN       IN        LOMS_CASE_HEARING_INFO.CASE_HEARING_ID%TYPE,
          FromEmailIDOUT        OUT       LOMS_APP_MASTER.EMAIL_ID%TYPE,
          FromEmailPwdOUT       OUT       VARCHAR2,
          ToEmailIdOUT          OUT       LOMS_CLIENT_INFO.EMAIL_ID%TYPE,
          EmailSubjectOUT       OUT       VARCHAR2,
          EmailMsgOUT           OUT       VARCHAR2,
          ToMobileNoOUT         OUT       LOMS_CLIENT_INFO.MOBILE_NO%TYPE,
          SMSMsgOUT             OUT       VARCHAR2,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          --Local variables
          CaseId              LOMS_CASE_HEARING_INFO.CASE_ID%TYPE;
          ClientID            LOMS_CASE_HEARING_INFO.CLIENT_ID%TYPE;
          CaseHearngDt        LOMS_CASE_HEARING_INFO.CASE_HEARING_DATE%TYPE;

          --Client Info
          FirstName           LOMS_CLIENT_INFO.FIRST_NAME%TYPE;
          LastName            LOMS_CLIENT_INFO.LAST_NAME%TYPE;

          --Case Info
          CaseType            VARCHAR2(1000);
          PrimeCaseNo	        VARCHAR2(100);
          RefCaseNo	          VARCHAR2(1000);
          CourtDetails	      VARCHAR2(1000);
          CaseStatus	        VARCHAR2(50);
          JudgmntDate	        DATE;

          SmsFlag             VARCHAR2(5);
          EmailFlag           VARCHAR2(5);

          -- Email Content
          EmailSubject        VARCHAR2(250);
          EmailMsg            VARCHAR2(3000);
          EOL                 CONSTANT  STRING(2) := CHR(13) || CHR(10);
          CaseLine            VARCHAR2(2000);
          AddressLine         VARCHAR2(10)  := 'Dear ';
          WelcomeLine         VARCHAR2(100) := 'Greetings from LOMS!!!';
          UserCaseHrgLine     VARCHAR2(100) := 'Please find your case hearing details below,';
          NoteLine            VARCHAR2(100) := 'Please communicate the advocate for any change in the above information.';
          ThanksLine          VARCHAR2(50)  := 'Thank You!!!';
          SignatureLine       VARCHAR2(100) := 'Regards, ' || EOL || 'LOMS';
          DisclaimerLine      VARCHAR2(200) := 'A product of Sunrays Technology Solutions';

          --For Audit Table
          ProcessName         LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ComposeAddCaseHearingEmail';
          KeyValue            LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN

          ErrorCdOUT   :=  'E1096';
          ErrorMsgOUT  :=  'Process Initiated';

          SmsFlag := LOMS_OFFICE_PKG.CheckIfSMSEnabled;

          EmailFlag := LOMS_OFFICE_PKG.CheckIfEmailEnabled;

          IF EmailFlag = 'Y' THEN

              SELECT    CASE_ID,
                        CLIENT_ID,
                        CASE_HEARING_DATE
              INTO      CaseId,
                        ClientId,
                        CaseHearngDt
              FROM      LOMS_CASE_HEARING_INFO
              WHERE     CASE_HEARING_ID = CaseHearingIdIN;

              SELECT    FIRST_NAME,
                        LAST_NAME,
                        EMAIL_ID,
                        MOBILE_NO
              INTO      FirstName,
                        LastName,
                        ToEmailIdOUT,
                        ToMobileNoOUT
              FROM      LOMS_CLIENT_INFO
              WHERE     CLIENT_ID = ClientID;

              SELECT    'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                        'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                        'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                        'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                        NVL(T2.CASE_STATUS,'N/A')
              INTO      CaseType,
                        PrimeCaseNo,
                        RefCaseNo,
                        CourtDetails,
                        CaseStatus
              FROM      LOMS_CLIENT_INFO  T1,
                        LOMS_CASE_INFO    T2,
                        LOMS_COURT_INFO   T3
              WHERE     UPPER(T2.CASE_ID) = TRIM(UPPER(CaseId))
              AND       T1.CLIENT_ID = T2.CLIENT_ID
              AND       T3.COURT_ID = T2.COURT_DETAILS;

              IF TRIM(CaseID) IS NOT NULL THEN
                  CaseLine := 'Case ID: ' || CaseID || EOL;
              END IF;

              IF TRIM(CaseType) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Case Type: ' || CaseType || EOL;
              END IF;

              IF TRIM(PrimeCaseNo) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Case No: ' || PrimeCaseNo || EOL;
              END IF;

              IF TRIM(RefCaseNo) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Reference Cases: ' || RefCaseNo || EOL;
              END IF;

              IF TRIM(CourtDetails) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Court Details: ' || CourtDetails || EOL;
              END IF;

              IF TRIM(CaseStatus) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Case Status: ' || CaseStatus || EOL;
              END IF;

              IF TRIM(CaseHearngDt) IS NOT NULL THEN
                  CaseLine := CaseLine || 'Hearing Date: ' || CaseHearngDt || EOL;
              END IF;

              IF TRIM(ToEmailIdOUT) IS NOT NULL THEN
                  --Compose Email
                  EmailSubjectOUT := 'LOMS - Your Case hearing falls on ' || CaseHearngDt;
                  --Email Msg
                  EmailMsgOUT  := AddressLine   || FirstName     || LastName   || ', '|| EOL             ||
                                  EOL           || WelcomeLine   || EOL        || EOL || UserCaseHrgLine ||
                                  EOL           || EOL           || CaseLine   || EOL || NoteLine        ||
                                  EOL           || EOL           || ThanksLine || EOL || EOL             ||
                                  SignatureLine || EOL           || DisclaimerLine;
                  -- From Email ID and password
                  SELECT  EMAIL_ID,
                          LOMS_CRYPT_PKG.DecryptData(EMAIL_PWD)
                  INTO    FromEmailIDOUT,
                          FromEmailPwdOUT
                  FROM    LOMS_APP_MASTER;
              END IF;
          ELSE
              FromEmailIDOUT    :=  NULL;
              FromEmailPwdOUT   :=  NULL;
              ToEmailIdOUT      :=  NULL;
              EmailSubjectOUT   :=  NULL;
              EmailMsgOUT       :=  NULL;
          END IF;

          IF TRIM(FromEmailIDOUT) IS NULL OR TRIM(FromEmailPwdOUT) IS NULL OR TRIM(ToEmailIdOUT) IS NULL THEN
              FromEmailIDOUT    :=  NULL;
              FromEmailPwdOUT   :=  NULL;
              ToEmailIdOUT      :=  NULL;
              EmailSubjectOUT   :=  NULL;
              EmailMsgOUT       :=  NULL;
          END IF;

          IF SmsFlag = 'Y' AND TRIM(ToMobileNoOUT) IS NOT NULL THEN
              SMSMsgOUT := 'Your case (Case No: ' || PrimeCaseNo || ') hearing (vaaidha) falls on ' || CaseHearngDt || ' Please contact your lawyer for further details. Thanks.';
          ELSE
              ToMobileNoOUT   := NULL;
              SMSMsgOUT       := NULL;
          END IF;

          ErrorCdOUT  :=  'E1097';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT   :=  'E9999';
              ErrorMsgOUT  :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT   :=  'E9999';
              ErrorMsgOUT  :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END ComposeAddCaseHearingEmail;

      PROCEDURE ViewCaseHearing
      (
          ViewTypeIN          IN        VARCHAR2,
          StartDateIN         IN        VARCHAR2,
          EndDateIN           IN        VARCHAR2,
          CaseHearingCurIN    OUT       LOMS_OFFICE_PKG.CASE_INFO_VW_REF_CUR_TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      )
      IS
          EOL                       CONSTANT  STRING(2) := CHR(13) || CHR(10);
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ViewCaseHearing';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          ErrorCdOUT  :=  'E1098';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue    :=  'ViewType: ' || ViewTypeIN || ', ' || 'StartDate: ' || StartDateIN || ', ' ||
                          'EndDate: '  || EndDateIN;

          IF UPPER(ViewTypeIN) = 'CASE HEARING' THEN

              ErrorCdOUT  :=  'E1099';
              ErrorMsgOUT :=  'Get Case Hearing Info for date range';

              OPEN CaseHearingCurIN FOR
                  SELECT    DISTINCT T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T4.CASE_HEARING_DATE,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3,
                            LOMS_CASE_HEARING_INFO T4
                  WHERE     TRUNC(T4.CASE_HEARING_DATE) >= TO_DATE(StartDateIN,'DD/MM/YYYY')
                  AND       TRUNC(T4.CASE_HEARING_DATE) <= TO_DATE(EndDateIN,'DD/MM/YYYY')
                  AND       UPPER(T2.CASE_ID)     = UPPER(T4.CASE_ID)
                  AND       UPPER(T1.CLIENT_ID)   = UPPER(T2.CLIENT_ID)
                  AND       UPPER(T3.COURT_ID)    = UPPER(T2.COURT_DETAILS);

          ELSIF UPPER(ViewTypeIN) = 'SUIT' THEN

              ErrorCdOUT  :=  'E1100';
              ErrorMsgOUT :=  'Get Suit Info for date range';

              OPEN CaseHearingCurIN FOR
                  SELECT    DISTINCT T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T4.CASE_HEARING_DATE,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3,
                            LOMS_CASE_HEARING_INFO T4
                  WHERE     TRUNC(T4.CASE_HEARING_DATE) >= TO_DATE(StartDateIN,'DD/MM/YYYY')
                  AND       TRUNC(T4.CASE_HEARING_DATE) <= TO_DATE(EndDateIN,'DD/MM/YYYY')
                  AND       UPPER(T2.CASE_ID)     = UPPER(T4.CASE_ID)
                  AND       (UPPER(T2.CASE_TYPE) LIKE '%SUIT%' OR UPPER(T2.CASE_SUB_TYPE_1) LIKE '%SUIT%' OR UPPER(T2.CASE_SUB_TYPE_2) LIKE '%SUIT%')
                  AND       UPPER(T1.CLIENT_ID)   = UPPER(T4.CLIENT_ID)
                  AND       UPPER(T3.COURT_ID)    = UPPER(T2.COURT_DETAILS);

          ELSIF UPPER(ViewTypeIN) = 'APPEAL' THEN

              ErrorCdOUT  :=  'E1101';
              ErrorMsgOUT :=  'Get Appeal Info for date range';

              OPEN CaseHearingCurIN FOR
                  SELECT    DISTINCT  T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T4.CASE_HEARING_DATE,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3,
                            LOMS_CASE_HEARING_INFO T4
                  WHERE     TRUNC(T4.CASE_HEARING_DATE) >= TO_DATE(StartDateIN,'DD/MM/YYYY')
                  AND       TRUNC(T4.CASE_HEARING_DATE) <= TO_DATE(EndDateIN,'DD/MM/YYYY')
                  AND       UPPER(T2.CASE_ID)     = UPPER(T4.CASE_ID)
                  AND       (UPPER(T2.CASE_TYPE) LIKE '%APPEAL%' OR UPPER(T2.CASE_SUB_TYPE_1) LIKE '%APPEAL%' OR UPPER(T2.CASE_SUB_TYPE_2) LIKE '%APPEAL%')
                  AND       UPPER(T1.CLIENT_ID)   = UPPER(T4.CLIENT_ID)
                  AND       UPPER(T3.COURT_ID)    = UPPER(T2.COURT_DETAILS);

          ELSIF UPPER(ViewTypeIN) = 'PETITION' THEN

              ErrorCdOUT  :=  'E1102';
              ErrorMsgOUT :=  'Get Petition Info for date range';

              OPEN CaseHearingCurIN FOR
                  SELECT    DISTINCT T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T4.CASE_HEARING_DATE,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3,
                            LOMS_CASE_HEARING_INFO T4
                  WHERE     TRUNC(T4.CASE_HEARING_DATE) >= TO_DATE(StartDateIN,'DD/MM/YYYY')
                  AND       TRUNC(T4.CASE_HEARING_DATE) <= TO_DATE(EndDateIN,'DD/MM/YYYY')
                  AND       UPPER(T2.CASE_ID)     = UPPER(T4.CASE_ID)
                  AND       (UPPER(T2.CASE_TYPE) LIKE '%PETITION%' OR UPPER(T2.CASE_SUB_TYPE_1) LIKE '%PETITION%' OR UPPER(T2.CASE_SUB_TYPE_2) LIKE '%PETITION%')
                  AND       UPPER(T1.CLIENT_ID)   = UPPER(T4.CLIENT_ID)
                  AND       UPPER(T3.COURT_ID)    = UPPER(T2.COURT_DETAILS);

          ELSIF UPPER(ViewTypeIN) = 'EXECUTION' THEN

              ErrorCdOUT  :=  'E1103';
              ErrorMsgOUT :=  'Get Execution Info for date range';

              OPEN CaseHearingCurIN FOR
                  SELECT    DISTINCT T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T4.CASE_HEARING_DATE,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3,
                            LOMS_CASE_HEARING_INFO T4
                  WHERE     TRUNC(T4.CASE_HEARING_DATE) >= TO_DATE(StartDateIN,'DD/MM/YYYY')
                  AND       TRUNC(T4.CASE_HEARING_DATE) <= TO_DATE(EndDateIN,'DD/MM/YYYY')
                  AND       UPPER(T2.CASE_ID)     = UPPER(T4.CASE_ID)
                  AND       (UPPER(T2.CASE_TYPE) LIKE '%EXECUTION%' OR UPPER(T2.CASE_SUB_TYPE_1) LIKE '%EXECUTION%' OR UPPER(T2.CASE_SUB_TYPE_2) LIKE '%EXECUTION%')
                  AND       UPPER(T1.CLIENT_ID)   = UPPER(T4.CLIENT_ID)
                  AND       UPPER(T3.COURT_ID)    = UPPER(T2.COURT_DETAILS);

          ELSIF UPPER(ViewTypeIN) = 'CRIMINAL' THEN

              ErrorCdOUT  :=  'E1104';
              ErrorMsgOUT :=  'Get Criminal Case Info for date range';

              OPEN CaseHearingCurIN FOR
                  SELECT    DISTINCT T2.CASE_ID,
                            T2.CLIENT_ID,
                            'Client Name: '  || TRIM(NVL(T1.FIRST_NAME,'N/A')) || ' '   || TRIM(NVL(T1.LAST_NAME,'N/A'))       || EOL   || 'Mobile No: ' || TRIM(NVL(T1.MOBILE_NO,'N/A')) || EOL || 'Email ID: ' || TRIM(NVL(T1.EMAIL_ID,'N/A')) || EOL || 'Address: ' || TRIM(NVL(T1.TEMP_ADDRESS,'N/A')),
                            'Case Type: '    || TRIM(NVL(T2.CASE_TYPE,'N/A'))  || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_1,'N/A')) || ' - ' || TRIM(NVL(T2.CASE_SUB_TYPE_2,'N/A')),
                            'Case No: '      || TRIM(NVL(T2.CASE_NO_1,'N/A')),
                            'Ref. Case No: ' || TRIM(NVL(T2.CASE_NO_2 || ' / ' || T2.CASE_NO_3 || ' / ' || T2.CASE_NO_4 || ' / ' || T2.CASE_NO_5 || ' / ' || T2.CASE_NO_6,'N/A')),
                            'Court Details: '|| TRIM(NVL((T3.COURT_NAME || ', ' || T3.COURT_TYPE || ', ' || T3.COURT_ADDRESS || ', ' || T3.COURT_CITY || ', ' || T3.COURT_DISTRICT || ', ' || T3.COURT_STATE), 'N/A')),
                            T2.CASE_PRIORITY,
                            T2.CASE_STATUS,
                            T4.CASE_HEARING_DATE,
                            T2.CASE_COMMENTS
                  FROM      LOMS_CLIENT_INFO  T1,
                            LOMS_CASE_INFO    T2,
                            LOMS_COURT_INFO   T3,
                            LOMS_CASE_HEARING_INFO T4
                  WHERE     TRUNC(T4.CASE_HEARING_DATE) >= TO_DATE(StartDateIN,'DD/MM/YYYY')
                  AND       TRUNC(T4.CASE_HEARING_DATE) <= TO_DATE(EndDateIN,'DD/MM/YYYY')
                  AND       UPPER(T2.CASE_ID)     = UPPER(T4.CASE_ID)
                  AND       (UPPER(T2.CASE_TYPE) LIKE '%CRIMINAL%' OR UPPER(T2.CASE_SUB_TYPE_1) LIKE '%CRIMINAL%' OR UPPER(T2.CASE_SUB_TYPE_2) LIKE '%CRIMINAL%')
                  AND       UPPER(T1.CLIENT_ID)   = UPPER(T4.CLIENT_ID)
                  AND       UPPER(T3.COURT_ID)    = UPPER(T2.COURT_DETAILS);

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1105';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END ViewCaseHearing;

      PROCEDURE AddBookInfo
      (
          BookNoIN            IN        LOMS_BOOK_SHELF.BOOK_NO%TYPE,
          BookTitleIN         IN        LOMS_BOOK_SHELF.BOOK_TITLE%TYPE,
          BookAuthorIN        IN        LOMS_BOOK_SHELF.BOOK_AUTHOR%TYPE,
          BookCoAuthorIN      IN        LOMS_BOOK_SHELF.BOOK_CO_AUTHOR%TYPE,
          BookSubjectIN       IN        LOMS_BOOK_SHELF.BOOK_SUBJECT%TYPE,
          BookTypeIN          IN        LOMS_BOOK_SHELF.BOOK_TYPE%TYPE,
          BookYearIN          IN        LOMS_BOOK_SHELF.BOOK_YEAR%TYPE,
          BookPublisherIN     IN        LOMS_BOOK_SHELF.BOOK_PUBLISHER%TYPE,
          BookRackNoIN        IN        LOMS_BOOK_SHELF.BOOK_RACK_NO%TYPE,
          BookRowNoIN         IN        LOMS_BOOK_SHELF.BOOK_ROW_NO%TYPE,
          BookStatusIN        IN        LOMS_BOOK_SHELF.BOOK_STATUS%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      )
      IS
          -- Local variables
          TmpBookID		        LOMS_BOOK_SHELF.BOOK_ID%TYPE;
          GenIST			        LOMS_BOOK_SHELF.GEN_IST%TYPE;
          GenUserCd		        LOMS_BOOK_SHELF.GEN_USER_CD%TYPE;
          ProcessName         LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddBookInfo';
          KeyValue            LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN
          -- Process Begins
          ErrorCdOUT  :=  'E1106';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'BookNo: ' || BookNoIN || ', ' || 'BookTitle: ' || BookTitleIN;

          -- Generate Temporary Client ID using sequence
          SELECT  LOMS_BOOK_ID_SEQ.NEXTVAL
          INTO    TmpBookID
          FROM    DUAL;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          -- Error Code and Msg
          ErrorCdOUT  :=  'E1107';
          ErrorMsgOUT :=  'Adding New Book Information';

          -- Attempting data insert
          INSERT INTO LOMS_BOOK_SHELF(BOOK_ID,
                                      BOOK_NO,
                                      BOOK_TITLE,
                                      BOOK_AUTHOR,
                                      BOOK_CO_AUTHOR,
                                      BOOK_SUBJECT,
                                      BOOK_TYPE,
                                      BOOK_YEAR,
                                      BOOK_PUBLISHER,
                                      BOOK_RACK_NO,
                                      BOOK_ROW_NO,
                                      BOOK_STATUS,
                                      GEN_IST,
                                      GEN_USER_CD,
                                      UPD_IST,
                                      UPD_USER_CD
                                      )
          VALUES                      (
                                      TmpBookID,
                                      BookNoIN,
                                      BookTitleIN,
                                      BookAuthorIN,
                                      BookCoAuthorIN,
                                      BookSubjectIN,
                                      BookTypeIN,
                                      BookYearIN,
                                      BookPublisherIN,
                                      BookRackNoIN,
                                      BookRowNoIN,
                                      BookStatusIN,
                                      GenIST,
                                      GenUserCd,
                                      GenIST,
                                      GenUserCd
                                      );

          -- Error code and msg
          ErrorCdOUT  :=  'E1108';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddBookInfo;

      PROCEDURE SearchBookInfo
      (
          BookIdIN            IN        LOMS_BOOK_SHELF.BOOK_ID%TYPE,
          BookNoIN            IN        LOMS_BOOK_SHELF.BOOK_NO%TYPE,
          BookTitleIN         IN        LOMS_BOOK_SHELF.BOOK_TITLE%TYPE,
          BookAuthorIN        IN        LOMS_BOOK_SHELF.BOOK_AUTHOR%TYPE,
          BookCoAuthorIN      IN        LOMS_BOOK_SHELF.BOOK_CO_AUTHOR%TYPE,
          BookSubjectIN       IN        LOMS_BOOK_SHELF.BOOK_SUBJECT%TYPE,
          BookTypeIN          IN        LOMS_BOOK_SHELF.BOOK_TYPE%TYPE,
          BookYearIN          IN        LOMS_BOOK_SHELF.BOOK_YEAR%TYPE,
          BookPublisherIN     IN        LOMS_BOOK_SHELF.BOOK_PUBLISHER%TYPE,
          BookRackNoIN        IN        LOMS_BOOK_SHELF.BOOK_RACK_NO%TYPE,
          BookRowNoIN         IN        LOMS_BOOK_SHELF.BOOK_ROW_NO%TYPE,
          BookStatusIN        IN        LOMS_BOOK_SHELF.BOOK_STATUS%TYPE,
          BookInfoCurOUT      OUT       LOMS_OFFICE_PKG.BOOK_INFO_REF_CUR_TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchBookInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN
          KeyValue := 'BookNo: '        || BookNoIN       || ', ' || 'BookTitle: '      || BookTitleIN      || ', ' ||
                      'BookAuthor: '    || BookAuthorIN   || ', ' || 'BookCoAuthor: '   || BookCoAuthorIN   || ', ' ||
                      'BookSubject: '   || BookSubjectIN  || ', ' || 'BookType: '       || BookTypeIN       || ', ' ||
                      'BookYear: '      || BookYearIN     || ', ' || 'BookPublisher: '  || BookPublisherIN  || ', ' ||
                      'BookRackNo: '    || BookRackNoIN   || ', ' || 'BookRowNo: '      || BookRowNoIN      || ', ' ||
                      'BookId: '        || BookIdIN;

          IF TRIM(BookIdIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1109';
              ErrorMsgOUT :=  'Attempting data fetch using Book ID';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   BOOK_ID LIKE '%' || BookIdIN || '%';

          ELSIF TRIM(BookNoIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1110';
              ErrorMsgOUT :=  'Attempting data fetch using Book No';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_NO) LIKE '%' || UPPER(BookNoIN) || '%';

          ELSIF TRIM(BookTitleIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1111';
              ErrorMsgOUT :=  'Attempting data fetch using Book Title';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_TITLE) LIKE '%' || UPPER(BookTitleIN) || '%';

          ELSIF TRIM(BookAuthorIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1112';
              ErrorMsgOUT :=  'Attempting data fetch using Book Author';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_AUTHOR) LIKE '%' || UPPER(BookAuthorIN) || '%';

          ELSIF TRIM(BookCoAuthorIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1113';
              ErrorMsgOUT :=  'Attempting data fetch using Book Co Author';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_CO_AUTHOR) LIKE '%' || UPPER(BookCoAuthorIN) || '%';

          ELSIF TRIM(BookSubjectIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1114';
              ErrorMsgOUT :=  'Attempting data fetch using Book Subject';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_SUBJECT) LIKE '%' || UPPER(BookSubjectIN) || '%';

          ELSIF TRIM(BookTypeIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1115';
              ErrorMsgOUT :=  'Attempting data fetch using Book Type';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_TYPE) LIKE '%' || UPPER(BookTypeIN) || '%';

          ELSIF TRIM(BookYearIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1116';
              ErrorMsgOUT :=  'Attempting data fetch using Book Year';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_YEAR) LIKE '%' || UPPER(BookYearIN) || '%';

          ELSIF TRIM(BookPublisherIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1117';
              ErrorMsgOUT :=  'Attempting data fetch using Book Publisher';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_PUBLISHER) LIKE '%' || UPPER(BookPublisherIN) || '%';

          ELSIF TRIM(BookRackNoIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1118';
              ErrorMsgOUT :=  'Attempting data fetch using Book Rack No';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_RACK_NO) LIKE '%' || UPPER(BookRackNoIN) || '%';

          ELSIF TRIM(BookRowNoIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1119';
              ErrorMsgOUT :=  'Attempting data fetch using Book Row No';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_ROW_NO) LIKE '%' || UPPER(BookRowNoIN) || '%';
          
          ELSIF TRIM(BookStatusIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1120';
              ErrorMsgOUT :=  'Attempting data fetch using Book Status';

              OPEN BookInfoCurOUT FOR
                  SELECT  BOOK_ID,
                          BOOK_NO,
                          BOOK_TITLE,
                          BOOK_AUTHOR,
                          BOOK_CO_AUTHOR,
                          BOOK_SUBJECT,
                          BOOK_TYPE,
                          BOOK_YEAR,
                          BOOK_PUBLISHER,
                          BOOK_RACK_NO,
                          BOOK_ROW_NO,
                          BOOK_STATUS
                  FROM    LOMS_BOOK_SHELF
                  WHERE   UPPER(BOOK_STATUS) LIKE '%' || UPPER(BookStatusIN) || '%';
          
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1121';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchBookInfo;

      PROCEDURE UpdateBookInfo
      (
          BookIdIN            IN        LOMS_BOOK_SHELF.BOOK_ID%TYPE,
          BookNoIN            IN        LOMS_BOOK_SHELF.BOOK_NO%TYPE,
          BookTitleIN         IN        LOMS_BOOK_SHELF.BOOK_TITLE%TYPE,
          BookAuthorIN        IN        LOMS_BOOK_SHELF.BOOK_AUTHOR%TYPE,
          BookCoAuthorIN      IN        LOMS_BOOK_SHELF.BOOK_CO_AUTHOR%TYPE,
          BookSubjectIN       IN        LOMS_BOOK_SHELF.BOOK_SUBJECT%TYPE,
          BookTypeIN          IN        LOMS_BOOK_SHELF.BOOK_TYPE%TYPE,
          BookYearIN          IN        LOMS_BOOK_SHELF.BOOK_YEAR%TYPE,
          BookPublisherIN     IN        LOMS_BOOK_SHELF.BOOK_PUBLISHER%TYPE,
          BookRackNoIN        IN        LOMS_BOOK_SHELF.BOOK_RACK_NO%TYPE,
          BookRowNoIN         IN        LOMS_BOOK_SHELF.BOOK_ROW_NO%TYPE,
          BookStatusIN        IN        LOMS_BOOK_SHELF.BOOK_STATUS%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      )
      IS
          UpdIST			      LOMS_BOOK_SHELF.UPD_IST%TYPE;
          UpdUserCd		      LOMS_BOOK_SHELF.UPD_USER_CD%TYPE;
          ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'UpdateBookInfo';
          KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN
          -- Process begins
          ErrorCdOUT  :=  'E1122';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'BookId: ' || BookIdIN;

          -- Select the user name
          SELECT  USER
          INTO    UpdUserCd
          FROM    DUAL;

          -- Select the date and time
          SELECT  SYSDATE
          INTO    UpdIST
          FROM    DUAL;

          ErrorCdOUT  :=  'E1123';
          ErrorMsgOUT :=  'Attempting data update';

          UPDATE  LOMS_BOOK_SHELF
          SET     BOOK_NO	          =     BookNoIN,
                  BOOK_TITLE	      =     BookTitleIN,
                  BOOK_AUTHOR	      =     BookAuthorIN,
                  BOOK_CO_AUTHOR	  =     BookCoAuthorIN,
                  BOOK_SUBJECT	    =     BookSubjectIN,
                  BOOK_TYPE	        =     BookTypeIN,
                  BOOK_YEAR	        =     BookYearIN,
                  BOOK_PUBLISHER	  =     BookPublisherIN,
                  BOOK_RACK_NO	    =     BookRackNoIN,
                  BOOK_ROW_NO	      =     BookRowNoIN,
                  BOOK_STATUS       =     BookStatusIN,
                  UPD_IST	          =     UpdIST,
                  UPD_USER_CD	      =     UpdUserCd
          WHERE   TRIM(BOOK_ID)     =     TRIM(BookIdIN);


          ErrorCdOUT  :=  'E1124';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data Found For Update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END UpdateBookInfo;

      PROCEDURE DeleteBookInfo
      (
          BookIdIN            IN        LOMS_BOOK_SHELF.BOOK_ID%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      )
      IS
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteBookInfo';
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN

          ErrorCdOUT  :=  'E1125';
          ErrorMsgOUT :=  'Process Initiated';

          IF TRIM(BookIdIN) IS NOT NULL THEN
              DELETE FROM LOMS_BOOK_SHELF
              WHERE TRIM(BOOK_ID) = TRIM(BookIdIN);
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1126';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DeleteBookInfo;

      PROCEDURE AddJdgmntInfo
      (
          JdgmntMonthIN           IN        LOMS_JDGMNT_INFO.JDGMNT_MONTH%TYPE,
          JdgmntYearIN            IN        LOMS_JDGMNT_INFO.JDGMNT_YEAR%TYPE,
          JdgmntDateIN            IN        VARCHAR2,
          JdgmntCourtIN           IN        LOMS_JDGMNT_INFO.JDGMNT_COURT%TYPE,
          JdgmntTitleIN           IN        LOMS_JDGMNT_INFO.JDGMNT_TITLE%TYPE,
          JdgmntBenchIN           IN        LOMS_JDGMNT_INFO.JDGMNT_BENCH%TYPE,
          JdgmntCitationIN        IN        LOMS_JDGMNT_INFO.JDGMNT_CITATION%TYPE,
          JdgmntCitatorInfoIN     IN        LOMS_JDGMNT_INFO.JDGMNT_CIT_INFO%TYPE,
          JdgmntActIN             IN        LOMS_JDGMNT_INFO.JDGMNT_ACT%TYPE,
          JdgmntDocNameIN         IN        LOMS_JDGMNT_INFO.JDGMNT_DOC_NAME%TYPE,
          JdgmntDocPathIN         IN        VARCHAR2,
          ErrorCdOUT              OUT       VARCHAR2,
          ErrorMsgOUT             OUT       VARCHAR2
      )
      IS
          JdgmntID                LOMS_JDGMNT_INFO.JDGMNT_ID%TYPE;
          DynamicQueryString      VARCHAR2(1000);
          SourceFile              BFILE;
          DestinationFile         BLOB;
          FileLength              BINARY_INTEGER;
          GenIST			            LOMS_JDGMNT_INFO.GEN_IST%TYPE;
          GenUserCd		            LOMS_JDGMNT_INFO.GEN_USER_CD%TYPE;
          ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddJdgmntInfo';
          KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
      BEGIN

          ErrorCdOUT  :=  'E1127';
          ErrorMsgOUT :=  'Process Initiated';

          KeyValue := 'JdgmntDate: ' || JdgmntDateIN  || ', ' || 'JdgmntCourt: ' || JdgmntCourtIN || ', ' ||
                      'JdgmntTitle: '|| JdgmntTitleIN;

          SELECT  LOMS_JI_JDGMNT_ID_SEQ.NEXTVAL
          INTO    JdgmntID
          FROM    DUAL;

          -- Select the user name
          SELECT  USER
          INTO    GenUserCd
          FROM    DUAL;

          -- Select the sysdate
          SELECT  SYSDATE
          INTO    GenIST
          FROM    DUAL;

          --Create Document Folder
          DynamicQueryString  := 'GRANT CREATE ANY DIRECTORY TO ' || GenUserCd;
          EXECUTE IMMEDIATE (DynamicQueryString);
          DynamicQueryString  := 'CREATE OR REPLACE DIRECTORY LOMS_IMAGES_UPLOAD AS ' || CHR(39) || JdgmntDocPathIN || CHR(39);
          EXECUTE IMMEDIATE (DynamicQueryString);

          SourceFile := bfilename('LOMS_IMAGES_UPLOAD', JdgmntDocNameIN);

          -- insert a NULL record to lock
          INSERT INTO LOMS_JDGMNT_INFO( JDGMNT_ID,
                                        JDGMNT_MONTH,
                                        JDGMNT_YEAR,
                                        JDGMNT_DATE,
                                        JDGMNT_COURT,
                                        JDGMNT_TITLE,
                                        JDGMNT_BENCH,
                                        JDGMNT_CITATION,
                                        JDGMNT_CIT_INFO,
                                        JDGMNT_ACT,
                                        JDGMNT_DOC_NAME,
                                        JDGMNT_DOC,
                                        GEN_IST,
                                        GEN_USER_CD,
                                        UPD_IST,
                                        UPD_USER_CD
                                       )
          VALUES                       (JdgmntID,
                                        JdgmntMonthIN,
                                        JdgmntYearIN,
                                        TO_DATE(JdgmntDateIN,'DD/MM/YYYY'),
                                        JdgmntCourtIN,
                                        JdgmntTitleIN,
                                        JdgmntBenchIN,
                                        JdgmntCitationIN,
                                        JdgmntCitatorInfoIN,
                                        JdgmntActIN,
                                        JdgmntDocNameIN,
                                        EMPTY_BLOB(),
                                        GenIST,
                                        GenUserCd,
                                        GenIST,
                                        GenUserCd)
          RETURNING JDGMNT_DOC INTO DestinationFile;

          -- lock record
          SELECT    JDGMNT_DOC
          INTO      DestinationFile
          FROM      LOMS_JDGMNT_INFO
          WHERE     JDGMNT_ID = JdgmntID
          FOR UPDATE;

          -- Open the file
          dbms_lob.fileopen(SourceFile, dbms_lob.file_readonly);

          -- Determine length
          FileLength := dbms_lob.getlength(SourceFile);

          -- read the file
          dbms_lob.loadfromfile(DestinationFile, SourceFile, FileLength);

          -- Update the blob field
          UPDATE  LOMS_JDGMNT_INFO
          SET     JDGMNT_DOC  = DestinationFile
          WHERE   JDGMNT_ID   = JdgmntID;

          dbms_lob.fileclose(SourceFile);

          --dbms_output.put_line('I am here # 5');

          ErrorCdOUT  :=  'E1128';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END AddJdgmntInfo;

      PROCEDURE SearchJdgmntInfo
      (
          JdgmntMonthIN           IN        LOMS_JDGMNT_INFO.JDGMNT_MONTH%TYPE,
          JdgmntYearIN            IN        LOMS_JDGMNT_INFO.JDGMNT_YEAR%TYPE,
          JdgmntCourtIN           IN        LOMS_JDGMNT_INFO.JDGMNT_COURT%TYPE,
          JdgmntTitleIN           IN        LOMS_JDGMNT_INFO.JDGMNT_TITLE%TYPE,
          JdgmntBenchIN           IN        LOMS_JDGMNT_INFO.JDGMNT_BENCH%TYPE,
          JdgmntCitationIN        IN        LOMS_JDGMNT_INFO.JDGMNT_CITATION%TYPE,
          JdgmntCitatorInfoIN     IN        LOMS_JDGMNT_INFO.JDGMNT_CIT_INFO%TYPE,
          JdgmntActIN             IN        LOMS_JDGMNT_INFO.JDGMNT_ACT%TYPE,
          FromDateIN              IN        VARCHAR2,
          ToDateIN                IN        VARCHAR2,
          JdgmntInfoCurOUT        OUT       LOMS_OFFICE_PKG.JDGMNT_INFO_REF_CUR_TYPE,
          ErrorCdOUT              OUT       VARCHAR2,
          ErrorMsgOUT             OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchJdgmntInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          ErrorCdOUT  :=  'E1129';
          ErrorMsgOUT :=  'Process Initiated';

          IF TRIM(JdgmntMonthIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1130';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Month';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   UPPER(TRIM(JDGMNT_MONTH)) = UPPER(TRIM(JdgmntMonthIN));

          ELSIF TRIM(JdgmntYearIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1131';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Year';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   UPPER(TRIM(JDGMNT_YEAR)) = UPPER(TRIM(JdgmntYearIN));

          ELSIF TRIM(JdgmntCourtIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1132';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Court';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   UPPER(TRIM(JDGMNT_COURT)) LIKE '%' || UPPER(TRIM(JdgmntCourtIN)) || '%';
                  
          ELSIF TRIM(JdgmntTitleIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1133';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Title';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   UPPER(TRIM(JDGMNT_TITLE)) LIKE '%' || UPPER(TRIM(JdgmntTitleIN)) || '%';

          ELSIF TRIM(JdgmntBenchIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1134';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Bench';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   UPPER(TRIM(JDGMNT_BENCH)) LIKE '%' || UPPER(TRIM(JdgmntBenchIN)) || '%';

          ELSIF TRIM(JdgmntCitationIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1135';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Citation';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   UPPER(TRIM(JDGMNT_CITATION)) LIKE '%' || UPPER(TRIM(JdgmntCitationIN)) || '%';

          ELSIF TRIM(JdgmntCitatorInfoIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1136';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Citator Info';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   UPPER(TRIM(JDGMNT_CIT_INFO)) LIKE '%' || UPPER(TRIM(JdgmntCitatorInfoIN)) || '%';

          ELSIF TRIM(JdgmntActIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1137';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Act';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   UPPER(TRIM(JDGMNT_ACT)) LIKE '%' || UPPER(TRIM(JdgmntActIN)) || '%';

          ELSIF TRIM(FromDateIN) IS NOT NULL AND TRIM(ToDateIN) IS NOT NULL THEN

              ErrorCdOUT  :=  'E1138';
              ErrorMsgOUT :=  'Attempting Data fetch using Judgment Date Range';

              OPEN JdgmntInfoCurOUT FOR
                  SELECT  JDGMNT_ID,
                          JDGMNT_MONTH,
                          JDGMNT_YEAR,
                          JDGMNT_DATE,
                          JDGMNT_COURT,
                          JDGMNT_TITLE,
                          JDGMNT_BENCH,
                          JDGMNT_CITATION,
                          JDGMNT_CIT_INFO,
                          JDGMNT_ACT
                  FROM    LOMS_JDGMNT_INFO
                  WHERE   TRUNC(JDGMNT_DATE) >= TO_DATE(FromDateIN,'DD/MM/YYYY')
                  AND     TRUNC(JDGMNT_DATE) <= TO_DATE(ToDateIN,'DD/MM/YYYY');

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1139';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchJdgmntInfo;

      PROCEDURE DownloadJdgmntInfo
      (
          JdgmntIDIN          IN        LOMS_JDGMNT_INFO.JDGMNT_ID%TYPE,
          ErrorCdOUT          OUT       VARCHAR2,
          ErrorMsgOUT         OUT       VARCHAR2
      )
      IS
          OutputFile        utl_file.file_type;
          JdgmntDoc         BLOB;
          DocumentName      VARCHAR2(1000);
          ChunkSize         constant pls_integer := 4096;
          buf               raw (4096);
          WrittenSoFar      pls_integer := 0;
          BytesToWrite      pls_integer;
          LobLength         pls_integer;
          ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DownloadJdgmntInfo';
          KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;

      BEGIN

          ErrorCdOUT  :=  'E1140';
          ErrorMsgOUT :=  'Process Initiated';

          SELECT  JDGMNT_DOC
          INTO    JdgmntDoc
          FROM    LOMS_JDGMNT_INFO
          WHERE   JDGMNT_ID = JdgmntIDIN;

          LobLength := dbms_lob.getlength(JdgmntDoc);

          SELECT  JDGMNT_DOC_NAME
          INTO    DocumentName
          FROM    LOMS_JDGMNT_INFO
          WHERE   JDGMNT_ID = JdgmntIDIN;

          OutputFile := utl_file.fopen('LOMS_IMAGES_DOWNLOAD', DocumentName, 'WB');

          while WrittenSoFar + ChunkSize < LobLength loop

              BytesToWrite := ChunkSize;

              dbms_lob.read(JdgmntDoc, BytesToWrite, WrittenSoFar + 1, buf);

              utl_file.put_raw(OutputFile, buf);

              WrittenSoFar := WrittenSoFar + ChunkSize;

          end loop;

          BytesToWrite := LobLength - WrittenSoFar;

          dbms_lob.read(JdgmntDoc,BytesToWrite, WrittenSoFar + 1, buf);

          utl_file.put_raw(OutputFile,buf);

          utl_file.fclose(OutputFile);

          ErrorCdOUT  :=  'E1141';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'No data found for update';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT    :=  'E9999';
              ErrorMsgOUT   :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DownloadJdgmntInfo;

      PROCEDURE DeleteOpponentInfo
      (
          OpponentNoIN          IN        LOMS_OPPONENT_INFO.OPPONENT_NO%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          CaseNo                      LOMS_CASE_INFO.CASE_NO_1%TYPE;
          ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteOpponentInfo';
          KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION     EXCEPTION;
      BEGIN

          KeyValue := 'OpponentNo: ' || OpponentNoIN;

          ErrorCdOUT  :=  'E1142';
          ErrorMsgOUT :=  'Process Initiated';

          IF TRIM(OpponentNoIN) IS NOT NULL THEN

              DELETE FROM LOMS_OPPONENT_INFO
              WHERE TRIM(OPPONENT_NO) = TRIM(OpponentNoIN);

          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1143';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END DeleteOpponentInfo;

      PROCEDURE SearchOpponentInfoForUpdate
      (
          OpponentNoIN          IN        LOMS_OPPONENT_INFO.OPPONENT_NO%TYPE,
          OppInfoCurOUT         OUT       LOMS_OFFICE_PKG.OPP_INFO_UPD_REF_CUR_TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
      )
      IS
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchOpponentInfoForUpdate';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
      BEGIN

          KeyValue := 'OpponentNo: ' || OpponentNoIN;

          ErrorCdOUT  :=  'E1144';
          ErrorMsgOUT :=  'Process Initiated';

          IF TRIM(OpponentNoIN) IS NOT NULL THEN
              -- Opponent Information
              OPEN OppInfoCurOUT FOR
                  SELECT  OPPONENT_NO,
                          CASE_ID,
                          CLIENT_ID,
                          OPP_PARTY_NAME,
                          OPP_PARTY_ADDRESS,
                          OPP_PARTY_TEL_NO,
                          OPP_PARTY_MOB_NO,
                          OPP_PARTY_EMAIL_ID,
                          OPP_PARTY_ORG_NAME,
                          OPP_PARTY_ORG_REP,
                          OPP_PARTY_ORG_ADDRESS,
                          OPP_PARTY_ORG_TEL_NO,
                          OPP_PARTY_ORG_MOB_NO,
                          OPP_PARTY_ORG_EMAIL_ID,
                          OPP_LAWYER_NAME,
                          OPP_LAWYER_ADDRESS,
                          OPP_LAWYER_TEL_NO,
                          OPP_LAWYER_MOB_NO,
                          OPP_LAWYER_EMAIL_ID
                  FROM    LOMS_OPPONENT_INFO
                  WHERE   TRIM(UPPER(OPPONENT_NO)) = UPPER(OpponentNoIN);
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;

          ErrorCdOUT  :=  'E1145';
          ErrorMsgOUT :=  'Processing Successful';

      EXCEPTION
          WHEN INVALID_INPUT_EXCEPTION THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Invalid Input Data';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN NO_DATA_FOUND THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
          WHEN OTHERS THEN
              ErrorCdOUT  :=  'E9999';
              ErrorMsgOUT :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
      END SearchOpponentInfoForUpdate;

      FUNCTION CheckIfEmailEnabled
      RETURN VARCHAR2
      IS
          EmailEnabledFlag         VARCHAR2(5);
          ErrorCd                  VARCHAR2(10);
          ErrorMsg                 VARCHAR2(2000);
          ProcessName              LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'CheckIfEmailEnabled';
      BEGIN

          SELECT  EMAIL_ENABLED_FLG
          INTO    EmailEnabledFlag
          FROM    LOMS_APP_MASTER;

          RETURN NVL(EmailEnabledFlag,'N');

      EXCEPTION
           WHEN NO_DATA_FOUND THEN
              ErrorCd  :=  'E9999';
              ErrorMsg :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCd,ErrorMsg,NULL,NULL);
              RETURN 'N';
          WHEN OTHERS THEN
              ErrorCd  :=  'E9999';
              ErrorMsg :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
              RETURN 'N';
      END CheckIfEmailEnabled;

      FUNCTION CheckIfSMSEnabled
      RETURN VARCHAR2
      IS
          SMSEnabledFlag           VARCHAR2(5);
          ErrorCd                  VARCHAR2(10);
          ErrorMsg                 VARCHAR2(2000);
          ProcessName              LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'CheckIfSMSEnabled';
      BEGIN

          SELECT  NVL(SMS_ENABLED_FLG,'N')
          INTO    SMSEnabledFlag
          FROM    LOMS_APP_MASTER;

          RETURN NVL(SMSEnabledFlag,'N');

      EXCEPTION
           WHEN NO_DATA_FOUND THEN
              ErrorCd  :=  'E9999';
              ErrorMsg :=  'No Data found';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCd,ErrorMsg,NULL,NULL);
              RETURN 'N';
          WHEN OTHERS THEN
              ErrorCd  :=  'E9999';
              ErrorMsg :=  'Unexpected error while processing';
              LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
              RETURN 'N';
      END CheckIfSMSEnabled;

END LOMS_OFFICE_PKG;

/

--  DDL for Package Body LOMS_STD_INFO_PKG

CREATE OR REPLACE PACKAGE BODY LOMS_STD_INFO_PKG AS

    PROCEDURE AddCourtInfo
    (
        CourtNameIN	        IN      LOMS_COURT_INFO.COURT_NAME%TYPE,
        CourtTypeIN	        IN      LOMS_COURT_INFO.COURT_TYPE%TYPE,
        CourtAddressIN      IN      LOMS_COURT_INFO.COURT_ADDRESS%TYPE,
        CourtCityIN         IN	    LOMS_COURT_INFO.COURT_CITY%TYPE,
        CourtDistrictIN     IN      LOMS_COURT_INFO.COURT_DISTRICT%TYPE,
        CourtStateIN  	    IN      LOMS_COURT_INFO.COURT_STATE%TYPE,
        CourtCountryIN      IN      LOMS_COURT_INFO.COURT_COUNTRY%TYPE,
        CommentsIN          IN      LOMS_COURT_INFO.COMMENTS%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    AS
        CourtID                 LOMS_COURT_INFO.COURT_ID%TYPE;
        CourtCounter            NUMBER := 0;
        GenIST			            LOMS_COURT_INFO.GEN_IST%TYPE;
        GenUserCd		            LOMS_COURT_INFO.GEN_USER_CD%TYPE;
        ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddCourtInfo';
        KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        MULT_ENT_EXCEPTION      EXCEPTION;
    BEGIN
        -- Process Begins
        ErrorCdOUT  :=  'E2001';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'CourtName: '   || CourtNameIN  || ', ' || 'CourtType: '    || CourtTypeIN     || ', ' ||
                        'CourtCity: '   || CourtCityIN  || ', ' || 'CourtDistrict: '|| CourtDistrictIN || ', ' ||
                        'CourtState: '  || CourtStateIN || ', ' || 'CourtCountry: ' || CourtCountryIN;

        SELECT  COUNT(COURT_NAME)
        INTO    CourtCounter
        FROM    LOMS_COURT_INFO
        WHERE   UPPER(COURT_NAME)       =   UPPER(CourtNameIN)
        AND     UPPER(COURT_TYPE)       =   UPPER(CourtTypeIN)
        AND     UPPER(COURT_CITY)       =   UPPER(CourtCityIN)
        AND     UPPER(COURT_DISTRICT)   =   UPPER(CourtDistrictIN)
        AND     UPPER(COURT_STATE)      =   UPPER(CourtStateIN)
        AND     UPPER(COURT_ADDRESS)    =   UPPER(CourtAddressIN);

        IF NVL(CourtCounter,0) = 0 THEN
            -- Generating Court ID
            SELECT  LOMS_COURT_ID_SEQ.NEXTVAL
            INTO    CourtID
            FROM    DUAL;

            -- Select the user name
            SELECT  USER
            INTO    GenUserCd
            FROM    DUAL;

            -- Select the sysdate
            SELECT  SYSDATE
            INTO    GenIST
            FROM    DUAL;

            INSERT INTO LOMS_COURT_INFO(COURT_ID,
                                        COURT_NAME,
                                        COURT_TYPE,
                                        COURT_ADDRESS,
                                        COURT_CITY,
                                        COURT_DISTRICT,
                                        COURT_STATE,
                                        COURT_COUNTRY,
                                        COMMENTS,
                                        GEN_IST,
                                        GEN_USER_CD,
                                        UPD_IST,
                                        UPD_USER_CD)
                VALUES                 (CourtID,
                                        UPPER(CourtNameIN),
                                        UPPER(CourtTypeIN),
                                        CourtAddressIN,
                                        UPPER(CourtCityIN),
                                        UPPER(CourtDistrictIN),
                                        UPPER(CourtStateIN),
                                        UPPER(CourtCountryIN),
                                        CommentsIN,
                                        GenIST,
                                        GenUserCd,
                                        GenIST,
                                        GenUserCd);

            ErrorCdOUT  :=  'E2002';
            ErrorMsgOUT :=  'Processing Successful';
        ELSE
            RAISE MULT_ENT_EXCEPTION;
        END IF;

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Court Detail already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END AddCourtInfo;

    PROCEDURE ModifyCourtInfo
    (
        CourtIDIN           IN	    LOMS_COURT_INFO.COURT_ID%TYPE,
        CourtNameIN	        IN      LOMS_COURT_INFO.COURT_NAME%TYPE,
        CourtTypeIN	        IN      LOMS_COURT_INFO.COURT_TYPE%TYPE,
        CourtAddressIN      IN      LOMS_COURT_INFO.COURT_ADDRESS%TYPE,
        CourtCityIN         IN	    LOMS_COURT_INFO.COURT_CITY%TYPE,
        CourtDistrictIN     IN      LOMS_COURT_INFO.COURT_DISTRICT%TYPE,
        CourtStateIN  	    IN      LOMS_COURT_INFO.COURT_STATE%TYPE,
        CourtCountryIN      IN      LOMS_COURT_INFO.COURT_COUNTRY%TYPE,
        CommentsIN          IN      LOMS_COURT_INFO.COMMENTS%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        CourtCounter            NUMBER := 0;
        UpdIST			            LOMS_COURT_INFO.UPD_IST%TYPE;
        UpdUserCd		            LOMS_COURT_INFO.UPD_USER_CD%TYPE;
        ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyCourtInfo';
        KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        MULT_ENT_EXCEPTION      EXCEPTION;
    BEGIN
        -- Process Begins
        ErrorCdOUT  :=  'E2003';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'CourtName: '   || CourtNameIN  || ', ' || 'CourtType: '    || CourtTypeIN     || ', ' ||
                        'CourtCity: '   || CourtCityIN  || ', ' || 'CourtDistrict: '|| CourtDistrictIN || ', ' ||
                        'CourtState: '  || CourtStateIN || ', ' || 'CourtCountry: ' || CourtCountryIN  || ', ' ||
                        'CourtID: '     || CourtIDIN;

        SELECT  COUNT(COURT_NAME)
        INTO    CourtCounter
        FROM    LOMS_COURT_INFO
        WHERE   UPPER(COURT_NAME)       =   UPPER(CourtNameIN)
        AND     UPPER(COURT_TYPE)       =   UPPER(CourtTypeIN)
        AND     UPPER(COURT_CITY)       =   UPPER(CourtCityIN)
        AND     UPPER(COURT_DISTRICT)   =   UPPER(CourtDistrictIN)
        AND     UPPER(COURT_STATE)      =   UPPER(CourtStateIN)
        AND     UPPER(COURT_ADDRESS)    =   UPPER(CourtAddressIN);

        IF NVL(CourtCounter,0) = 0 THEN
            -- Select the user name
            SELECT  USER
            INTO    UpdUserCd
            FROM    DUAL;

            -- Select the sysdate
            SELECT  SYSDATE
            INTO    UpdIST
            FROM    DUAL;

            UPDATE  LOMS_COURT_INFO
            SET     COURT_NAME        =   UPPER(CourtNameIN),
                    COURT_TYPE        =   UPPER(CourtTypeIN),
                    COURT_ADDRESS     =   CourtAddressIN,
                    COURT_CITY        =   UPPER(CourtCityIN),
                    COURT_DISTRICT    =   UPPER(CourtDistrictIN),
                    COURT_STATE       =   UPPER(CourtStateIN),
                    COURT_COUNTRY     =   UPPER(CourtCountryIN),
                    COMMENTS          =   CommentsIN,
                    UPD_IST           =   UpdIST,
                    UPD_USER_CD       =   UpdUserCd
            WHERE   COURT_ID          =   CourtIDIN;
        ELSE
            RAISE MULT_ENT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E2004';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Court Detail already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data Found For Update';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ModifyCourtInfo;

    PROCEDURE SearchCourtInfo
    (
        CourtIDIN           IN      LOMS_COURT_INFO.COURT_ID%TYPE,
        CourtNameIN         IN      LOMS_COURT_INFO.COURT_NAME%TYPE,
        CourtTypeIN         IN      LOMS_COURT_INFO.COURT_TYPE%TYPE,
        CourtCityIN         IN      LOMS_COURT_INFO.COURT_CITY%TYPE,
        CourtDistIN         IN      LOMS_COURT_INFO.COURT_DISTRICT%TYPE,
        CourtStateIN        IN      LOMS_COURT_INFO.COURT_STATE%TYPE,
        CourtCountryIN      IN      LOMS_COURT_INFO.COURT_COUNTRY%TYPE,
        CourtInfoCurOUT     OUT     LOMS_STD_INFO_PKG.COURT_INFO_REF_CUR_TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        ProcessName           LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'SearchCourtInfo';
        KeyValue              LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN

        ErrorCdOUT  :=  'E2005';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'CourtName: '   || CourtNameIN  || ', ' || 'CourtType: '    || CourtTypeIN     || ', ' ||
                        'CourtCity: '   || CourtCityIN  || ', ' || 'CourtDistrict: '|| CourtDistIN     || ', ' ||
                        'CourtState: '  || CourtStateIN || ', ' || 'CourtCountry: ' || CourtCountryIN  || ', ' ||
                        'CourtID: '     || CourtIDIN;

        IF CourtIDIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E2006';
            ErrorMsgOUT :=  'Attempting data fetch using Court ID';

            OPEN CourtInfoCurOUT FOR
            SELECT  COURT_ID,
                    COURT_NAME,
                    COURT_TYPE,
                    COURT_ADDRESS,
                    COURT_CITY,
                    COURT_DISTRICT,
                    COURT_STATE,
                    COURT_COUNTRY,
                    COMMENTS
            FROM    LOMS_COURT_INFO
            WHERE   UPPER(COURT_ID) = UPPER(CourtIDIN);

        ELSIF CourtNameIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E2007';
            ErrorMsgOUT :=  'Attempting data fetch using Court Name';

            OPEN CourtInfoCurOUT FOR
            SELECT  COURT_ID,
                    COURT_NAME,
                    COURT_TYPE,
                    COURT_ADDRESS,
                    COURT_CITY,
                    COURT_DISTRICT,
                    COURT_STATE,
                    COURT_COUNTRY,
                    COMMENTS
            FROM    LOMS_COURT_INFO
            WHERE   UPPER(COURT_NAME) LIKE '%' ||  UPPER(CourtNameIN) || '%';

        ELSIF CourtTypeIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E2008';
            ErrorMsgOUT :=  'Attempting data fetch using Court Type';

            OPEN CourtInfoCurOUT FOR
            SELECT  COURT_ID,
                    COURT_NAME,
                    COURT_TYPE,
                    COURT_ADDRESS,
                    COURT_CITY,
                    COURT_DISTRICT,
                    COURT_STATE,
                    COURT_COUNTRY,
                    COMMENTS
            FROM    LOMS_COURT_INFO
            WHERE   UPPER(COURT_TYPE) LIKE '%' || UPPER(CourtTypeIN) || '%';

        ELSIF CourtCityIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E2009';
            ErrorMsgOUT :=  'Attempting data fetch using Court City';

            OPEN CourtInfoCurOUT FOR
            SELECT  COURT_ID,
                    COURT_NAME,
                    COURT_TYPE,
                    COURT_ADDRESS,
                    COURT_CITY,
                    COURT_DISTRICT,
                    COURT_STATE,
                    COURT_COUNTRY,
                    COMMENTS
            FROM    LOMS_COURT_INFO
            WHERE   UPPER(COURT_CITY) LIKE '%' || UPPER(CourtCityIN) || '%';

        ELSIF CourtDistIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E2010';
            ErrorMsgOUT :=  'Attempting data fetch using Court District';

            OPEN CourtInfoCurOUT FOR
            SELECT  COURT_ID,
                    COURT_NAME,
                    COURT_TYPE,
                    COURT_ADDRESS,
                    COURT_CITY,
                    COURT_DISTRICT,
                    COURT_STATE,
                    COURT_COUNTRY,
                    COMMENTS
            FROM    LOMS_COURT_INFO
            WHERE   UPPER(COURT_DISTRICT) LIKE '%' || UPPER(CourtDistIN) || '%';

        ELSIF CourtStateIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E2011';
            ErrorMsgOUT :=  'Attempting data fetch using Court State';

            OPEN CourtInfoCurOUT FOR
            SELECT  COURT_ID,
                    COURT_NAME,
                    COURT_TYPE,
                    COURT_ADDRESS,
                    COURT_CITY,
                    COURT_DISTRICT,
                    COURT_STATE,
                    COURT_COUNTRY,
                    COMMENTS
            FROM    LOMS_COURT_INFO
            WHERE   UPPER(COURT_STATE) LIKE '%' || UPPER(CourtStateIN) || '%';

        ELSIF CourtCountryIN IS NOT NULL THEN

            ErrorCdOUT  :=  'E2012';
            ErrorMsgOUT :=  'Attempting data fetch using Court Country';

            OPEN CourtInfoCurOUT FOR
            SELECT  COURT_ID,
                    COURT_NAME,
                    COURT_TYPE,
                    COURT_ADDRESS,
                    COURT_CITY,
                    COURT_DISTRICT,
                    COURT_STATE,
                    COURT_COUNTRY,
                    COMMENTS
            FROM    LOMS_COURT_INFO
            WHERE   UPPER(COURT_COUNTRY) LIKE '%' || UPPER(CourtCountryIN) || '%';
        ELSE
            OPEN CourtInfoCurOUT FOR
            SELECT  COURT_ID,
                    COURT_NAME,
                    COURT_TYPE,
                    COURT_ADDRESS,
                    COURT_CITY,
                    COURT_DISTRICT,
                    COURT_STATE,
                    COURT_COUNTRY,
                    COMMENTS
            FROM    LOMS_COURT_INFO
            WHERE   COURT_ID IS NOT NULL;
        END IF;

        ErrorCdOUT  :=  'E2013';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
    END SearchCourtInfo;

    PROCEDURE DeleteCourtInfo
    (
        CourtIDIN           IN      LOMS_COURT_INFO.COURT_ID%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteCourtInfo';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
    BEGIN

        ErrorCdOUT  :=  'E2014';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'CourtID: ' || CourtIDIN;

        IF CourtIDIN IS NOT NULL THEN
            DELETE FROM LOMS_COURT_INFO
            WHERE COURT_ID = CourtIDIN;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E2015';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END DeleteCourtInfo;

    PROCEDURE AddCivilSuiteType
    (
        SuiteTypeIN         IN      LOMS_CIVIL_SUIT_TYPE.SUITE_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        SuiteID                   LOMS_CIVIL_SUIT_TYPE.SUITE_ID%TYPE;
        CivilSuiteCounter         NUMBER := 0;
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddCivilSuiteType';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        GenIST                    LOMS_CIVIL_SUIT_TYPE.GEN_IST%TYPE;
        GenUserCd                 LOMS_CIVIL_SUIT_TYPE.GEN_USER_CD%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
        MULT_ENT_EXCEPTION        EXCEPTION;
    BEGIN
        ErrorCdOUT  :=  'E2016';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'SuiteType: ' || SuiteTypeIN;

        IF SuiteTypeIN IS NOT NULL THEN

            SELECT  COUNT(SUITE_TYPE)
            INTO    CivilSuiteCounter
            FROM    LOMS_CIVIL_SUIT_TYPE
            WHERE   UPPER(SUITE_TYPE) = UPPER(SuiteTypeIN);

            IF NVL(CivilSuiteCounter,0) = 0 THEN
                ErrorCdOUT  :=  'E2017';
                ErrorMsgOUT :=  'Attempting Data Insert';

                --Generating Suite ID
                SELECT  LOMS_CS_SUITE_ID_SEQ.NEXTVAL
                INTO    SuiteID
                FROM    DUAL;

                -- Select the user name
                SELECT  USER
                INTO    GenUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    GenIST
                FROM    DUAL;

                INSERT INTO LOMS_CIVIL_SUIT_TYPE ( SUITE_ID,
                                                          SUITE_TYPE,
                                                          GEN_IST,
                                                          GEN_USER_CD,
                                                          UPD_IST,
                                                          UPD_USER_CD)
                VALUES                                  ( SuiteID,
                                                          UPPER(SuiteTypeIN),
                                                          GenIST,
                                                          GenUserCd,
                                                          GenIST,
                                                          GenUserCd);
            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E2018';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Civil Suite Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END AddCivilSuiteType;

    PROCEDURE ModifyCivilSuiteType
    (
        SuiteIDIN           IN      LOMS_CIVIL_SUIT_TYPE.SUITE_ID%TYPE,
        SuiteTypeIN         IN      LOMS_CIVIL_SUIT_TYPE.SUITE_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        CivilSuiteCounter       NUMBER := 0;
        ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyCivilSuiteType';
        KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        UpdIST                  LOMS_CIVIL_SUIT_TYPE.UPD_IST%TYPE;
        UpdUserCd               LOMS_CIVIL_SUIT_TYPE.UPD_USER_CD%TYPE;
        MULT_ENT_EXCEPTION      EXCEPTION;
    BEGIN

        ErrorCdOUT  :=  'E2019';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'SuiteID: ' || SuiteIDIN || ', ' ||'SuiteType: ' || SuiteTypeIN;

        SELECT  COUNT(SUITE_TYPE)
        INTO    CivilSuiteCounter
        FROM    LOMS_CIVIL_SUIT_TYPE
        WHERE   UPPER(SUITE_TYPE) = UPPER(SuiteTypeIN);

        IF NVL(CivilSuiteCounter,0) = 0 THEN
            -- Select the user name
            SELECT  USER
            INTO    UpdUserCd
            FROM    DUAL;

            -- Select the sysdate
            SELECT  SYSDATE
            INTO    UpdIST
            FROM    DUAL;

            UPDATE  LOMS_CIVIL_SUIT_TYPE
            SET     SUITE_TYPE    =   UPPER(SuiteTypeIN),
                    UPD_IST       =   UpdIST,
                    UPD_USER_CD   =   UpdUserCd
            WHERE   SUITE_ID      =   SuiteIDIN;
        ELSE
            RAISE MULT_ENT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E2020';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Civil Suite Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ModifyCivilSuiteType;

    PROCEDURE DeleteSuiteType
    (
        SuiteIDIN           IN      LOMS_CIVIL_SUIT_TYPE.SUITE_ID%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteSuiteType';
        KeyValue          VARCHAR2(1000);
    BEGIN

        ErrorCdOUT  :=  'E2021';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'SuiteID: ' || SuiteIDIN;

        DELETE FROM LOMS_CIVIL_SUIT_TYPE
        WHERE       SUITE_ID      =   SuiteIDIN;

        ErrorCdOUT  :=  'E2022';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END DeleteSuiteType;

    PROCEDURE GetCivilSuiteType
    (
        CivilSuiteCurOUT    OUT     LOMS_STD_INFO_PKG.CIVIL_SUITE_REF_CUR_TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetCivilSuiteType';
    BEGIN
        ErrorCdOUT  :=  'E2023';
        ErrorMsgOUT :=  'Process Initiated';

        OPEN CivilSuiteCurOUT FOR
            SELECT  SUITE_ID,
                    UPPER(SUITE_TYPE)
            FROM    LOMS_CIVIL_SUIT_TYPE;

        ErrorCdOUT  :=  'E2024';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetCivilSuiteType;

    PROCEDURE AddCivilAppealType
    (
        AppealTypeIN        IN      LOMS_CIVIL_APPEAL_TYPE.APPEAL_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        AppealID                  LOMS_CIVIL_APPEAL_TYPE.APPEAL_ID%TYPE;
        CivilAppealCounter        NUMBER := 0;
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddCivilAppealType';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        GenIST                    LOMS_CIVIL_APPEAL_TYPE.GEN_IST%TYPE;
        GenUserCd                 LOMS_CIVIL_APPEAL_TYPE.GEN_USER_CD%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
        MULT_ENT_EXCEPTION        EXCEPTION;
    BEGIN
        ErrorCdOUT  :=  'E2025';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'AppealType: ' || AppealTypeIN;

        IF AppealTypeIN IS NOT NULL THEN

            SELECT  COUNT(APPEAL_TYPE)
            INTO    CivilAppealCounter
            FROM    LOMS_CIVIL_APPEAL_TYPE
            WHERE   UPPER(APPEAL_TYPE) = UPPER(AppealTypeIN);

            IF NVL(CivilAppealCounter,0) = 0 THEN
                ErrorCdOUT  :=  'E2026';
                ErrorMsgOUT :=  'Attempting Data Insert';

                --Generating Suite ID
                SELECT  LOMS_CA_APP_ID_SEQ.NEXTVAL
                INTO    AppealID
                FROM    DUAL;

                -- Select the user name
                SELECT  USER
                INTO    GenUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    GenIST
                FROM    DUAL;

                INSERT INTO LOMS_CIVIL_APPEAL_TYPE(APPEAL_ID,
                                                          APPEAL_TYPE,
                                                          GEN_IST,
                                                          GEN_USER_CD,
                                                          UPD_IST,
                                                          UPD_USER_CD)
                VALUES                                  ( AppealID,
                                                          UPPER(AppealTypeIN),
                                                          GenIST,
                                                          GenUserCd,
                                                          GenIST,
                                                          GenUserCd);
            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E2027';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Civil Appeal Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END AddCivilAppealType;

    PROCEDURE ModifyCivilAppealType
    (
        AppealIDIN          IN      LOMS_CIVIL_APPEAL_TYPE.APPEAL_ID%TYPE,
        AppealTypeIN        IN      LOMS_CIVIL_APPEAL_TYPE.APPEAL_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        CivilAppealCounter      NUMBER := 0;
        ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyCivilAppealType';
        KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        UpdIST                  LOMS_CIVIL_APPEAL_TYPE.UPD_IST%TYPE;
        UpdUserCd               LOMS_CIVIL_APPEAL_TYPE.UPD_USER_CD%TYPE;
        MULT_ENT_EXCEPTION      EXCEPTION;
    BEGIN

        ErrorCdOUT  :=  'E2028';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'AppealID: ' || AppealIDIN || ', ' || 'AppealType: ' || AppealTypeIN;

        IF AppealTypeIN IS NOT NULL THEN

            SELECT  COUNT(APPEAL_TYPE)
            INTO    CivilAppealCounter
            FROM    LOMS_CIVIL_APPEAL_TYPE
            WHERE   UPPER(APPEAL_TYPE) = UPPER(AppealTypeIN);

            IF NVL(CivilAppealCounter,0) = 0 THEN
                -- Select the user name
                SELECT  USER
                INTO    UpdUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    UpdIST
                FROM    DUAL;

                UPDATE  LOMS_CIVIL_APPEAL_TYPE
                SET     APPEAL_TYPE   =   UPPER(AppealTypeIN),
                        UPD_IST       =   UpdIST,
                        UPD_USER_CD   =   UpdUserCd
                WHERE   APPEAL_ID     =   AppealIDIN;
            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;
        END IF;

        ErrorCdOUT  :=  'E2029';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Civil Appeal Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ModifyCivilAppealType;

    PROCEDURE DeleteCivilAppealType
    (
        AppealIDIN          IN      LOMS_CIVIL_APPEAL_TYPE.APPEAL_ID%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteCivilAppealType';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        ErrorCdOUT  :=  'E2030';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'AppealID: ' || AppealIDIN;

        DELETE FROM LOMS_CIVIL_APPEAL_TYPE
        WHERE       APPEAL_ID      =   AppealIDIN;

        ErrorCdOUT  :=  'E2031';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END DeleteCivilAppealType;

    PROCEDURE GetCivilAppealType
    (
        CivilAppealCurOUT   OUT     LOMS_STD_INFO_PKG.CIVIL_APPEAL_REF_CUR_TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetCivilAppealType';
    BEGIN
        ErrorCdOUT  :=  'E2032';
        ErrorMsgOUT :=  'Process Initiated';

        OPEN CivilAppealCurOUT FOR
            SELECT  APPEAL_ID,
                    UPPER(APPEAL_TYPE)
            FROM    LOMS_CIVIL_APPEAL_TYPE;

        ErrorCdOUT  :=  'E2033';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetCivilAppealType;

    PROCEDURE AddCivilPetitionType
    (
        PetitionTypeIN      IN      LOMS_CIVIL_PET_TYPE.PETITION_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        PetitionID                  LOMS_CIVIL_PET_TYPE.PETITION_ID%TYPE;
        CivilPetitionCounter        NUMBER := 0;
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddCivilPetitionType';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        GenIST                      LOMS_CIVIL_PET_TYPE.GEN_IST%TYPE;
        GenUserCd                   LOMS_CIVIL_PET_TYPE.GEN_USER_CD%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
        MULT_ENT_EXCEPTION          EXCEPTION;
    BEGIN
        ErrorCdOUT  :=  'E2034';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'PetitionType: ' || PetitionTypeIN;

        IF PetitionTypeIN IS NOT NULL THEN

            SELECT  COUNT(PETITION_TYPE)
            INTO    CivilPetitionCounter
            FROM    LOMS_CIVIL_PET_TYPE
            WHERE   UPPER(PETITION_TYPE) = UPPER(PetitionTypeIN);

            IF NVL(CivilPetitionCounter,0) = 0 THEN
                ErrorCdOUT  :=  'E2035';
                ErrorMsgOUT :=  'Attempting Data Insert';

                --Generating Suite ID
                SELECT  LOMS_CP_PET_ID_SEQ.NEXTVAL
                INTO    PetitionID
                FROM    DUAL;

                -- Select the user name
                SELECT  USER
                INTO    GenUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    GenIST
                FROM    DUAL;

                INSERT INTO LOMS_CIVIL_PET_TYPE( PETITION_ID,
                                                        PETITION_TYPE,
                                                        GEN_IST,
                                                        GEN_USER_CD,
                                                        UPD_IST,
                                                        UPD_USER_CD)
                VALUES                                ( PetitionID,
                                                        UPPER(PetitionTypeIN),
                                                        GenIST,
                                                        GenUserCd,
                                                        GenIST,
                                                        GenUserCd);
            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E2036';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Civil Petition Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END AddCivilPetitionType;

    PROCEDURE ModifyCivilPetitionType
    (
        PetitionIDIN        IN      LOMS_CIVIL_PET_TYPE.PETITION_ID%TYPE,
        PetitionTypeIN      IN      LOMS_CIVIL_PET_TYPE.PETITION_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        CivilPetitionCounter    NUMBER := 0;
        ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyCivilPetitionType';
        KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        UpdIST                  LOMS_CIVIL_PET_TYPE.UPD_IST%TYPE;
        UpdUserCd               LOMS_CIVIL_PET_TYPE.UPD_USER_CD%TYPE;
        MULT_ENT_EXCEPTION      EXCEPTION;
    BEGIN

        ErrorCdOUT  :=  'E2037';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'PetitionID: ' || PetitionIDIN || ', ' || 'PetitionType: ' || PetitionTypeIN;

        IF PetitionTypeIN IS NOT NULL THEN

            SELECT  COUNT(PETITION_TYPE)
            INTO    CivilPetitionCounter
            FROM    LOMS_CIVIL_PET_TYPE
            WHERE   UPPER(PETITION_TYPE) = UPPER(PetitionTypeIN);

            IF NVL(CivilPetitionCounter,0) = 0 THEN
                -- Select the user name
                SELECT  USER
                INTO    UpdUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    UpdIST
                FROM    DUAL;

                UPDATE  LOMS_CIVIL_PET_TYPE
                SET     PETITION_TYPE   =   UPPER(PetitionTypeIN),
                        UPD_IST         =   UpdIST,
                        UPD_USER_CD     =   UpdUserCd
                WHERE   PETITION_ID     =   PetitionIDIN;

                ErrorCdOUT  :=  'E2038';
                ErrorMsgOUT :=  'Processing Successful';
            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;

        END IF;

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Civil Petition Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ModifyCivilPetitionType;

    PROCEDURE DeleteCivilPetitionType
    (
        PetitionIDIN        IN      LOMS_CIVIL_PET_TYPE.PETITION_ID%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        CivilPetitionRec  LOMS_STD_INFO_PKG.CIVIL_PETITION_REC_TYPE;
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteCivilPetitionType';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        ErrorCdOUT  :=  'E2039';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'PetitionID: ' || PetitionIDIN;

        DELETE FROM LOMS_CIVIL_PET_TYPE
        WHERE       PETITION_ID      =   PetitionIDIN;

        ErrorCdOUT  :=  'E2040';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END DeleteCivilPetitionType;

    PROCEDURE GetCivilPetitionType
    (
        CivilPetitionCurOUT   OUT     LOMS_STD_INFO_PKG.CIVIL_PET_REF_CUR_TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetCivilPetitionType';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        ErrorCdOUT  :=  'E2041';
        ErrorMsgOUT :=  'Process Initiated';

        OPEN CivilPetitionCurOUT FOR
            SELECT  PETITION_ID,
                    UPPER(PETITION_TYPE)
            FROM    LOMS_CIVIL_PET_TYPE;

        ErrorCdOUT  :=  'E2042';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetCivilPetitionType;

    PROCEDURE AddCivilExecutionType
    (
        ExecutionTypeIN     IN      LOMS_CIVIL_EXEC_TYPE.EXECUTION_TYPE%TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2
    )
    IS
        ExecutionID                 LOMS_CIVIL_EXEC_TYPE.EXECUTION_ID%TYPE;
        CivilExecutionCounter       NUMBER := 0;
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddCivilExecutionType';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        GenIST                      LOMS_CIVIL_EXEC_TYPE.GEN_IST%TYPE;
        GenUserCd                   LOMS_CIVIL_EXEC_TYPE.GEN_USER_CD%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
        MULT_ENT_EXCEPTION          EXCEPTION;
    BEGIN
        ErrorCdOUT  :=  'E2043';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'ExecutionType: ' || ExecutionTypeIN;

        IF ExecutionTypeIN IS NOT NULL THEN

            SELECT  COUNT(EXECUTION_TYPE)
            INTO    CivilExecutionCounter
            FROM    LOMS_CIVIL_EXEC_TYPE
            WHERE   UPPER(EXECUTION_TYPE) = UPPER(ExecutionTypeIN);

            IF NVL(CivilExecutionCounter,0) = 0 THEN
                ErrorCdOUT  :=  'E2044';
                ErrorMsgOUT :=  'Attempting Data Insert';

                --Generating Suite ID
                SELECT  LOMS_CE_EXEC_ID_SEQ.NEXTVAL
                INTO    ExecutionID
                FROM    DUAL;

                -- Select the user name
                SELECT  USER
                INTO    GenUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    GenIST
                FROM    DUAL;

                INSERT INTO LOMS_CIVIL_EXEC_TYPE(EXECUTION_ID,
                                                        EXECUTION_TYPE,
                                                        GEN_IST,
                                                        GEN_USER_CD,
                                                        UPD_IST,
                                                        UPD_USER_CD)
                VALUES                                ( ExecutionID,
                                                        UPPER(ExecutionTypeIN),
                                                        GenIST,
                                                        GenUserCd,
                                                        GenIST,
                                                        GenUserCd);
            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E2045';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Execution Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END AddCivilExecutionType;

    PROCEDURE ModifyCivilExecutionType
    (
        ExecutionIDIN         IN      LOMS_CIVIL_EXEC_TYPE.EXECUTION_ID%TYPE,
        ExecutionTypeIN       IN      LOMS_CIVIL_EXEC_TYPE.EXECUTION_TYPE%TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    )
    IS
        CivilExecutionCounter       NUMBER := 0;
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyCivilExecutionType';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        UpdIST                      LOMS_CIVIL_EXEC_TYPE.UPD_IST%TYPE;
        UpdUserCd                   LOMS_CIVIL_EXEC_TYPE.UPD_USER_CD%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
        MULT_ENT_EXCEPTION          EXCEPTION;
    BEGIN

        ErrorCdOUT  :=  'E2046';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'ExecutionID: ' || ExecutionIDIN || ', ' || 'ExecutionType: ' || ExecutionTypeIN;

        IF ExecutionTypeIN IS NOT NULL THEN

            SELECT  COUNT(EXECUTION_TYPE)
            INTO    CivilExecutionCounter
            FROM    LOMS_CIVIL_EXEC_TYPE
            WHERE   UPPER(EXECUTION_TYPE) = UPPER(ExecutionTypeIN);

            IF NVL(CivilExecutionCounter,0) = 0 THEN
                -- Select the user name
                SELECT  USER
                INTO    UpdUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    UpdIST
                FROM    DUAL;

                UPDATE  LOMS_CIVIL_EXEC_TYPE
                SET     EXECUTION_TYPE  =   UPPER(ExecutionTypeIN),
                        UPD_IST         =   UpdIST,
                        UPD_USER_CD     =   UpdUserCd
                WHERE   EXECUTION_ID    =   ExecutionIDIN;

                ErrorCdOUT  :=  'E2047';
                ErrorMsgOUT :=  'Processing Successful';
            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Civil Execution Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ModifyCivilExecutionType;

    PROCEDURE DeleteCivilExecutionType
    (
        ExecutionIDIN         IN      LOMS_CIVIL_EXEC_TYPE.EXECUTION_ID%TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    )
    IS
        ProcessName         LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteCivilExecutionType';
        KeyValue            LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN

        ErrorCdOUT  :=  'E2048';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'ExecutionID: ' || ExecutionIDIN;

        DELETE FROM LOMS_CIVIL_EXEC_TYPE
        WHERE       EXECUTION_ID      =   ExecutionIDIN;

        ErrorCdOUT  :=  'E2049';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END DeleteCivilExecutionType;

    PROCEDURE GetCivilExecutionType
    (
        CivilExecutionCurOUT  OUT     LOMS_STD_INFO_PKG.CIVIL_EXEC_REF_CUR_TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetCivilExecutionType';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        ErrorCdOUT  :=  'E2050';
        ErrorMsgOUT :=  'Process Initiated';

        OPEN CivilExecutionCurOUT FOR
            SELECT  EXECUTION_ID,
                    UPPER(EXECUTION_TYPE)
            FROM    LOMS_CIVIL_EXEC_TYPE;

        ErrorCdOUT  :=  'E2051';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetCivilExecutionType;

    PROCEDURE AddCriminalCaseType
    (
        CriminalCaseTypeIN    IN      LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE%TYPE,
        ErrorCdOUT		        OUT     VARCHAR2,
        ErrorMsgOUT		        OUT     VARCHAR2
    )
    IS
        CriminalCaseTypeID        LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE_ID%TYPE;
        CriminalTypeCounter       NUMBER := 0;
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddCriminalCaseType';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        GenIST                    LOMS_CRIMINAL_CASE_TYPE.GEN_IST%TYPE;
        GenUserCd                 LOMS_CRIMINAL_CASE_TYPE.GEN_USER_CD%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
        MULT_ENT_EXCEPTION        EXCEPTION;
    BEGIN
        ErrorCdOUT  :=  'E2052';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'CriminalCaseType: ' || CriminalCaseTypeIN;

        IF CriminalCaseTypeIN IS NOT NULL THEN

            SELECT  COUNT(CRIMINAL_CASE_TYPE)
            INTO    CriminalTypeCounter
            FROM    LOMS_CRIMINAL_CASE_TYPE
            WHERE   UPPER(CRIMINAL_CASE_TYPE) = UPPER(CriminalCaseTypeIN);

            IF NVL(CriminalTypeCounter,0) = 0 THEN

                ErrorCdOUT  :=  'E2053';
                ErrorMsgOUT :=  'Attempting Data Insert';

                --Generating Suite ID
                SELECT  LOMS_CCT_CASE_ID_SEQ.NEXTVAL
                INTO    CriminalCaseTypeID
                FROM    DUAL;

                -- Select the user name
                SELECT  USER
                INTO    GenUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    GenIST
                FROM    DUAL;

                INSERT INTO LOMS_CRIMINAL_CASE_TYPE( CRIMINAL_CASE_TYPE_ID,
                                                            CRIMINAL_CASE_TYPE,
                                                            GEN_IST,
                                                            GEN_USER_CD,
                                                            UPD_IST,
                                                            UPD_USER_CD)
                VALUES                                    ( CriminalCaseTypeID,
                                                            UPPER(CriminalCaseTypeIN),
                                                            GenIST,
                                                            GenUserCd,
                                                            GenIST,
                                                            GenUserCd);
            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;

        ErrorCdOUT  :=  'E2054';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Criminal Case Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END AddCriminalCaseType;

    PROCEDURE ModifyCriminalCaseType
    (
        CriminalCaseIDIN        IN      LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE_ID%TYPE,
        CriminalCaseTypeIN      IN      LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE%TYPE,
        ErrorCdOUT		          OUT     VARCHAR2,
        ErrorMsgOUT		          OUT     VARCHAR2
    )
    IS
        ProcessName             LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'ModifyCriminalCaseType';
        CriminalTypeCounter     NUMBER := 0;
        KeyValue                LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        UpdIST                  LOMS_CRIMINAL_CASE_TYPE.UPD_IST%TYPE;
        UpdUserCd               LOMS_CRIMINAL_CASE_TYPE.UPD_USER_CD%TYPE;
        MULT_ENT_EXCEPTION      EXCEPTION;

    BEGIN

        ErrorCdOUT  :=  'E2055';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'CriminalCaseID: ' || CriminalCaseIDIN || ', ' || 'CriminalCaseType: ' || CriminalCaseTypeIN;

        IF CriminalCaseTypeIN IS NOT NULL THEN

            SELECT  COUNT(CRIMINAL_CASE_TYPE)
            INTO    CriminalTypeCounter
            FROM    LOMS_CRIMINAL_CASE_TYPE
            WHERE   UPPER(CRIMINAL_CASE_TYPE) = UPPER(CriminalCaseTypeIN);

            IF NVL(CriminalTypeCounter,0) = 0 THEN
                -- Select the user name
                SELECT  USER
                INTO    UpdUserCd
                FROM    DUAL;

                -- Select the sysdate
                SELECT  SYSDATE
                INTO    UpdIST
                FROM    DUAL;

                UPDATE  LOMS_CRIMINAL_CASE_TYPE
                SET     CRIMINAL_CASE_TYPE      =   UPPER(CriminalCaseTypeIN),
                        UPD_IST                 =   UpdIST,
                        UPD_USER_CD             =   UpdUserCd
                WHERE   CRIMINAL_CASE_TYPE_ID   =   CriminalCaseIDIN;

                ErrorCdOUT  :=  'E2056';
                ErrorMsgOUT :=  'Processing Successful';

            ELSE
                RAISE MULT_ENT_EXCEPTION;
            END IF;

        END IF;

    EXCEPTION
        WHEN MULT_ENT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Criminal Case Type already exists';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END ModifyCriminalCaseType;

    PROCEDURE DeleteCriminalCaseType
    (
        CriminalCaseIDIN        IN      LOMS_CRIMINAL_CASE_TYPE.CRIMINAL_CASE_TYPE_ID%TYPE,
        ErrorCdOUT		          OUT     VARCHAR2,
        ErrorMsgOUT		          OUT     VARCHAR2
    )
    IS
        ProcessName         LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'DeleteCriminalCaseType';
        KeyValue            LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        ErrorCdOUT  :=  'E2057';
        ErrorMsgOUT :=  'Process Initiated';

        KeyValue    :=  'CriminalCaseID: ' || CriminalCaseIDIN;

        DELETE FROM LOMS_CRIMINAL_CASE_TYPE
        WHERE       CRIMINAL_CASE_TYPE_ID      =   CriminalCaseIDIN;

        ErrorCdOUT  :=  'E2058';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END DeleteCriminalCaseType;

    PROCEDURE GetCriminalCaseType
    (
        CriminalCaseTypeCurOUT    OUT     LOMS_STD_INFO_PKG.CRIMINAL_CASE_REF_CUR_TYPE,
        ErrorCdOUT		            OUT     VARCHAR2,
        ErrorMsgOUT		            OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetCriminalCaseType';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        ErrorCdOUT  :=  'E2059';
        ErrorMsgOUT :=  'Process Initiated';

        OPEN CriminalCaseTypeCurOUT FOR
            SELECT  CRIMINAL_CASE_TYPE_ID,
                    UPPER(CRIMINAL_CASE_TYPE)
            FROM    LOMS_CRIMINAL_CASE_TYPE;

        ErrorCdOUT  :=  'E2060';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetCriminalCaseType;

    PROCEDURE GetStateInfo
    (
        StateInfoCurOut     OUT     LOMS_STD_INFO_PKG.STATE_INFO_REF_CUR_TYPE,
        ErrorCdOUT		      OUT     VARCHAR2,
        ErrorMsgOUT		      OUT     VARCHAR2

    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetStateInfo';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        ErrorCdOUT  :=  'E2061';
        ErrorMsgOUT :=  'Process Initiated';

        OPEN StateInfoCurOut FOR
            SELECT    DISTINCT(STATE_NAME)
            FROM      LOMS_STATE_INFO
            ORDER BY  STATE_NAME;

        ErrorCdOUT  :=  'E2062';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetStateInfo;

    PROCEDURE GetDistrictInfo
    (
        StateNameIN             IN      LOMS_STATE_INFO.STATE_NAME%TYPE,
        DistrictInfoCurOut      OUT     LOMS_STD_INFO_PKG.DIST_INFO_REF_CUR_TYPE,
        ErrorCdOUT		          OUT     VARCHAR2,
        ErrorMsgOUT		          OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetDistrictInfo';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
        ErrorCdOUT  :=  'E2063';
        ErrorMsgOUT :=  'Process Initiated';

        IF StateNameIN IS NOT NULL THEN
            OPEN DistrictInfoCurOut FOR
                SELECT  DISTINCT(DISTRICT_NAME)
                FROM    LOMS_STATE_INFO
                WHERE   UPPER(STATE_NAME) = UPPER(StateNameIN)
                ORDER BY DISTRICT_NAME;
        END IF;

        ErrorCdOUT  :=  'E2064';
        ErrorMsgOUT :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetDistrictInfo;
    
    PROCEDURE CheckIfCourtExists
    (
        CourtExistsFlgOUT       OUT     VARCHAR2
    )
    IS
        ProcessName       LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'CheckIfCourtExists';
        KeyValue          LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        CourtCount        NUMBER := 0;
        ErrorCd           VARCHAR2(10);
        ErrorMsg          VARCHAR2(1000);
    BEGIN
        
        ErrorCd  :=  'E2065';
        ErrorMsg :=  'Process Initiated';

        SELECT  COUNT(*)
        INTO    CourtCount
        FROM    LOMS_COURT_INFO;  
        
        IF CourtCount > 0 THEN
            CourtExistsFlgOUT := 'YES';
        ELSE
            CourtExistsFlgOUT := 'NO';
        END IF;

        ErrorCd  :=  'E2066';
        ErrorMsg :=  'Processing Successful';

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            CourtExistsFlgOUT := 'NO';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,NULL,NULL);
        WHEN OTHERS THEN
            CourtExistsFlgOUT := 'NO';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
    END CheckIfCourtExists;

END LOMS_STD_INFO_PKG;

/

CREATE OR REPLACE
PACKAGE BODY LOMS_SERVICE_PKG AS

  PROCEDURE AddApplicationMasterInfo
  (
        EmailIdIN             IN        LOMS_APP_MASTER.EMAIL_ID%TYPE,
        EmailPwdIN            IN        VARCHAR2,
        EmailFlgIN            IN        LOMS_APP_MASTER.EMAIL_ENABLED_FLG%TYPE,
        SmsFlgIN              IN        LOMS_APP_MASTER.SMS_ENABLED_FLG%TYPE,
        ProductIdIN           IN        LOMS_APP_MASTER.PRODUCT_ID%TYPE,
        ActivationIdIN        IN        VARCHAR2,
        ErrorCdOUT            OUT       VARCHAR2,
        ErrorMsgOUT           OUT       VARCHAR2
  )
  AS
        GenIST			              LOMS_APP_MASTER.GEN_IST%TYPE;
        GenUserCd		              LOMS_APP_MASTER.GEN_USER_CD%TYPE;
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'AddApplicationMasterInfo';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION   EXCEPTION;
  BEGIN
        IF TRIM(SmsFlgIN) IS NOT NULL AND TRIM(EmailFlgIN) IS NOT NULL AND TRIM(ProductIdIN) IS NOT NULL THEN

            KeyValue := 'ProductId: ' || ProductIdIN;

            -- Process Begins
            ErrorCdOUT  :=  'E6001';
            ErrorMsgOUT :=  'Process Initiated';

            -- Select the user name
            SELECT  USER
            INTO    GenUserCd
            FROM    DUAL;

            -- Select the sysdate
            SELECT  SYSDATE
            INTO    GenIST
            FROM    DUAL;

            INSERT INTO LOMS_APP_MASTER(EMAIL_ID,
                                        EMAIL_PWD,
                                        EMAIL_ENABLED_FLG,
                                        SMS_ENABLED_FLG,
                                        PRODUCT_ID,
                                        ACTIVATION_ID,
                                        GEN_IST,
                                        GEN_USER_CD,
                                        UPD_IST,
                                        UPD_USER_CD)
            VALUES                     (EmailIdIN,
                                        LOMS_CRYPT_PKG.EncryptData(EmailPwdIN),
                                        EmailFlgIN,
                                        SmsFlgIN,
                                        ProductIdIN,
                                        LOMS_CRYPT_PKG.EncryptData(ActivationIdIN),
                                        GenIST,
                                        GenUserCd,
                                        GenIST,
                                        GenUserCd);

            -- Process Begins
            ErrorCdOUT  :=  'E6002';
            ErrorMsgOUT :=  'Processing Successful';

        ELSE
            RAISE INVALID_INPUT_EXCEPTION;
        END IF;
  EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
  END AddApplicationMasterInfo;
  
  PROCEDURE GetApplicationMasterInfo
   (
        EmailIdOUT            OUT       LOMS_APP_MASTER.EMAIL_ID%TYPE,
        EmailPwdOUT           OUT       VARCHAR2,
        EmailFlgOUT           OUT       LOMS_APP_MASTER.EMAIL_ENABLED_FLG%TYPE,
        SmsFlgOUT             OUT       LOMS_APP_MASTER.SMS_ENABLED_FLG%TYPE,
        ProductIdOUT          OUT       LOMS_APP_MASTER.PRODUCT_ID%TYPE,
        ActivationIdOUT       OUT       VARCHAR2,
        ErrorCdOUT            OUT       VARCHAR2,
        ErrorMsgOUT           OUT       VARCHAR2
   )
   IS
        ProcessName                 LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetApplicationMasterInfo';
        ProductActiveFlg            VARCHAR2(2) := 'N';
        KeyValue                    LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
        INVALID_INPUT_EXCEPTION     EXCEPTION;
   BEGIN
        
        ProductActiveFlg := LOMS_SERVICE_PKG.CheckIfProductIsActive;
        
        IF ProductActiveFlg = 'Y' THEN
            
            ErrorCdOUT    := 'E6003';
            ErrorMsgOUT   := 'Process Initiated';
            
            SELECT    EMAIL_ID,
                      LOMS_CRYPT_PKG.DecryptData(EMAIL_PWD),
                      EMAIL_ENABLED_FLG,
                      SMS_ENABLED_FLG,
                      PRODUCT_ID,
                      LOMS_CRYPT_PKG.DecryptData(ACTIVATION_ID)
            INTO      EmailIdOUT,
                      EmailPwdOUT,
                      EmailFlgOUT,
                      SmsFlgOUT,
                      ProductIdOUT,
                      ActivationIdOUT
            FROM      LOMS_APP_MASTER;
            
            ErrorCdOUT    := 'E6004';
            ErrorMsgOUT   := 'Processing Successful';
                        
        ELSE
            RAISE INVALID_INPUT_EXCEPTION;    
        END IF;
        
   EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT    := 'E9999';
            ErrorMsgOUT   := 'Product Not Active'; 
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
   END GetApplicationMasterInfo;

    PROCEDURE UpdateApplicationMasterInfo
    (
          EmailIdIN             IN        LOMS_APP_MASTER.EMAIL_ID%TYPE,
          EmailPwdIN            IN        VARCHAR2,
          EmailFlgIN            IN        LOMS_APP_MASTER.EMAIL_ENABLED_FLG%TYPE,
          SmsFlgIN              IN        LOMS_APP_MASTER.SMS_ENABLED_FLG%TYPE,
          ErrorCdOUT            OUT       VARCHAR2,
          ErrorMsgOUT           OUT       VARCHAR2
    )
    IS
          UpdIST			              LOMS_APP_MASTER.UPD_IST%TYPE;
          UpdUserCd		              LOMS_APP_MASTER.UPD_USER_CD%TYPE;
          ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'UpdateApplicationMasterInfo';
          KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
          INVALID_INPUT_EXCEPTION   EXCEPTION;
    BEGIN
          IF TRIM(SmsFlgIN) IS NOT NULL AND TRIM(EmailFlgIN) IS NOT NULL THEN
  
              KeyValue := 'EmailId: ' || EmailIdIN;
  
              -- Process Begins
              ErrorCdOUT  :=  'E6005';
              ErrorMsgOUT :=  'Process Initiated';
  
              -- Select the user name
              SELECT  USER
              INTO    UpdUserCd
              FROM    DUAL;
  
              -- Select the sysdate
              SELECT  SYSDATE
              INTO    UpdIST
              FROM    DUAL;
  
              UPDATE  LOMS_APP_MASTER
              SET     EMAIL_ID          = EmailIdIN,
                      EMAIL_PWD         = LOMS_CRYPT_PKG.EncryptData(EmailPwdIN),
                      EMAIL_ENABLED_FLG = EmailFlgIN,
                      SMS_ENABLED_FLG   = SmsFlgIN,
                      UPD_IST           = UpdIST,
                      UPD_USER_CD       = UpdUserCd;
  
              -- Process Begins
              ErrorCdOUT  :=  'E6006';
              ErrorMsgOUT :=  'Processing Successful';
  
          ELSE
              RAISE INVALID_INPUT_EXCEPTION;
          END IF;
  
    EXCEPTION
        WHEN INVALID_INPUT_EXCEPTION THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input Data';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END UpdateApplicationMasterInfo;

    FUNCTION CheckIfProductIsActive
    RETURN VARCHAR2
    IS
        RowCount           INTEGER;
        Status             VARCHAR2(5)  := 'N';
        ErrorCd            VARCHAR2(10);
        ErrorMsg           VARCHAR2(2000);
        ProcessName        LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'CheckIfProductIsActive';
    BEGIN
  
        SELECT  COUNT(*)
        INTO    RowCount
        FROM    LOMS_APP_MASTER;
  
        IF RowCount = 1 THEN
            Status := 'Y';
        ELSE
            Status := 'N';
        END IF;
  
        RETURN NVL(Status,'N');
  
    EXCEPTION
         WHEN NO_DATA_FOUND THEN
            ErrorCd  :=  'E9999';
            ErrorMsg :=  'No Data found';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCd,ErrorMsg,NULL,NULL);
            RETURN 'N';
        WHEN OTHERS THEN
            ErrorCd  :=  'E9999';
            ErrorMsg :=  'Unexpected error while processing';
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,NULL,ErrorCd,ErrorMsg,SQLCODE,SQLERRM);
            RETURN 'N';
    END CheckIfProductIsActive;

    PROCEDURE GetEmailIDAndPassword
    (
        EmailIDOUT        OUT       LOMS_APP_MASTER.EMAIL_ID%TYPE,
        EmailPwdOUT       OUT       VARCHAR2,
        ErrorCdOUT        OUT       VARCHAR2,
        ErrorMsgOUT       OUT       VARCHAR2
    )
    IS
        ProcessName               LOMS_AUDIT_INFO.PROCESS_NAME%TYPE	:=	'GetEmailIDAndPassword';
        KeyValue                  LOMS_AUDIT_INFO.KEY_VALUE%TYPE;
    BEGIN
  
        -- Process Begins
        ErrorCdOUT  :=  'E6007';
        ErrorMsgOUT :=  'Process Initiated';
  
        SELECT    EMAIL_ID,
                  LOMS_CRYPT_PKG.DecryptData(EMAIL_PWD)
        INTO      EmailIDOUT,
                  EmailPwdOUT
        FROM      LOMS_APP_MASTER;
  
        -- Process Begins
        ErrorCdOUT  :=  'E6008';
        ErrorMsgOUT :=  'Processing Successful';
  
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Invalid Input Data';
            EmailIDOUT  :=  NULL;
            EmailPwdOUT :=  NULL;
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,NULL,NULL);
        WHEN OTHERS THEN
            ErrorCdOUT  :=  'E9999';
            ErrorMsgOUT :=  'Unexpected error while processing';
            EmailIDOUT  :=  NULL;
            EmailPwdOUT :=  NULL;
            LOMS_AUDIT_PKG.LogAuditMsg(ProcessName,KeyValue,ErrorCdOUT,ErrorMsgOUT,SQLCODE,SQLERRM);
    END GetEmailIDAndPassword;

END LOMS_SERVICE_PKG;

/

--  DDL for Public Synonym LOMS_APP_MASTER
CREATE OR REPLACE PUBLIC SYNONYM LOMS_APP_MASTER
FOR LOMS_MSTR.LOMS_APP_MASTER;

--  DDL for Public Synonym LOMS_AUDIT_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_AUDIT_INFO
FOR LOMS_MSTR.LOMS_AUDIT_INFO;

--  DDL for Public Synonym LOMS_AUDIT_PKG
CREATE OR REPLACE PUBLIC SYNONYM LOMS_AUDIT_PKG
FOR LOMS_MSTR.LOMS_AUDIT_PKG;

--  DDL for Public Synonym LOMS_BOOK_SHELF
CREATE OR REPLACE PUBLIC SYNONYM LOMS_BOOK_SHELF
FOR LOMS_MSTR.LOMS_BOOK_SHELF;

--  DDL for Public Synonym LOMS_CASE_DOC_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CASE_DOC_INFO
FOR LOMS_MSTR.LOMS_CASE_DOC_INFO;

--  DDL for Public Synonym LOMS_CASE_HEARING_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CASE_HEARING_INFO
FOR LOMS_MSTR.LOMS_CASE_HEARING_INFO;

--  DDL for Public Synonym LOMS_CASE_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CASE_INFO
FOR LOMS_MSTR.LOMS_CASE_INFO;

--  DDL for Public Synonym LOMS_CIVIL_APPEAL_TYPE
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CIVIL_APPEAL_TYPE
FOR LOMS_MSTR.LOMS_CIVIL_APPEAL_TYPE;

--  DDL for Public Synonym LOMS_CIVIL_EXEC_TYPE
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CIVIL_EXEC_TYPE
FOR LOMS_MSTR.LOMS_CIVIL_EXEC_TYPE;

--  DDL for Public Synonym LOMS_CIVIL_PET_TYPE
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CIVIL_PET_TYPE
FOR LOMS_MSTR.LOMS_CIVIL_PET_TYPE;

--  DDL for Public Synonym LOMS_CIVIL_SUIT_TYPE
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CIVIL_SUIT_TYPE
FOR LOMS_MSTR.LOMS_CIVIL_SUIT_TYPE;

--  DDL for Public Synonym LOMS_CLIENT_FAMILY_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CLIENT_FAMILY_INFO
FOR LOMS_MSTR.LOMS_CLIENT_FAMILY_INFO;

--  DDL for Public Synonym LOMS_CLIENT_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CLIENT_INFO
FOR LOMS_MSTR.LOMS_CLIENT_INFO;

--  DDL for Public Synonym LOMS_COURT_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_COURT_INFO
FOR LOMS_MSTR.LOMS_COURT_INFO;

--  DDL for Public Synonym LOMS_CRIMINAL_CASE_TYPE
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CRIMINAL_CASE_TYPE
FOR LOMS_MSTR.LOMS_CRIMINAL_CASE_TYPE;

--  DDL for Public Synonym LOMS_CRYPT_PKG
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CRYPT_PKG
FOR LOMS_MSTR.LOMS_CRYPT_PKG;

--  DDL for Public Synonym LOMS_CRYPT_TBL
CREATE OR REPLACE PUBLIC SYNONYM LOMS_CRYPT_TBL
FOR LOMS_MSTR.LOMS_CRYPT_TBL;

--  DDL for Public Synonym LOMS_DATA_BKP_PKG
CREATE OR REPLACE PUBLIC SYNONYM LOMS_DATA_BKP_PKG
FOR LOMS_MSTR.LOMS_DATA_BKP_PKG;

--  DDL for Public Synonym LOMS_EMP_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_EMP_INFO
FOR LOMS_MSTR.LOMS_EMP_INFO;

--  DDL for Public Synonym LOMS_EMP_PKG
CREATE OR REPLACE PUBLIC SYNONYM LOMS_EMP_PKG
FOR LOMS_MSTR.LOMS_EMP_PKG;

--  DDL for Public Synonym LOMS_FINANCE_PKG
CREATE OR REPLACE PUBLIC SYNONYM LOMS_FINANCE_PKG
FOR LOMS_MSTR.LOMS_FINANCE_PKG;

--  DDL for Public Synonym LOMS_INC_EXP_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_INC_EXP_INFO
FOR LOMS_MSTR.LOMS_INC_EXP_INFO; 

--  DDL for Public Synonym LOMS_INC_EXP_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_JDGMNT_INFO
FOR LOMS_MSTR.LOMS_JDGMNT_INFO; 

--  DDL for Public Synonym LOMS_OFFICE_PKG
CREATE OR REPLACE PUBLIC SYNONYM LOMS_OFFICE_PKG
FOR LOMS_MSTR.LOMS_OFFICE_PKG;

--  DDL for Public Synonym LOMS_OPPONENT_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_OPPONENT_INFO
FOR LOMS_MSTR.LOMS_OPPONENT_INFO;

--  DDL for Public Synonym LOMS_REMINDER_ALERT
CREATE OR REPLACE PUBLIC SYNONYM LOMS_REMINDER_ALERT
FOR LOMS_MSTR.LOMS_REMINDER_ALERT;

--  DDL for Public Synonym LOMS_STATE_INFO
CREATE OR REPLACE PUBLIC SYNONYM LOMS_STATE_INFO
FOR LOMS_MSTR.LOMS_STATE_INFO;

--  DDL for Public Synonym LOMS_STD_INFO_PKG
CREATE OR REPLACE PUBLIC SYNONYM LOMS_STD_INFO_PKG
FOR LOMS_MSTR.LOMS_STD_INFO_PKG;

--  DDL for Public Synonym LOMS_STD_INFO_PKG
CREATE OR REPLACE PUBLIC SYNONYM LOMS_SERVICE_PKG
FOR LOMS_MSTR.LOMS_SERVICE_PKG;

--  DDL for Scheduler SCH_INTRVL_EVERY_FRIDAY_1200
BEGIN
  dbms_scheduler.create_schedule(schedule_name    =>  'SCH_INTRVL_EVERY_FRIDAY_1200',  
                                 start_date       =>  TRUNC(SYSDATE)+12/24,  
                                 repeat_interval  =>  'FREQ=WEEKLY; BYDAY=FRI; BYHOUR=12;',  
                                 comments         =>  'Runtime: Run at 12 noon every Friday - For DB Backup');  
END;
/

--  DDL for Scheduler SCH_INTRVL_EVERY_MONDAY_1200
BEGIN
  dbms_scheduler.create_schedule(schedule_name    =>  'SCH_INTRVL_EVERY_MONDAY_1200',  
                                 start_date       =>  TRUNC(SYSDATE)+12/24,  
                                 repeat_interval  =>  'FREQ=WEEKLY; BYDAY=MON; BYHOUR=12;',  
                                 comments         =>  'Runtime: Run at 12 noon every Monday - For Deleting Reminders');  
END;
/

--  DDL for Program PRG_DELETE_REMINDER_ALERT_DATA
BEGIN  
  dbms_scheduler.create_program (program_name   =>  'PRG_DELETE_REMINDER_ALERT_DATA',
                                 program_type   =>  'STORED_PROCEDURE',  
                                 program_action =>  'LOMS_OFFICE_PKG.DeleteEventReminder',  
                                 enabled        =>  TRUE,  
                                 comments       =>  'Procedure to delete Reminder Information');  
END; 
/

--  DDL for Program PRG_BKP_LOMS_DATA
BEGIN  
  dbms_scheduler.create_program (program_name   =>  'PRG_BKP_LOMS_DATA',
                                 program_type   =>  'STORED_PROCEDURE',  
                                 program_action =>  'LOMS_DATA_BKP_PKG.LomsDataExport',  
                                 enabled        =>  TRUE,  
                                 comments       =>  'Procedure to backup LOMS data');  
END; 
/

--  DDL for Job JOB_DELETE_REMINDER_ALERT_DATA
BEGIN  
  dbms_scheduler.create_job  (job_name => 'JOB_DELETE_REMINDER_ALERT_DATA',  
                              program_name=> 'PRG_DELETE_REMINDER_ALERT_DATA',  
                              schedule_name=>'SCH_INTRVL_EVERY_MONDAY_1200',  
                              enabled=>true,  
                              auto_drop=>false,  
                              comments=>'Job to delete data about session values every monday 12 noon');  
END; 
/

--  DDL for Job JOB_DELETE_REMINDER_ALERT_DATA
BEGIN  
  dbms_scheduler.create_job  (job_name => 'JOB_BKP_LOMS_DATA',  
                              program_name=> 'PRG_BKP_LOMS_DATA',  
                              schedule_name=>'SCH_INTRVL_EVERY_FRIDAY_1200',  
                              enabled=>true,  
                              auto_drop=>false,  
                              comments=>'Job to backup LOMS data every Friday at 12 noon');  
END;
/

-- DDL for Create DIRECTORY LOMS_DATA_DUMP
CREATE OR REPLACE DIRECTORY LOMS_DATA_DUMP AS 'C:\LOMS_DATA_DUMP';

-- DDL for Create DIRECTORY LOMS_IMAGES_DOWNLOAD
-- CREATE OR REPLACE DIRECTORY LOMS_IMAGES_DOWNLOAD AS 'C:\LOMS_IMAGES_DOWNLOAD';

-- DDL for Create DIRECTORY LOMS_IMAGES_UPLOAD
-- CREATE OR REPLACE DIRECTORY LOMS_IMAGES_UPLOAD AS 'C:\LOMS_IMAGES_UPLOAD';

-- Master Data
BEGIN

  --REM INSERTING into LOMS_CIVIL_APPEAL_TYPE
  Insert into LOMS_CIVIL_APPEAL_TYPE (APPEAL_ID,APPEAL_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100000,'APPEAL SUIT',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_APPEAL_TYPE (APPEAL_ID,APPEAL_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100001,'CIVIL MISCELLANEOUS APPEAL',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_APPEAL_TYPE (APPEAL_ID,APPEAL_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100002,'INTERLOCUTARY APPLICATION',SYSDATE,USER,SYSDATE,USER);
  
  --REM INSERTING into LOMS_CIVIL_PET_TYPE
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100007,'ARBITRATION ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100004,'INDIAN DIVORCE ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100005,'GUARDIAN AND WARDS ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100006,'PAUPER ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100008,'STATE FINANCE CORPORATION ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100009,'LAND ACQUISITION ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100010,'TRANSFER ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100011,'RENT CONTROL ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100012,'RENT CONTROL APPELLATE',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100013,'INSOLVENT PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100014,'ADOPTION ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100015,'ELECTION ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100000,'MOTOR ACCIDENT CLAIM PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100001,'SUCESSION ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100002,'HINDU MARRIAGE ORIGINAL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_PET_TYPE (PETITION_ID,PETITION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100003,'HINDU MARRIAGE CIVIL MISCELLANEOUS APPEAL',SYSDATE,USER,SYSDATE,USER);
  
  --REM INSERTING into LOMS_CIVIL_EXEC_TYPE
  Insert into LOMS_CIVIL_EXEC_TYPE (EXECUTION_ID,EXECUTION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100000,'EXECUTION PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_EXEC_TYPE (EXECUTION_ID,EXECUTION_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100001,'EXECUTION APPLICATION',SYSDATE,USER,SYSDATE,USER);
  
  --REM INSERTING into LOMS_CIVIL_SUIT_TYPE
  Insert into LOMS_CIVIL_SUIT_TYPE (SUITE_ID,SUITE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100000,'ORIGINAL SUIT',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_SUIT_TYPE (SUITE_ID,SUITE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100001,'INTERLOCUTARY APPLICATION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CIVIL_SUIT_TYPE (SUITE_ID,SUITE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100002,'CIVIL MISCELLANEOUS PETITION',SYSDATE,USER,SYSDATE,USER);
  
  --REM INSERTING into LOMS_CRIMINAL_CASE_TYPE
  Insert into LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID,CRIMINAL_CASE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100000,'SECESSIONS CASE',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID,CRIMINAL_CASE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100001,'CALENDAR CASE',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID,CRIMINAL_CASE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100002,'SUMMARY TRIAL CASE',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID,CRIMINAL_CASE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100003,'CRIMINAL MISCELLANEOUS PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID,CRIMINAL_CASE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100004,'MAINTENANCE CASE',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID,CRIMINAL_CASE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100005,'CRIMINAL REVISION CASE',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID,CRIMINAL_CASE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100006,'BAIL PETITION',SYSDATE,USER,SYSDATE,USER);
  Insert into LOMS_CRIMINAL_CASE_TYPE (CRIMINAL_CASE_TYPE_ID,CRIMINAL_CASE_TYPE,GEN_IST,GEN_USER_CD,UPD_IST,UPD_USER_CD) values (100007,'ANTICIPATORY BAIL PETITION',SYSDATE,USER,SYSDATE,USER);

  --REM INSERTING into LOMS_CRYPT_TBL
  Insert into LOMS_CRYPT_TBL (CRYPT_TYPE,CRYPT_CD) values ('ENCRYPTION','Pa$$word_');
  Insert into LOMS_CRYPT_TBL (CRYPT_TYPE,CRYPT_CD) values ('DECRYPTION','Pa$$word_');
  
  --REM INSERTING into LOMS_STATE_INFO
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','ADILABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','ANANTAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','CHITTOOR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','EAST GODAVARI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','GUNTUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','HYDERABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','YSR DISTRICT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','KARIMNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','KHAMMAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','KRISHNA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','KURNOOL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','MAHBUBNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','MEDAK');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','NALGONDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','NELLORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','NIZAMABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','PRAKASAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','RANGAREDDI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','SRIKAKULAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','VISHAKHAPATNAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','VIZIANAGARAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','WARANGAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ANDHRA PRADESH','WEST GODAVARI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','ANJAW');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','CHANGLANG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','EAST KAMENG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','EAST SIANG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','LOHIT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','LOWER SUBANSIRI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','PAPUM PARE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','TAWANG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','TIRAP');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','DIBANG VALLEY');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','UPPER SIANG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','UPPER SUBANSIRI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','WEST KAMENG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ARUNACHAL PRADESH','WEST SIANG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','BARPETA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','BONGAIGAON');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','CACHAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','DARRANG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','DHEMAJI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','DHUBRI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','DIBRUGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','GOALPARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','GOLAGHAT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','HAILAKANDI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','JORHAT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','KARBI ANGLONG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','KARIMGANJ');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','KOKRAJHAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','LAKHIMPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','MARIGAON');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','NAGAON');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','NALBARI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','NORTH CACHAR HILLS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','SIBSAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','SONITPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ASSAM','TINSUKIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','ARARIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','ARWAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','AURANGABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','BANKA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','BEGUSARAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','BHAGALPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','BHOJPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','BUXAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','DARBHANGA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','EAST CHAMPARAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','GAYA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','GOPALGANJ');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','JAMUI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','JEHANABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','KHAGARIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','KISHANGANJ');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','KAIMUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','KATIHAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','LAKHISARAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','MADHUBANI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','MUNGER');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','MADHEPURA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','MUZAFFARPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','NALANDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','NAWADA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','PATNA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','PURNIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','ROHTAS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','SAHARSA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','SAMASTIPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','SHEOHAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','SHEIKHPURA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','SARAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','SITAMARHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','SUPAUL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','SIWAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','VAISHALI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('BIHAR','WEST CHAMPARAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','BASTAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','BIJAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','BILASPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','DANTEWADA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','DHAMTARI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','DURG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','JASHPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','JANJGIR-CHAMPA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','KORBA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','KORIYA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','KANKER');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','KAWARDHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','MAHASAMUND');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','NARAYANPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','RAIGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','RAJNANDGAON');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','RAIPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('CHATTISGARH','SURGUJA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','CENTRAL DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','EAST DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','NEW DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','NORTH DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','NORTH EAST DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','NORTH WEST DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','SOUTH DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','SOUTH WEST DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('DELHI','WEST DELHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GOA','NORTH GOA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GOA','SOUTH GOA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','AHMEDABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','AMRELI DISTRICT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','ANAND');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','BANASKANTHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','BHARUCH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','BHAVNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','DAHOD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','THE DANGS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','GANDHINAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','JAMNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','JUNAGADH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','KUTCH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','KHEDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','MEHSANA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','NARMADA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','NAVSARI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','PATAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','PANCHMAHAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','PORBANDAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','RAJKOT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','SABARKANTHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','SURENDRANAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','SURAT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','VADODARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('GUJARAT','VALSAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','AMBALA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','BHIWANI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','FARIDABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','FATEHABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','GURGAON');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','HISSAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','JHAJJAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','JIND');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','KARNAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','KAITHAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','KURUKSHETRA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','MAHENDRAGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','MEWAT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','PANCHKULA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','PANIPAT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','REWARI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','ROHTAK');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','SIRSA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','SONEPAT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','YAMUNA NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HARYANA','PALWAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','BILASPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','CHAMBA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','HAMIRPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','KANGRA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','KINNAUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','KULU');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','LAHAUL AND SPITI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','MANDI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','SHIMLA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','SIRMAUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','SOLAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('HIMACHAL PRADESH','UNA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','ANANTNAG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','BADGAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','BANDIPORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','BARAMULA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','DODA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','JAMMU');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','KARGIL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','KATHUA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','KUPWARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','LEH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','POONCH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','PULWAMA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','RAJAURI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','SRINAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','SAMBA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JAMMU KASHMIR','UDHAMPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','BOKARO');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','CHATRA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','DEOGHAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','DHANBAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','DUMKA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','EAST SINGHBHUM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','GARHWA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','GIRIDIH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','GODDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','GUMLA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','HAZARIBAG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','KODERMA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','LOHARDAGA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','PAKUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','PALAMU');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','RANCHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','SAHIBGANJ');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','SERAIKELA-KHARSAWAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','WEST SINGHBHUM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('JHARKAND','RAMGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','BIDAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','BELGAUM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','BIJAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','BAGALKOT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','BELLARY');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','BANGALORE RURAL DISTRICT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','BANGALORE URBAN DISTRICT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','CHAMARAJNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','CHIKMAGALUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','CHITRADURGA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','DAVANAGERE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','DHARWAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','DAKSHINA KANNADA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','GADAG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','GULBARGA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','HASSAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','HAVERI DISTRICT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','KODAGU');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','KOLAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','KOPPAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','MANDYA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','MYSORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','RAICHUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','SHIMOGA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','TUMKUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','UDUPI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','UTTARA KANNADA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','RAMANAGARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','CHIKBALLAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KARNATAKA','YADGIR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','ALAPPUZHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','ERNAKULAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','IDUKKI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','KOLLAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','KANNUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','KASARAGOD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','KOTTAYAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','KOZHIKODE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','MALAPPURAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','PALAKKAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','PATHANAMTHITTA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','THRISSUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','THIRUVANANTHAPURAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('KERALA','WAYANAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','ALIRAJPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','ANUPPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','ASHOK NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','BALAGHAT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','BARWANI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','BETUL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','BHIND');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','BHOPAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','BURHANPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','CHHATARPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','CHHINDWARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','DAMOH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','DATIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','DEWAS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','DHAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','DINDORI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','GUNA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','GWALIOR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','HARDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','HOSHANGABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','INDORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','JABALPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','JHABUA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','KATNI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','KHANDWA (EAST NIMAR)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','KHARGONE (WEST NIMAR)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','MANDLA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','MANDSAUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','MORENA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','NARSINGHPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','NEEMUCH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','PANNA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','REWA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','RAJGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','RATLAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','RAISEN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SATNA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SEHORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SEONI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SHAHDOL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SHAJAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SHEOPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SHIVPURI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SIDHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','SINGRAULI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','TIKAMGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','UJJAIN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','UMARIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MADHYA PRADESH','VIDISHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','AHMEDNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','AKOLA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','AMRAVATI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','AURANGABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','BHANDARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','BEED');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','BULDHANA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','CHANDRAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','DHULE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','GADCHIROLI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','GONDIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','HINGOLI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','JALGAON');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','JALNA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','KOLHAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','LATUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','MUMBAI CITY');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','MUMBAI SUBURBAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','NANDURBAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','NANDED');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','NAGPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','NASHIK');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','OSMANABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','PARBHANI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','PUNE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','RAIGAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','RATNAGIRI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','SINDHUDURG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','SANGLI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','SOLAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','SATARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','THANE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','WARDHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','WASHIM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','YAVATMAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','BISHNUPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','CHURACHANDPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','CHANDEL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','IMPHAL EAST');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','SENAPATI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','TAMENGLONG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','THOUBAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','UKHRUL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MAHARASHTRA','IMPHAL WEST');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MEGHALAYA','EAST GARO HILLS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MEGHALAYA','EAST KHASI HILLS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MEGHALAYA','JAINTIA HILLS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MEGHALAYA','RI BHOI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MEGHALAYA','SOUTH GARO HILLS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MEGHALAYA','WEST GARO HILLS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MEGHALAYA','WEST KHASI HILLS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MIZORAM','AIZAWL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MIZORAM','CHAMPHAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MIZORAM','KOLASIB');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MIZORAM','LAWNGTLAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MIZORAM','LUNGLEI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MIZORAM','MAMIT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MIZORAM','SAIHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('MIZORAM','SERCHHIP');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('NAGALAND','DIMAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('NAGALAND','KOHIMA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('NAGALAND','MOKOKCHUNG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('NAGALAND','MON');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('NAGALAND','PHEK');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('NAGALAND','TUENSANG');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('NAGALAND','WOKHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('NAGALAND','ZUNHEBOTO');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','ANGUL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','BOUDH (BAUDA)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','BHADRAK');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','BALANGIR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','BARGARH (BARAGARH)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','BALASORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','CUTTACK');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','DEBAGARH (DEOGARH)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','DHENKANAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','GANJAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','GAJAPATI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','JHARSUGUDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','JAJPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','JAGATSINGHPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','KHORDHA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','KENDUJHAR (KEONJHAR)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','KALAHANDI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','KANDHAMAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','KORAPUT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','KENDRAPARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','MALKANGIRI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','MAYURBHANJ');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','NABARANGPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','NUAPADA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','NAYAGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','PURI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','RAYAGADA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','SAMBALPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','SUBARNAPUR (SONEPUR)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('ORISSA','SUNDARGARH (SUNDERGARH)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PONDICHERRY','KARAIKAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PONDICHERRY','MAHE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PONDICHERRY','PUDUCHERRY');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PONDICHERRY','YANAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','AMRITSAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','BATHINDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','FIROZPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','FARIDKOT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','FATEHGARH SAHIB');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','GURDASPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','HOSHIARPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','JALANDHAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','KAPURTHALA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','LUDHIANA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','MANSA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','MOGA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','MUKATSAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','SHAHID BHAGAT SINGH NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','PATIALA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','RUPNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('PUNJAB','SANGRUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','AJMER');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','ALWAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','BIKANER');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','BARMER');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','BANSWARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','BHARATPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','BARAN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','BUNDI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','BHILWARA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','CHURU');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','CHITTORGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','DAUSA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','DHOLPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','DUNGAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','GANGANAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','HANUMANGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','JHUNJHUNU');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','JALORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','JODHPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','JAIPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','JAISALMER');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','JHALAWAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','KARAULI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','KOTA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','NAGAUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','PALI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','PRATAPGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','RAJSAMAND');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','SIKAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','SAWAI MADHOPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','SIROHI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','TONK');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('RAJASTHAN','UDAIPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('SIKKIM','EAST SIKKIM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('SIKKIM','NORTH SIKKIM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('SIKKIM','SOUTH SIKKIM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('SIKKIM','WEST SIKKIM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','ARIYALUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','CHENNAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','COIMBATORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','CUDDALORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','DHARMAPURI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','DINDIGUL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','ERODE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','KANCHIPURAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','KANYAKUMARI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','KARUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','MADURAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','NAGAPATTINAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','NILGIRIS');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','NAMAKKAL');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','PERAMBALUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','PUDUKKOTTAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','RAMANATHAPURAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','SALEM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','SIVAGANGA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','TIRUPPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','TIRUCHIRAPPALLI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','THENI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','TIRUNELVELI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','THANJAVUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','THOOTHUKUDI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','THIRUVALLUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','THIRUVARUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','TIRUVANNAMALAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','VELLORE');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','VILUPPURAM');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TAMILNADU','VIRUDHUNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TRIPURA','DHALAI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TRIPURA','NORTH TRIPURA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TRIPURA','SOUTH TRIPURA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('TRIPURA','WEST TRIPURA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','AGRA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','ALLAHABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','ALIGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','AMBEDKAR NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','AURAIYA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','AZAMGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BARABANKI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BUDAUN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BAGPAT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BAHRAICH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BIJNOR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BALLIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BANDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BALRAMPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BAREILLY');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BASTI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','BULANDSHAHAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','CHANDAULI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','CHHATRAPATI SHAHUJI MAHARAJ NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','CHITRAKOOT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','DEORIA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','ETAH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','KANSHI RAM NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','ETAWAH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','FIROZABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','FARRUKHABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','FATEHPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','FAIZABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','GAUTAM BUDDHA NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','GONDA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','GHAZIPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','GORAKHPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','GHAZIABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','HAMIRPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','HARDOI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MAHAMAYA NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','JHANSI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','JALAUN');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','JYOTIBA PHULE NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','JAUNPUR DISTRICT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','RAMABAI NAGAR (KANPUR DEHAT)');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','KANNAUJ');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','KANPUR NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','KANPUR SOUTH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','KAUSHAMBI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','KUSHINAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','LALITPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','LAKHIMPUR-KHERI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','LUCKNOW');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MAU');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MEERUT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MAHARAJGANJ');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MAHOBA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MIRZAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MORADABAD');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MAINPURI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MATHURA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','MUZAFFARNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','PILIBHIT');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','PRATAPGARH');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','RAMPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','RAEBARELI');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','SAHARANPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','SITAPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','SHAHJAHANPUR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','SANT KABIR NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','SIDDHARTHNAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','SONBHADRA');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','SANT RAVIDAS NAGAR');
  Insert into LOMS_STATE_INFO (STATE_NAME,DISTRICT_NAME) values ('UTTAR PRADESH','SULTANPUR');
  
  COMMIT;

END;

/

DISCON;

EXIT;